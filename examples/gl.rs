#![no_std]
#![allow(bad_style)]
#![allow(clippy::unreadable_literal)]

/*
Bindings for GL.

* API: GL_VERSION_3_3
* profile: Core
* extensions: []

generated by phosphorus-0.0.4-alpha
*/
fn main() {}

// provides C types, replace with your own source if you like.
pub use chlorine::*;

pub use types::*;
pub mod types {
  //! Type aliases used by GL.

  // Note: A source of C types must be in scope! winapi, libc, etc.
  use super::*;
  pub type GLbitfield = c_uint;
  pub type GLboolean = c_uchar;
  pub type GLbyte = i8;
  pub type GLchar = c_char;
  pub type GLclampd = c_double;
  pub type GLclampf = c_float;
  pub type GLdouble = c_double;
  pub type GLenum = c_uint;
  pub type GLfloat = c_float;
  pub type GLhalf = u16;
  pub type GLint = c_int;
  pub type GLint64 = i64;
  pub type GLintptr = isize;
  pub type GLshort = i16;
  pub type GLsizei = c_int;
  pub type GLsizeiptr = isize;
  pub type GLsync = *mut __GLsync;
  #[doc = "Treat as \"opaque\"."]
  pub struct __GLsync(u8);
  pub type GLubyte = u8;
  pub type GLuint = c_uint;
  pub type GLuint64 = u64;
  pub type GLushort = u16;
  pub type GLvoid = c_void;
}

pub use groups::*;
pub mod groups {
  //! Various aliases for `GLenum`.
  //!
  //! This helps function signatures be more clear about what `GLenum` values
  //! they allow.
  //!
  //! **Important**: The groups info is **not** necessarily correct! Khronos
  //! considers it to be low-value metadata, and so they don't keep the groups
  //! info up to date with all API levels and Extension alterations. That is why
  //! it's presented only as an alias, because you might need to pass other
  //! `GLenum` values based on your exact use case.
  use super::*;
  #[doc = "AttributeType\n* `GL_BOOL`\n* `GL_BOOL_ARB`\n* `GL_BOOL_VEC2`\n* `GL_BOOL_VEC2_ARB`\n* `GL_BOOL_VEC3`\n* `GL_BOOL_VEC3_ARB`\n* `GL_BOOL_VEC4`\n* `GL_BOOL_VEC4_ARB`\n* `GL_FLOAT_MAT2`\n* `GL_FLOAT_MAT2_ARB`\n* `GL_FLOAT_MAT2x3`\n* `GL_FLOAT_MAT2x3_NV`\n* `GL_FLOAT_MAT2x4`\n* `GL_FLOAT_MAT2x4_NV`\n* `GL_FLOAT_MAT3`\n* `GL_FLOAT_MAT3_ARB`\n* `GL_FLOAT_MAT3x2`\n* `GL_FLOAT_MAT3x2_NV`\n* `GL_FLOAT_MAT3x4`\n* `GL_FLOAT_MAT3x4_NV`\n* `GL_FLOAT_MAT4`\n* `GL_FLOAT_MAT4_ARB`\n* `GL_FLOAT_MAT4x2`\n* `GL_FLOAT_MAT4x2_NV`\n* `GL_FLOAT_MAT4x3`\n* `GL_FLOAT_MAT4x3_NV`\n* `GL_FLOAT_VEC2`\n* `GL_FLOAT_VEC2_ARB`\n* `GL_FLOAT_VEC3`\n* `GL_FLOAT_VEC3_ARB`\n* `GL_FLOAT_VEC4`\n* `GL_FLOAT_VEC4_ARB`\n* `GL_INT_VEC2`\n* `GL_INT_VEC2_ARB`\n* `GL_INT_VEC3`\n* `GL_INT_VEC3_ARB`\n* `GL_INT_VEC4`\n* `GL_INT_VEC4_ARB`\n* `GL_SAMPLER_1D`\n* `GL_SAMPLER_1D_ARB`\n* `GL_SAMPLER_1D_SHADOW`\n* `GL_SAMPLER_1D_SHADOW_ARB`\n* `GL_SAMPLER_2D`\n* `GL_SAMPLER_2D_ARB`\n* `GL_SAMPLER_2D_RECT`\n* `GL_SAMPLER_2D_RECT_ARB`\n* `GL_SAMPLER_2D_RECT_SHADOW`\n* `GL_SAMPLER_2D_RECT_SHADOW_ARB`\n* `GL_SAMPLER_2D_SHADOW`\n* `GL_SAMPLER_2D_SHADOW_ARB`\n* `GL_SAMPLER_2D_SHADOW_EXT`\n* `GL_SAMPLER_3D`\n* `GL_SAMPLER_3D_ARB`\n* `GL_SAMPLER_3D_OES`\n* `GL_SAMPLER_CUBE`\n* `GL_SAMPLER_CUBE_ARB`\n"]
  pub type AttributeType = GLenum;
  #[doc = "BlendEquationModeEXT\n* `GL_ALPHA_MAX_SGIX`\n* `GL_ALPHA_MIN_SGIX`\n* `GL_FUNC_ADD`\n* `GL_FUNC_ADD_EXT`\n* `GL_FUNC_REVERSE_SUBTRACT`\n* `GL_FUNC_REVERSE_SUBTRACT_EXT`\n* `GL_FUNC_SUBTRACT`\n* `GL_FUNC_SUBTRACT_EXT`\n* `GL_MAX`\n* `GL_MAX_EXT`\n* `GL_MIN`\n* `GL_MIN_EXT`\n"]
  pub type BlendEquationModeEXT = GLenum;
  #[doc = "BlendingFactor\n* `GL_CONSTANT_ALPHA`\n* `GL_CONSTANT_COLOR`\n* `GL_DST_ALPHA`\n* `GL_DST_COLOR`\n* `GL_ONE`\n* `GL_ONE_MINUS_CONSTANT_ALPHA`\n* `GL_ONE_MINUS_CONSTANT_COLOR`\n* `GL_ONE_MINUS_DST_ALPHA`\n* `GL_ONE_MINUS_DST_COLOR`\n* `GL_ONE_MINUS_SRC1_ALPHA`\n* `GL_ONE_MINUS_SRC1_COLOR`\n* `GL_ONE_MINUS_SRC_ALPHA`\n* `GL_ONE_MINUS_SRC_COLOR`\n* `GL_SRC1_ALPHA`\n* `GL_SRC1_COLOR`\n* `GL_SRC_ALPHA`\n* `GL_SRC_ALPHA_SATURATE`\n* `GL_SRC_COLOR`\n* `GL_ZERO`\n"]
  pub type BlendingFactor = GLenum;
  #[doc = "BlitFramebufferFilter\n* `GL_LINEAR`\n* `GL_NEAREST`\n"]
  pub type BlitFramebufferFilter = GLenum;
  #[doc = "Boolean\n* `GL_FALSE`\n* `GL_TRUE`\n"]
  pub type Boolean = GLenum;
  #[doc = "BufferAccessARB\n* `GL_READ_ONLY`\n* `GL_READ_WRITE`\n* `GL_WRITE_ONLY`\n"]
  pub type BufferAccessARB = GLenum;
  #[doc = "BufferPNameARB\n* `GL_BUFFER_ACCESS`\n* `GL_BUFFER_ACCESS_ARB`\n* `GL_BUFFER_ACCESS_FLAGS`\n* `GL_BUFFER_IMMUTABLE_STORAGE`\n* `GL_BUFFER_MAPPED`\n* `GL_BUFFER_MAPPED_ARB`\n* `GL_BUFFER_MAP_LENGTH`\n* `GL_BUFFER_MAP_OFFSET`\n* `GL_BUFFER_SIZE`\n* `GL_BUFFER_SIZE_ARB`\n* `GL_BUFFER_STORAGE_FLAGS`\n* `GL_BUFFER_USAGE`\n* `GL_BUFFER_USAGE_ARB`\n"]
  pub type BufferPNameARB = GLenum;
  #[doc = "BufferPointerNameARB\n* `GL_BUFFER_MAP_POINTER`\n* `GL_BUFFER_MAP_POINTER_ARB`\n"]
  pub type BufferPointerNameARB = GLenum;
  #[doc = "BufferTargetARB\n* `GL_ARRAY_BUFFER`\n* `GL_ATOMIC_COUNTER_BUFFER`\n* `GL_COPY_READ_BUFFER`\n* `GL_COPY_WRITE_BUFFER`\n* `GL_DISPATCH_INDIRECT_BUFFER`\n* `GL_DRAW_INDIRECT_BUFFER`\n* `GL_ELEMENT_ARRAY_BUFFER`\n* `GL_PARAMETER_BUFFER`\n* `GL_PIXEL_PACK_BUFFER`\n* `GL_PIXEL_UNPACK_BUFFER`\n* `GL_QUERY_BUFFER`\n* `GL_SHADER_STORAGE_BUFFER`\n* `GL_TEXTURE_BUFFER`\n* `GL_TRANSFORM_FEEDBACK_BUFFER`\n* `GL_UNIFORM_BUFFER`\n"]
  pub type BufferTargetARB = GLenum;
  #[doc = "BufferUsageARB\n* `GL_DYNAMIC_COPY`\n* `GL_DYNAMIC_DRAW`\n* `GL_DYNAMIC_READ`\n* `GL_STATIC_COPY`\n* `GL_STATIC_DRAW`\n* `GL_STATIC_READ`\n* `GL_STREAM_COPY`\n* `GL_STREAM_DRAW`\n* `GL_STREAM_READ`\n"]
  pub type BufferUsageARB = GLenum;
  #[doc = "Buffer\n* `GL_COLOR`\n* `GL_DEPTH`\n* `GL_STENCIL`\n"]
  pub type Buffer = GLenum;
  #[doc = "ClampColorModeARB\n* `GL_FALSE`\n* `GL_FIXED_ONLY`\n* `GL_FIXED_ONLY_ARB`\n* `GL_TRUE`\n"]
  pub type ClampColorModeARB = GLenum;
  #[doc = "ClampColorTargetARB\n* `GL_CLAMP_FRAGMENT_COLOR_ARB`\n* `GL_CLAMP_READ_COLOR`\n* `GL_CLAMP_READ_COLOR_ARB`\n* `GL_CLAMP_VERTEX_COLOR_ARB`\n"]
  pub type ClampColorTargetARB = GLenum;
  #[doc = "ClearBufferMask\n* `GL_ACCUM_BUFFER_BIT`\n* `GL_COLOR_BUFFER_BIT`\n* `GL_COVERAGE_BUFFER_BIT_NV`\n* `GL_DEPTH_BUFFER_BIT`\n* `GL_STENCIL_BUFFER_BIT`\n"]
  pub type ClearBufferMask = GLenum;
  #[doc = "ConditionalRenderMode\n* `GL_QUERY_BY_REGION_NO_WAIT`\n* `GL_QUERY_BY_REGION_NO_WAIT_INVERTED`\n* `GL_QUERY_BY_REGION_WAIT`\n* `GL_QUERY_BY_REGION_WAIT_INVERTED`\n* `GL_QUERY_NO_WAIT`\n* `GL_QUERY_NO_WAIT_INVERTED`\n* `GL_QUERY_WAIT`\n* `GL_QUERY_WAIT_INVERTED`\n"]
  pub type ConditionalRenderMode = GLenum;
  #[doc = "CopyBufferSubDataTarget\n* `GL_ARRAY_BUFFER`\n* `GL_ATOMIC_COUNTER_BUFFER`\n* `GL_COPY_READ_BUFFER`\n* `GL_COPY_WRITE_BUFFER`\n* `GL_DISPATCH_INDIRECT_BUFFER`\n* `GL_DRAW_INDIRECT_BUFFER`\n* `GL_ELEMENT_ARRAY_BUFFER`\n* `GL_PIXEL_PACK_BUFFER`\n* `GL_PIXEL_UNPACK_BUFFER`\n* `GL_QUERY_BUFFER`\n* `GL_SHADER_STORAGE_BUFFER`\n* `GL_TEXTURE_BUFFER`\n* `GL_TRANSFORM_FEEDBACK_BUFFER`\n* `GL_UNIFORM_BUFFER`\n"]
  pub type CopyBufferSubDataTarget = GLenum;
  #[doc = "CullFaceMode\n* `GL_BACK`\n* `GL_FRONT`\n* `GL_FRONT_AND_BACK`\n"]
  pub type CullFaceMode = GLenum;
  #[doc = "DepthFunction\n* `GL_ALWAYS`\n* `GL_EQUAL`\n* `GL_GEQUAL`\n* `GL_GREATER`\n* `GL_LEQUAL`\n* `GL_LESS`\n* `GL_NEVER`\n* `GL_NOTEQUAL`\n"]
  pub type DepthFunction = GLenum;
  #[doc = "DrawBufferMode\n* `GL_AUX0`\n* `GL_AUX1`\n* `GL_AUX2`\n* `GL_AUX3`\n* `GL_BACK`\n* `GL_BACK_LEFT`\n* `GL_BACK_RIGHT`\n* `GL_COLOR_ATTACHMENT0`\n* `GL_COLOR_ATTACHMENT1`\n* `GL_COLOR_ATTACHMENT10`\n* `GL_COLOR_ATTACHMENT11`\n* `GL_COLOR_ATTACHMENT12`\n* `GL_COLOR_ATTACHMENT13`\n* `GL_COLOR_ATTACHMENT14`\n* `GL_COLOR_ATTACHMENT15`\n* `GL_COLOR_ATTACHMENT16`\n* `GL_COLOR_ATTACHMENT17`\n* `GL_COLOR_ATTACHMENT18`\n* `GL_COLOR_ATTACHMENT19`\n* `GL_COLOR_ATTACHMENT2`\n* `GL_COLOR_ATTACHMENT20`\n* `GL_COLOR_ATTACHMENT21`\n* `GL_COLOR_ATTACHMENT22`\n* `GL_COLOR_ATTACHMENT23`\n* `GL_COLOR_ATTACHMENT24`\n* `GL_COLOR_ATTACHMENT25`\n* `GL_COLOR_ATTACHMENT26`\n* `GL_COLOR_ATTACHMENT27`\n* `GL_COLOR_ATTACHMENT28`\n* `GL_COLOR_ATTACHMENT29`\n* `GL_COLOR_ATTACHMENT3`\n* `GL_COLOR_ATTACHMENT30`\n* `GL_COLOR_ATTACHMENT31`\n* `GL_COLOR_ATTACHMENT4`\n* `GL_COLOR_ATTACHMENT5`\n* `GL_COLOR_ATTACHMENT6`\n* `GL_COLOR_ATTACHMENT7`\n* `GL_COLOR_ATTACHMENT8`\n* `GL_COLOR_ATTACHMENT9`\n* `GL_FRONT`\n* `GL_FRONT_AND_BACK`\n* `GL_FRONT_LEFT`\n* `GL_FRONT_RIGHT`\n* `GL_LEFT`\n* `GL_NONE`\n* `GL_NONE_OES`\n* `GL_RIGHT`\n"]
  pub type DrawBufferMode = GLenum;
  #[doc = "DrawElementsType\n* `GL_UNSIGNED_BYTE`\n* `GL_UNSIGNED_INT`\n* `GL_UNSIGNED_SHORT`\n"]
  pub type DrawElementsType = GLenum;
  #[doc = "EnableCap\n* `GL_ALPHA_TEST`\n* `GL_ASYNC_DRAW_PIXELS_SGIX`\n* `GL_ASYNC_HISTOGRAM_SGIX`\n* `GL_ASYNC_READ_PIXELS_SGIX`\n* `GL_ASYNC_TEX_IMAGE_SGIX`\n* `GL_AUTO_NORMAL`\n* `GL_BLEND`\n* `GL_CALLIGRAPHIC_FRAGMENT_SGIX`\n* `GL_CLIP_DISTANCE0`\n* `GL_CLIP_DISTANCE1`\n* `GL_CLIP_DISTANCE2`\n* `GL_CLIP_DISTANCE3`\n* `GL_CLIP_DISTANCE4`\n* `GL_CLIP_DISTANCE5`\n* `GL_CLIP_DISTANCE6`\n* `GL_CLIP_DISTANCE7`\n* `GL_CLIP_PLANE0`\n* `GL_CLIP_PLANE1`\n* `GL_CLIP_PLANE2`\n* `GL_CLIP_PLANE3`\n* `GL_CLIP_PLANE4`\n* `GL_CLIP_PLANE5`\n* `GL_COLOR_ARRAY`\n* `GL_COLOR_LOGIC_OP`\n* `GL_COLOR_MATERIAL`\n* `GL_COLOR_TABLE_SGI`\n* `GL_CONVOLUTION_1D_EXT`\n* `GL_CONVOLUTION_2D_EXT`\n* `GL_CULL_FACE`\n* `GL_DEBUG_OUTPUT`\n* `GL_DEBUG_OUTPUT_SYNCHRONOUS`\n* `GL_DEPTH_CLAMP`\n* `GL_DEPTH_TEST`\n* `GL_DITHER`\n* `GL_EDGE_FLAG_ARRAY`\n* `GL_FOG`\n* `GL_FOG_OFFSET_SGIX`\n* `GL_FRAGMENT_COLOR_MATERIAL_SGIX`\n* `GL_FRAGMENT_LIGHT0_SGIX`\n* `GL_FRAGMENT_LIGHT1_SGIX`\n* `GL_FRAGMENT_LIGHT2_SGIX`\n* `GL_FRAGMENT_LIGHT3_SGIX`\n* `GL_FRAGMENT_LIGHT4_SGIX`\n* `GL_FRAGMENT_LIGHT5_SGIX`\n* `GL_FRAGMENT_LIGHT6_SGIX`\n* `GL_FRAGMENT_LIGHT7_SGIX`\n* `GL_FRAGMENT_LIGHTING_SGIX`\n* `GL_FRAMEBUFFER_SRGB`\n* `GL_FRAMEZOOM_SGIX`\n* `GL_HISTOGRAM_EXT`\n* `GL_INDEX_ARRAY`\n* `GL_INDEX_LOGIC_OP`\n* `GL_INTERLACE_SGIX`\n* `GL_IR_INSTRUMENT1_SGIX`\n* `GL_LIGHT0`\n* `GL_LIGHT1`\n* `GL_LIGHT2`\n* `GL_LIGHT3`\n* `GL_LIGHT4`\n* `GL_LIGHT5`\n* `GL_LIGHT6`\n* `GL_LIGHT7`\n* `GL_LIGHTING`\n* `GL_LINE_SMOOTH`\n* `GL_LINE_STIPPLE`\n* `GL_MAP1_COLOR_4`\n* `GL_MAP1_INDEX`\n* `GL_MAP1_NORMAL`\n* `GL_MAP1_TEXTURE_COORD_1`\n* `GL_MAP1_TEXTURE_COORD_2`\n* `GL_MAP1_TEXTURE_COORD_3`\n* `GL_MAP1_TEXTURE_COORD_4`\n* `GL_MAP1_VERTEX_3`\n* `GL_MAP1_VERTEX_4`\n* `GL_MAP2_COLOR_4`\n* `GL_MAP2_INDEX`\n* `GL_MAP2_NORMAL`\n* `GL_MAP2_TEXTURE_COORD_1`\n* `GL_MAP2_TEXTURE_COORD_2`\n* `GL_MAP2_TEXTURE_COORD_3`\n* `GL_MAP2_TEXTURE_COORD_4`\n* `GL_MAP2_VERTEX_3`\n* `GL_MAP2_VERTEX_4`\n* `GL_MINMAX_EXT`\n* `GL_MULTISAMPLE`\n* `GL_MULTISAMPLE_SGIS`\n* `GL_NORMALIZE`\n* `GL_NORMAL_ARRAY`\n* `GL_PIXEL_TEXTURE_SGIS`\n* `GL_PIXEL_TEX_GEN_SGIX`\n* `GL_POINT_SMOOTH`\n* `GL_POLYGON_OFFSET_FILL`\n* `GL_POLYGON_OFFSET_LINE`\n* `GL_POLYGON_OFFSET_POINT`\n* `GL_POLYGON_SMOOTH`\n* `GL_POLYGON_STIPPLE`\n* `GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI`\n* `GL_POST_CONVOLUTION_COLOR_TABLE_SGI`\n* `GL_PRIMITIVE_RESTART`\n* `GL_PRIMITIVE_RESTART_FIXED_INDEX`\n* `GL_PROGRAM_POINT_SIZE`\n* `GL_RASTERIZER_DISCARD`\n* `GL_REFERENCE_PLANE_SGIX`\n* `GL_RESCALE_NORMAL_EXT`\n* `GL_SAMPLE_ALPHA_TO_COVERAGE`\n* `GL_SAMPLE_ALPHA_TO_MASK_SGIS`\n* `GL_SAMPLE_ALPHA_TO_ONE`\n* `GL_SAMPLE_ALPHA_TO_ONE_SGIS`\n* `GL_SAMPLE_COVERAGE`\n* `GL_SAMPLE_MASK`\n* `GL_SAMPLE_MASK_SGIS`\n* `GL_SAMPLE_SHADING`\n* `GL_SCISSOR_TEST`\n* `GL_SEPARABLE_2D_EXT`\n* `GL_SHARED_TEXTURE_PALETTE_EXT`\n* `GL_SPRITE_SGIX`\n* `GL_STENCIL_TEST`\n* `GL_TEXTURE_1D`\n* `GL_TEXTURE_2D`\n* `GL_TEXTURE_3D_EXT`\n* `GL_TEXTURE_4D_SGIS`\n* `GL_TEXTURE_COLOR_TABLE_SGI`\n* `GL_TEXTURE_COORD_ARRAY`\n* `GL_TEXTURE_CUBE_MAP_SEAMLESS`\n* `GL_TEXTURE_GEN_Q`\n* `GL_TEXTURE_GEN_R`\n* `GL_TEXTURE_GEN_S`\n* `GL_TEXTURE_GEN_T`\n* `GL_VERTEX_ARRAY`\n"]
  pub type EnableCap = GLenum;
  #[doc = "ErrorCode\n* `GL_INVALID_ENUM`\n* `GL_INVALID_FRAMEBUFFER_OPERATION`\n* `GL_INVALID_FRAMEBUFFER_OPERATION_EXT`\n* `GL_INVALID_FRAMEBUFFER_OPERATION_OES`\n* `GL_INVALID_OPERATION`\n* `GL_INVALID_VALUE`\n* `GL_NO_ERROR`\n* `GL_OUT_OF_MEMORY`\n* `GL_STACK_OVERFLOW`\n* `GL_STACK_UNDERFLOW`\n* `GL_TABLE_TOO_LARGE`\n* `GL_TABLE_TOO_LARGE_EXT`\n* `GL_TEXTURE_TOO_LARGE_EXT`\n"]
  pub type ErrorCode = GLenum;
  #[doc = "FramebufferAttachmentParameterName\n* `GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE`\n* `GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE`\n* `GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING`\n* `GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE`\n* `GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE`\n* `GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE`\n* `GL_FRAMEBUFFER_ATTACHMENT_LAYERED`\n* `GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB`\n* `GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES`\n* `GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME`\n* `GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES`\n* `GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE`\n* `GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES`\n* `GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE`\n* `GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT`\n* `GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG`\n"]
  pub type FramebufferAttachmentParameterName = GLenum;
  #[doc = "FramebufferAttachment\n* `GL_COLOR_ATTACHMENT0`\n* `GL_COLOR_ATTACHMENT0_EXT`\n* `GL_COLOR_ATTACHMENT0_NV`\n* `GL_COLOR_ATTACHMENT0_OES`\n* `GL_COLOR_ATTACHMENT1`\n* `GL_COLOR_ATTACHMENT10`\n* `GL_COLOR_ATTACHMENT10_EXT`\n* `GL_COLOR_ATTACHMENT10_NV`\n* `GL_COLOR_ATTACHMENT11`\n* `GL_COLOR_ATTACHMENT11_EXT`\n* `GL_COLOR_ATTACHMENT11_NV`\n* `GL_COLOR_ATTACHMENT12`\n* `GL_COLOR_ATTACHMENT12_EXT`\n* `GL_COLOR_ATTACHMENT12_NV`\n* `GL_COLOR_ATTACHMENT13`\n* `GL_COLOR_ATTACHMENT13_EXT`\n* `GL_COLOR_ATTACHMENT13_NV`\n* `GL_COLOR_ATTACHMENT14`\n* `GL_COLOR_ATTACHMENT14_EXT`\n* `GL_COLOR_ATTACHMENT14_NV`\n* `GL_COLOR_ATTACHMENT15`\n* `GL_COLOR_ATTACHMENT15_EXT`\n* `GL_COLOR_ATTACHMENT15_NV`\n* `GL_COLOR_ATTACHMENT16`\n* `GL_COLOR_ATTACHMENT17`\n* `GL_COLOR_ATTACHMENT18`\n* `GL_COLOR_ATTACHMENT19`\n* `GL_COLOR_ATTACHMENT1_EXT`\n* `GL_COLOR_ATTACHMENT1_NV`\n* `GL_COLOR_ATTACHMENT2`\n* `GL_COLOR_ATTACHMENT20`\n* `GL_COLOR_ATTACHMENT21`\n* `GL_COLOR_ATTACHMENT22`\n* `GL_COLOR_ATTACHMENT23`\n* `GL_COLOR_ATTACHMENT24`\n* `GL_COLOR_ATTACHMENT25`\n* `GL_COLOR_ATTACHMENT26`\n* `GL_COLOR_ATTACHMENT27`\n* `GL_COLOR_ATTACHMENT28`\n* `GL_COLOR_ATTACHMENT29`\n* `GL_COLOR_ATTACHMENT2_EXT`\n* `GL_COLOR_ATTACHMENT2_NV`\n* `GL_COLOR_ATTACHMENT3`\n* `GL_COLOR_ATTACHMENT30`\n* `GL_COLOR_ATTACHMENT31`\n* `GL_COLOR_ATTACHMENT3_EXT`\n* `GL_COLOR_ATTACHMENT3_NV`\n* `GL_COLOR_ATTACHMENT4`\n* `GL_COLOR_ATTACHMENT4_EXT`\n* `GL_COLOR_ATTACHMENT4_NV`\n* `GL_COLOR_ATTACHMENT5`\n* `GL_COLOR_ATTACHMENT5_EXT`\n* `GL_COLOR_ATTACHMENT5_NV`\n* `GL_COLOR_ATTACHMENT6`\n* `GL_COLOR_ATTACHMENT6_EXT`\n* `GL_COLOR_ATTACHMENT6_NV`\n* `GL_COLOR_ATTACHMENT7`\n* `GL_COLOR_ATTACHMENT7_EXT`\n* `GL_COLOR_ATTACHMENT7_NV`\n* `GL_COLOR_ATTACHMENT8`\n* `GL_COLOR_ATTACHMENT8_EXT`\n* `GL_COLOR_ATTACHMENT8_NV`\n* `GL_COLOR_ATTACHMENT9`\n* `GL_COLOR_ATTACHMENT9_EXT`\n* `GL_COLOR_ATTACHMENT9_NV`\n* `GL_DEPTH_ATTACHMENT`\n* `GL_DEPTH_ATTACHMENT_EXT`\n* `GL_DEPTH_ATTACHMENT_OES`\n* `GL_DEPTH_STENCIL_ATTACHMENT`\n* `GL_STENCIL_ATTACHMENT`\n* `GL_STENCIL_ATTACHMENT_EXT`\n* `GL_STENCIL_ATTACHMENT_OES`\n"]
  pub type FramebufferAttachment = GLenum;
  #[doc = "FramebufferStatus\n* `GL_FRAMEBUFFER_COMPLETE`\n* `GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT`\n* `GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER`\n* `GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS`\n* `GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT`\n* `GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE`\n* `GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER`\n* `GL_FRAMEBUFFER_UNDEFINED`\n* `GL_FRAMEBUFFER_UNSUPPORTED`\n"]
  pub type FramebufferStatus = GLenum;
  #[doc = "FramebufferTarget\n* `GL_DRAW_FRAMEBUFFER`\n* `GL_FRAMEBUFFER`\n* `GL_FRAMEBUFFER_OES`\n* `GL_READ_FRAMEBUFFER`\n"]
  pub type FramebufferTarget = GLenum;
  #[doc = "FrontFaceDirection\n* `GL_CCW`\n* `GL_CW`\n"]
  pub type FrontFaceDirection = GLenum;
  #[doc = "GetMultisamplePNameNV\n* `GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB`\n* `GL_SAMPLE_LOCATION_ARB`\n* `GL_SAMPLE_POSITION`\n"]
  pub type GetMultisamplePNameNV = GLenum;
  #[doc = "GetPName\n* `GL_ACCUM_ALPHA_BITS`\n* `GL_ACCUM_BLUE_BITS`\n* `GL_ACCUM_CLEAR_VALUE`\n* `GL_ACCUM_GREEN_BITS`\n* `GL_ACCUM_RED_BITS`\n* `GL_ACTIVE_TEXTURE`\n* `GL_ALIASED_LINE_WIDTH_RANGE`\n* `GL_ALIASED_POINT_SIZE_RANGE`\n* `GL_ALPHA_BIAS`\n* `GL_ALPHA_BITS`\n* `GL_ALPHA_SCALE`\n* `GL_ALPHA_TEST`\n* `GL_ALPHA_TEST_FUNC`\n* `GL_ALPHA_TEST_FUNC_QCOM`\n* `GL_ALPHA_TEST_QCOM`\n* `GL_ALPHA_TEST_REF`\n* `GL_ALPHA_TEST_REF_QCOM`\n* `GL_ARRAY_BUFFER_BINDING`\n* `GL_ASYNC_DRAW_PIXELS_SGIX`\n* `GL_ASYNC_HISTOGRAM_SGIX`\n* `GL_ASYNC_MARKER_SGIX`\n* `GL_ASYNC_READ_PIXELS_SGIX`\n* `GL_ASYNC_TEX_IMAGE_SGIX`\n* `GL_ATTRIB_STACK_DEPTH`\n* `GL_AUTO_NORMAL`\n* `GL_AUX_BUFFERS`\n* `GL_BLEND`\n* `GL_BLEND_COLOR`\n* `GL_BLEND_COLOR_EXT`\n* `GL_BLEND_DST`\n* `GL_BLEND_DST_ALPHA`\n* `GL_BLEND_DST_RGB`\n* `GL_BLEND_EQUATION_ALPHA`\n* `GL_BLEND_EQUATION_EXT`\n* `GL_BLEND_EQUATION_RGB`\n* `GL_BLEND_SRC`\n* `GL_BLEND_SRC_ALPHA`\n* `GL_BLEND_SRC_RGB`\n* `GL_BLUE_BIAS`\n* `GL_BLUE_BITS`\n* `GL_BLUE_SCALE`\n* `GL_CALLIGRAPHIC_FRAGMENT_SGIX`\n* `GL_CLIENT_ATTRIB_STACK_DEPTH`\n* `GL_CLIP_PLANE0`\n* `GL_CLIP_PLANE1`\n* `GL_CLIP_PLANE2`\n* `GL_CLIP_PLANE3`\n* `GL_CLIP_PLANE4`\n* `GL_CLIP_PLANE5`\n* `GL_COLOR_ARRAY`\n* `GL_COLOR_ARRAY_COUNT_EXT`\n* `GL_COLOR_ARRAY_SIZE`\n* `GL_COLOR_ARRAY_STRIDE`\n* `GL_COLOR_ARRAY_TYPE`\n* `GL_COLOR_CLEAR_VALUE`\n* `GL_COLOR_LOGIC_OP`\n* `GL_COLOR_MATERIAL`\n* `GL_COLOR_MATERIAL_FACE`\n* `GL_COLOR_MATERIAL_PARAMETER`\n* `GL_COLOR_MATRIX_SGI`\n* `GL_COLOR_MATRIX_STACK_DEPTH_SGI`\n* `GL_COLOR_TABLE_SGI`\n* `GL_COLOR_WRITEMASK`\n* `GL_COMPRESSED_TEXTURE_FORMATS`\n* `GL_CONTEXT_FLAGS`\n* `GL_CONVOLUTION_1D_EXT`\n* `GL_CONVOLUTION_2D_EXT`\n* `GL_CONVOLUTION_HINT_SGIX`\n* `GL_CULL_FACE`\n* `GL_CULL_FACE_MODE`\n* `GL_CURRENT_COLOR`\n* `GL_CURRENT_INDEX`\n* `GL_CURRENT_NORMAL`\n* `GL_CURRENT_PROGRAM`\n* `GL_CURRENT_RASTER_COLOR`\n* `GL_CURRENT_RASTER_DISTANCE`\n* `GL_CURRENT_RASTER_INDEX`\n* `GL_CURRENT_RASTER_POSITION`\n* `GL_CURRENT_RASTER_POSITION_VALID`\n* `GL_CURRENT_RASTER_TEXTURE_COORDS`\n* `GL_CURRENT_TEXTURE_COORDS`\n* `GL_DEBUG_GROUP_STACK_DEPTH`\n* `GL_DEFORMATIONS_MASK_SGIX`\n* `GL_DEPTH_BIAS`\n* `GL_DEPTH_BITS`\n* `GL_DEPTH_CLEAR_VALUE`\n* `GL_DEPTH_FUNC`\n* `GL_DEPTH_RANGE`\n* `GL_DEPTH_SCALE`\n* `GL_DEPTH_TEST`\n* `GL_DEPTH_WRITEMASK`\n* `GL_DETAIL_TEXTURE_2D_BINDING_SGIS`\n* `GL_DEVICE_LUID_EXT`\n* `GL_DEVICE_NODE_MASK_EXT`\n* `GL_DEVICE_UUID_EXT`\n* `GL_DISPATCH_INDIRECT_BUFFER_BINDING`\n* `GL_DISTANCE_ATTENUATION_SGIS`\n* `GL_DITHER`\n* `GL_DOUBLEBUFFER`\n* `GL_DRAW_BUFFER`\n* `GL_DRAW_BUFFER_EXT`\n* `GL_DRAW_FRAMEBUFFER_BINDING`\n* `GL_DRIVER_UUID_EXT`\n* `GL_EDGE_FLAG`\n* `GL_EDGE_FLAG_ARRAY`\n* `GL_EDGE_FLAG_ARRAY_COUNT_EXT`\n* `GL_EDGE_FLAG_ARRAY_STRIDE`\n* `GL_ELEMENT_ARRAY_BUFFER_BINDING`\n* `GL_FEEDBACK_BUFFER_SIZE`\n* `GL_FEEDBACK_BUFFER_TYPE`\n* `GL_FOG`\n* `GL_FOG_COLOR`\n* `GL_FOG_DENSITY`\n* `GL_FOG_END`\n* `GL_FOG_FUNC_POINTS_SGIS`\n* `GL_FOG_HINT`\n* `GL_FOG_INDEX`\n* `GL_FOG_MODE`\n* `GL_FOG_OFFSET_SGIX`\n* `GL_FOG_OFFSET_VALUE_SGIX`\n* `GL_FOG_START`\n* `GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX`\n* `GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX`\n* `GL_FRAGMENT_COLOR_MATERIAL_SGIX`\n* `GL_FRAGMENT_LIGHT0_SGIX`\n* `GL_FRAGMENT_LIGHTING_SGIX`\n* `GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX`\n* `GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX`\n* `GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX`\n* `GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX`\n* `GL_FRAGMENT_SHADER_DERIVATIVE_HINT`\n* `GL_FRAMEZOOM_FACTOR_SGIX`\n* `GL_FRAMEZOOM_SGIX`\n* `GL_FRONT_FACE`\n* `GL_GENERATE_MIPMAP_HINT_SGIS`\n* `GL_GREEN_BIAS`\n* `GL_GREEN_BITS`\n* `GL_GREEN_SCALE`\n* `GL_HISTOGRAM_EXT`\n* `GL_IMPLEMENTATION_COLOR_READ_FORMAT`\n* `GL_IMPLEMENTATION_COLOR_READ_TYPE`\n* `GL_INDEX_ARRAY`\n* `GL_INDEX_ARRAY_COUNT_EXT`\n* `GL_INDEX_ARRAY_STRIDE`\n* `GL_INDEX_ARRAY_TYPE`\n* `GL_INDEX_BITS`\n* `GL_INDEX_CLEAR_VALUE`\n* `GL_INDEX_LOGIC_OP`\n* `GL_INDEX_MODE`\n* `GL_INDEX_OFFSET`\n* `GL_INDEX_SHIFT`\n* `GL_INDEX_WRITEMASK`\n* `GL_INSTRUMENT_MEASUREMENTS_SGIX`\n* `GL_INTERLACE_SGIX`\n* `GL_IR_INSTRUMENT1_SGIX`\n* `GL_LAYER_PROVOKING_VERTEX`\n* `GL_LIGHT0`\n* `GL_LIGHT1`\n* `GL_LIGHT2`\n* `GL_LIGHT3`\n* `GL_LIGHT4`\n* `GL_LIGHT5`\n* `GL_LIGHT6`\n* `GL_LIGHT7`\n* `GL_LIGHTING`\n* `GL_LIGHT_ENV_MODE_SGIX`\n* `GL_LIGHT_MODEL_AMBIENT`\n* `GL_LIGHT_MODEL_COLOR_CONTROL`\n* `GL_LIGHT_MODEL_LOCAL_VIEWER`\n* `GL_LIGHT_MODEL_TWO_SIDE`\n* `GL_LINE_SMOOTH`\n* `GL_LINE_SMOOTH_HINT`\n* `GL_LINE_STIPPLE`\n* `GL_LINE_STIPPLE_PATTERN`\n* `GL_LINE_STIPPLE_REPEAT`\n* `GL_LINE_WIDTH`\n* `GL_LINE_WIDTH_GRANULARITY`\n* `GL_LINE_WIDTH_RANGE`\n* `GL_LIST_BASE`\n* `GL_LIST_INDEX`\n* `GL_LIST_MODE`\n* `GL_LOGIC_OP`\n* `GL_LOGIC_OP_MODE`\n* `GL_MAJOR_VERSION`\n* `GL_MAP1_COLOR_4`\n* `GL_MAP1_GRID_DOMAIN`\n* `GL_MAP1_GRID_SEGMENTS`\n* `GL_MAP1_INDEX`\n* `GL_MAP1_NORMAL`\n* `GL_MAP1_TEXTURE_COORD_1`\n* `GL_MAP1_TEXTURE_COORD_2`\n* `GL_MAP1_TEXTURE_COORD_3`\n* `GL_MAP1_TEXTURE_COORD_4`\n* `GL_MAP1_VERTEX_3`\n* `GL_MAP1_VERTEX_4`\n* `GL_MAP2_COLOR_4`\n* `GL_MAP2_GRID_DOMAIN`\n* `GL_MAP2_GRID_SEGMENTS`\n* `GL_MAP2_INDEX`\n* `GL_MAP2_NORMAL`\n* `GL_MAP2_TEXTURE_COORD_1`\n* `GL_MAP2_TEXTURE_COORD_2`\n* `GL_MAP2_TEXTURE_COORD_3`\n* `GL_MAP2_TEXTURE_COORD_4`\n* `GL_MAP2_VERTEX_3`\n* `GL_MAP2_VERTEX_4`\n* `GL_MAP_COLOR`\n* `GL_MAP_STENCIL`\n* `GL_MATRIX_MODE`\n* `GL_MAX_3D_TEXTURE_SIZE`\n* `GL_MAX_3D_TEXTURE_SIZE_EXT`\n* `GL_MAX_4D_TEXTURE_SIZE_SGIS`\n* `GL_MAX_ACTIVE_LIGHTS_SGIX`\n* `GL_MAX_ARRAY_TEXTURE_LAYERS`\n* `GL_MAX_ASYNC_DRAW_PIXELS_SGIX`\n* `GL_MAX_ASYNC_HISTOGRAM_SGIX`\n* `GL_MAX_ASYNC_READ_PIXELS_SGIX`\n* `GL_MAX_ASYNC_TEX_IMAGE_SGIX`\n* `GL_MAX_ATTRIB_STACK_DEPTH`\n* `GL_MAX_CLIENT_ATTRIB_STACK_DEPTH`\n* `GL_MAX_CLIPMAP_DEPTH_SGIX`\n* `GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX`\n* `GL_MAX_CLIP_DISTANCES`\n* `GL_MAX_CLIP_PLANES`\n* `GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI`\n* `GL_MAX_COLOR_TEXTURE_SAMPLES`\n* `GL_MAX_COMBINED_ATOMIC_COUNTERS`\n* `GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS`\n* `GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS`\n* `GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS`\n* `GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS`\n* `GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS`\n* `GL_MAX_COMBINED_UNIFORM_BLOCKS`\n* `GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS`\n* `GL_MAX_COMPUTE_ATOMIC_COUNTERS`\n* `GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS`\n* `GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS`\n* `GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS`\n* `GL_MAX_COMPUTE_UNIFORM_BLOCKS`\n* `GL_MAX_COMPUTE_UNIFORM_COMPONENTS`\n* `GL_MAX_COMPUTE_WORK_GROUP_COUNT`\n* `GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS`\n* `GL_MAX_COMPUTE_WORK_GROUP_SIZE`\n* `GL_MAX_CUBE_MAP_TEXTURE_SIZE`\n* `GL_MAX_DEBUG_GROUP_STACK_DEPTH`\n* `GL_MAX_DEPTH_TEXTURE_SAMPLES`\n* `GL_MAX_DRAW_BUFFERS`\n* `GL_MAX_DUAL_SOURCE_DRAW_BUFFERS`\n* `GL_MAX_ELEMENTS_INDICES`\n* `GL_MAX_ELEMENTS_VERTICES`\n* `GL_MAX_ELEMENT_INDEX`\n* `GL_MAX_EVAL_ORDER`\n* `GL_MAX_FOG_FUNC_POINTS_SGIS`\n* `GL_MAX_FRAGMENT_ATOMIC_COUNTERS`\n* `GL_MAX_FRAGMENT_INPUT_COMPONENTS`\n* `GL_MAX_FRAGMENT_LIGHTS_SGIX`\n* `GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS`\n* `GL_MAX_FRAGMENT_UNIFORM_BLOCKS`\n* `GL_MAX_FRAGMENT_UNIFORM_COMPONENTS`\n* `GL_MAX_FRAGMENT_UNIFORM_VECTORS`\n* `GL_MAX_FRAMEBUFFER_HEIGHT`\n* `GL_MAX_FRAMEBUFFER_LAYERS`\n* `GL_MAX_FRAMEBUFFER_SAMPLES`\n* `GL_MAX_FRAMEBUFFER_WIDTH`\n* `GL_MAX_FRAMEZOOM_FACTOR_SGIX`\n* `GL_MAX_GEOMETRY_ATOMIC_COUNTERS`\n* `GL_MAX_GEOMETRY_INPUT_COMPONENTS`\n* `GL_MAX_GEOMETRY_OUTPUT_COMPONENTS`\n* `GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS`\n* `GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS`\n* `GL_MAX_GEOMETRY_UNIFORM_BLOCKS`\n* `GL_MAX_GEOMETRY_UNIFORM_COMPONENTS`\n* `GL_MAX_INTEGER_SAMPLES`\n* `GL_MAX_LABEL_LENGTH`\n* `GL_MAX_LIGHTS`\n* `GL_MAX_LIST_NESTING`\n* `GL_MAX_MODELVIEW_STACK_DEPTH`\n* `GL_MAX_NAME_STACK_DEPTH`\n* `GL_MAX_PIXEL_MAP_TABLE`\n* `GL_MAX_PROGRAM_TEXEL_OFFSET`\n* `GL_MAX_PROJECTION_STACK_DEPTH`\n* `GL_MAX_RECTANGLE_TEXTURE_SIZE`\n* `GL_MAX_RENDERBUFFER_SIZE`\n* `GL_MAX_SAMPLE_MASK_WORDS`\n* `GL_MAX_SERVER_WAIT_TIMEOUT`\n* `GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS`\n* `GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS`\n* `GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS`\n* `GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS`\n* `GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS`\n* `GL_MAX_TEXTURE_BUFFER_SIZE`\n* `GL_MAX_TEXTURE_IMAGE_UNITS`\n* `GL_MAX_TEXTURE_LOD_BIAS`\n* `GL_MAX_TEXTURE_SIZE`\n* `GL_MAX_TEXTURE_STACK_DEPTH`\n* `GL_MAX_UNIFORM_BLOCK_SIZE`\n* `GL_MAX_UNIFORM_BUFFER_BINDINGS`\n* `GL_MAX_UNIFORM_LOCATIONS`\n* `GL_MAX_VARYING_COMPONENTS`\n* `GL_MAX_VARYING_FLOATS`\n* `GL_MAX_VARYING_VECTORS`\n* `GL_MAX_VERTEX_ATOMIC_COUNTERS`\n* `GL_MAX_VERTEX_ATTRIBS`\n* `GL_MAX_VERTEX_ATTRIB_BINDINGS`\n* `GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET`\n* `GL_MAX_VERTEX_OUTPUT_COMPONENTS`\n* `GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS`\n* `GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS`\n* `GL_MAX_VERTEX_UNIFORM_BLOCKS`\n* `GL_MAX_VERTEX_UNIFORM_COMPONENTS`\n* `GL_MAX_VERTEX_UNIFORM_VECTORS`\n* `GL_MAX_VIEWPORTS`\n* `GL_MAX_VIEWPORT_DIMS`\n* `GL_MINMAX_EXT`\n* `GL_MINOR_VERSION`\n* `GL_MIN_MAP_BUFFER_ALIGNMENT`\n* `GL_MIN_PROGRAM_TEXEL_OFFSET`\n* `GL_MODELVIEW0_MATRIX_EXT`\n* `GL_MODELVIEW0_STACK_DEPTH_EXT`\n* `GL_MODELVIEW_MATRIX`\n* `GL_MODELVIEW_STACK_DEPTH`\n* `GL_MULTISAMPLE_SGIS`\n* `GL_NAME_STACK_DEPTH`\n* `GL_NORMALIZE`\n* `GL_NORMAL_ARRAY`\n* `GL_NORMAL_ARRAY_COUNT_EXT`\n* `GL_NORMAL_ARRAY_STRIDE`\n* `GL_NORMAL_ARRAY_TYPE`\n* `GL_NUM_COMPRESSED_TEXTURE_FORMATS`\n* `GL_NUM_DEVICE_UUIDS_EXT`\n* `GL_NUM_EXTENSIONS`\n* `GL_NUM_PROGRAM_BINARY_FORMATS`\n* `GL_NUM_SHADER_BINARY_FORMATS`\n* `GL_PACK_ALIGNMENT`\n* `GL_PACK_CMYK_HINT_EXT`\n* `GL_PACK_IMAGE_DEPTH_SGIS`\n* `GL_PACK_IMAGE_HEIGHT`\n* `GL_PACK_IMAGE_HEIGHT_EXT`\n* `GL_PACK_LSB_FIRST`\n* `GL_PACK_RESAMPLE_SGIX`\n* `GL_PACK_ROW_LENGTH`\n* `GL_PACK_SKIP_IMAGES`\n* `GL_PACK_SKIP_IMAGES_EXT`\n* `GL_PACK_SKIP_PIXELS`\n* `GL_PACK_SKIP_ROWS`\n* `GL_PACK_SKIP_VOLUMES_SGIS`\n* `GL_PACK_SUBSAMPLE_RATE_SGIX`\n* `GL_PACK_SWAP_BYTES`\n* `GL_PERSPECTIVE_CORRECTION_HINT`\n* `GL_PIXEL_MAP_A_TO_A_SIZE`\n* `GL_PIXEL_MAP_B_TO_B_SIZE`\n* `GL_PIXEL_MAP_G_TO_G_SIZE`\n* `GL_PIXEL_MAP_I_TO_A_SIZE`\n* `GL_PIXEL_MAP_I_TO_B_SIZE`\n* `GL_PIXEL_MAP_I_TO_G_SIZE`\n* `GL_PIXEL_MAP_I_TO_I_SIZE`\n* `GL_PIXEL_MAP_I_TO_R_SIZE`\n* `GL_PIXEL_MAP_R_TO_R_SIZE`\n* `GL_PIXEL_MAP_S_TO_S_SIZE`\n* `GL_PIXEL_PACK_BUFFER_BINDING`\n* `GL_PIXEL_TEXTURE_SGIS`\n* `GL_PIXEL_TEX_GEN_MODE_SGIX`\n* `GL_PIXEL_TEX_GEN_SGIX`\n* `GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX`\n* `GL_PIXEL_TILE_CACHE_INCREMENT_SGIX`\n* `GL_PIXEL_TILE_CACHE_SIZE_SGIX`\n* `GL_PIXEL_TILE_GRID_DEPTH_SGIX`\n* `GL_PIXEL_TILE_GRID_HEIGHT_SGIX`\n* `GL_PIXEL_TILE_GRID_WIDTH_SGIX`\n* `GL_PIXEL_TILE_HEIGHT_SGIX`\n* `GL_PIXEL_TILE_WIDTH_SGIX`\n* `GL_PIXEL_UNPACK_BUFFER_BINDING`\n* `GL_POINT_FADE_THRESHOLD_SIZE`\n* `GL_POINT_FADE_THRESHOLD_SIZE_SGIS`\n* `GL_POINT_SIZE`\n* `GL_POINT_SIZE_GRANULARITY`\n* `GL_POINT_SIZE_MAX_SGIS`\n* `GL_POINT_SIZE_MIN_SGIS`\n* `GL_POINT_SIZE_RANGE`\n* `GL_POINT_SMOOTH`\n* `GL_POINT_SMOOTH_HINT`\n* `GL_POLYGON_MODE`\n* `GL_POLYGON_OFFSET_BIAS_EXT`\n* `GL_POLYGON_OFFSET_FACTOR`\n* `GL_POLYGON_OFFSET_FILL`\n* `GL_POLYGON_OFFSET_LINE`\n* `GL_POLYGON_OFFSET_POINT`\n* `GL_POLYGON_OFFSET_UNITS`\n* `GL_POLYGON_SMOOTH`\n* `GL_POLYGON_SMOOTH_HINT`\n* `GL_POLYGON_STIPPLE`\n* `GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI`\n* `GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI`\n* `GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI`\n* `GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI`\n* `GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI`\n* `GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI`\n* `GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI`\n* `GL_POST_COLOR_MATRIX_RED_BIAS_SGI`\n* `GL_POST_COLOR_MATRIX_RED_SCALE_SGI`\n* `GL_POST_CONVOLUTION_ALPHA_BIAS_EXT`\n* `GL_POST_CONVOLUTION_ALPHA_SCALE_EXT`\n* `GL_POST_CONVOLUTION_BLUE_BIAS_EXT`\n* `GL_POST_CONVOLUTION_BLUE_SCALE_EXT`\n* `GL_POST_CONVOLUTION_COLOR_TABLE_SGI`\n* `GL_POST_CONVOLUTION_GREEN_BIAS_EXT`\n* `GL_POST_CONVOLUTION_GREEN_SCALE_EXT`\n* `GL_POST_CONVOLUTION_RED_BIAS_EXT`\n* `GL_POST_CONVOLUTION_RED_SCALE_EXT`\n* `GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX`\n* `GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX`\n* `GL_PRIMITIVE_RESTART_INDEX`\n* `GL_PROGRAM_BINARY_FORMATS`\n* `GL_PROGRAM_PIPELINE_BINDING`\n* `GL_PROGRAM_POINT_SIZE`\n* `GL_PROJECTION_MATRIX`\n* `GL_PROJECTION_STACK_DEPTH`\n* `GL_PROVOKING_VERTEX`\n* `GL_READ_BUFFER`\n* `GL_READ_BUFFER_EXT`\n* `GL_READ_BUFFER_NV`\n* `GL_READ_FRAMEBUFFER_BINDING`\n* `GL_RED_BIAS`\n* `GL_RED_BITS`\n* `GL_RED_SCALE`\n* `GL_REFERENCE_PLANE_EQUATION_SGIX`\n* `GL_REFERENCE_PLANE_SGIX`\n* `GL_RENDERBUFFER_BINDING`\n* `GL_RENDER_MODE`\n* `GL_RESCALE_NORMAL_EXT`\n* `GL_RGBA_MODE`\n* `GL_SAMPLER_BINDING`\n* `GL_SAMPLES`\n* `GL_SAMPLES_SGIS`\n* `GL_SAMPLE_ALPHA_TO_MASK_SGIS`\n* `GL_SAMPLE_ALPHA_TO_ONE_SGIS`\n* `GL_SAMPLE_BUFFERS`\n* `GL_SAMPLE_BUFFERS_SGIS`\n* `GL_SAMPLE_COVERAGE_INVERT`\n* `GL_SAMPLE_COVERAGE_VALUE`\n* `GL_SAMPLE_MASK_INVERT_SGIS`\n* `GL_SAMPLE_MASK_SGIS`\n* `GL_SAMPLE_MASK_VALUE_SGIS`\n* `GL_SAMPLE_PATTERN_SGIS`\n* `GL_SCISSOR_BOX`\n* `GL_SCISSOR_TEST`\n* `GL_SELECTION_BUFFER_SIZE`\n* `GL_SEPARABLE_2D_EXT`\n* `GL_SHADER_COMPILER`\n* `GL_SHADER_STORAGE_BUFFER_BINDING`\n* `GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT`\n* `GL_SHADER_STORAGE_BUFFER_SIZE`\n* `GL_SHADER_STORAGE_BUFFER_START`\n* `GL_SHADE_MODEL`\n* `GL_SHARED_TEXTURE_PALETTE_EXT`\n* `GL_SMOOTH_LINE_WIDTH_GRANULARITY`\n* `GL_SMOOTH_LINE_WIDTH_RANGE`\n* `GL_SMOOTH_POINT_SIZE_GRANULARITY`\n* `GL_SMOOTH_POINT_SIZE_RANGE`\n* `GL_SPRITE_AXIS_SGIX`\n* `GL_SPRITE_MODE_SGIX`\n* `GL_SPRITE_SGIX`\n* `GL_SPRITE_TRANSLATION_SGIX`\n* `GL_STENCIL_BACK_FAIL`\n* `GL_STENCIL_BACK_FUNC`\n* `GL_STENCIL_BACK_PASS_DEPTH_FAIL`\n* `GL_STENCIL_BACK_PASS_DEPTH_PASS`\n* `GL_STENCIL_BACK_REF`\n* `GL_STENCIL_BACK_VALUE_MASK`\n* `GL_STENCIL_BACK_WRITEMASK`\n* `GL_STENCIL_BITS`\n* `GL_STENCIL_CLEAR_VALUE`\n* `GL_STENCIL_FAIL`\n* `GL_STENCIL_FUNC`\n* `GL_STENCIL_PASS_DEPTH_FAIL`\n* `GL_STENCIL_PASS_DEPTH_PASS`\n* `GL_STENCIL_REF`\n* `GL_STENCIL_TEST`\n* `GL_STENCIL_VALUE_MASK`\n* `GL_STENCIL_WRITEMASK`\n* `GL_STEREO`\n* `GL_SUBPIXEL_BITS`\n* `GL_TEXTURE_1D`\n* `GL_TEXTURE_2D`\n* `GL_TEXTURE_3D_BINDING_EXT`\n* `GL_TEXTURE_3D_EXT`\n* `GL_TEXTURE_4D_BINDING_SGIS`\n* `GL_TEXTURE_4D_SGIS`\n* `GL_TEXTURE_BINDING_1D`\n* `GL_TEXTURE_BINDING_1D_ARRAY`\n* `GL_TEXTURE_BINDING_2D`\n* `GL_TEXTURE_BINDING_2D_ARRAY`\n* `GL_TEXTURE_BINDING_2D_MULTISAMPLE`\n* `GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY`\n* `GL_TEXTURE_BINDING_3D`\n* `GL_TEXTURE_BINDING_BUFFER`\n* `GL_TEXTURE_BINDING_CUBE_MAP`\n* `GL_TEXTURE_BINDING_RECTANGLE`\n* `GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT`\n* `GL_TEXTURE_COLOR_TABLE_SGI`\n* `GL_TEXTURE_COMPRESSION_HINT`\n* `GL_TEXTURE_COORD_ARRAY`\n* `GL_TEXTURE_COORD_ARRAY_COUNT_EXT`\n* `GL_TEXTURE_COORD_ARRAY_SIZE`\n* `GL_TEXTURE_COORD_ARRAY_STRIDE`\n* `GL_TEXTURE_COORD_ARRAY_TYPE`\n* `GL_TEXTURE_GEN_Q`\n* `GL_TEXTURE_GEN_R`\n* `GL_TEXTURE_GEN_S`\n* `GL_TEXTURE_GEN_T`\n* `GL_TEXTURE_MATRIX`\n* `GL_TEXTURE_STACK_DEPTH`\n* `GL_TIMESTAMP`\n* `GL_TRANSFORM_FEEDBACK_BUFFER_BINDING`\n* `GL_TRANSFORM_FEEDBACK_BUFFER_SIZE`\n* `GL_TRANSFORM_FEEDBACK_BUFFER_START`\n* `GL_UNIFORM_BUFFER_BINDING`\n* `GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT`\n* `GL_UNIFORM_BUFFER_SIZE`\n* `GL_UNIFORM_BUFFER_START`\n* `GL_UNPACK_ALIGNMENT`\n* `GL_UNPACK_CMYK_HINT_EXT`\n* `GL_UNPACK_IMAGE_DEPTH_SGIS`\n* `GL_UNPACK_IMAGE_HEIGHT`\n* `GL_UNPACK_IMAGE_HEIGHT_EXT`\n* `GL_UNPACK_LSB_FIRST`\n* `GL_UNPACK_RESAMPLE_SGIX`\n* `GL_UNPACK_ROW_LENGTH`\n* `GL_UNPACK_SKIP_IMAGES`\n* `GL_UNPACK_SKIP_IMAGES_EXT`\n* `GL_UNPACK_SKIP_PIXELS`\n* `GL_UNPACK_SKIP_ROWS`\n* `GL_UNPACK_SKIP_VOLUMES_SGIS`\n* `GL_UNPACK_SUBSAMPLE_RATE_SGIX`\n* `GL_UNPACK_SWAP_BYTES`\n* `GL_VERTEX_ARRAY`\n* `GL_VERTEX_ARRAY_BINDING`\n* `GL_VERTEX_ARRAY_COUNT_EXT`\n* `GL_VERTEX_ARRAY_SIZE`\n* `GL_VERTEX_ARRAY_STRIDE`\n* `GL_VERTEX_ARRAY_TYPE`\n* `GL_VERTEX_BINDING_DIVISOR`\n* `GL_VERTEX_BINDING_OFFSET`\n* `GL_VERTEX_BINDING_STRIDE`\n* `GL_VERTEX_PRECLIP_HINT_SGIX`\n* `GL_VERTEX_PRECLIP_SGIX`\n* `GL_VIEWPORT`\n* `GL_VIEWPORT_BOUNDS_RANGE`\n* `GL_VIEWPORT_INDEX_PROVOKING_VERTEX`\n* `GL_VIEWPORT_SUBPIXEL_BITS`\n* `GL_ZOOM_X`\n* `GL_ZOOM_Y`\n"]
  pub type GetPName = GLenum;
  #[doc = "GetTextureParameter\n* `GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS`\n* `GL_DETAIL_TEXTURE_LEVEL_SGIS`\n* `GL_DETAIL_TEXTURE_MODE_SGIS`\n* `GL_DUAL_TEXTURE_SELECT_SGIS`\n* `GL_GENERATE_MIPMAP_SGIS`\n* `GL_POST_TEXTURE_FILTER_BIAS_SGIX`\n* `GL_POST_TEXTURE_FILTER_SCALE_SGIX`\n* `GL_QUAD_TEXTURE_SELECT_SGIS`\n* `GL_SHADOW_AMBIENT_SGIX`\n* `GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS`\n* `GL_TEXTURE_4DSIZE_SGIS`\n* `GL_TEXTURE_ALPHA_SIZE`\n* `GL_TEXTURE_BASE_LEVEL_SGIS`\n* `GL_TEXTURE_BLUE_SIZE`\n* `GL_TEXTURE_BORDER`\n* `GL_TEXTURE_BORDER_COLOR`\n* `GL_TEXTURE_BORDER_COLOR_NV`\n* `GL_TEXTURE_CLIPMAP_CENTER_SGIX`\n* `GL_TEXTURE_CLIPMAP_DEPTH_SGIX`\n* `GL_TEXTURE_CLIPMAP_FRAME_SGIX`\n* `GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX`\n* `GL_TEXTURE_CLIPMAP_OFFSET_SGIX`\n* `GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX`\n* `GL_TEXTURE_COMPARE_OPERATOR_SGIX`\n* `GL_TEXTURE_COMPARE_SGIX`\n* `GL_TEXTURE_COMPONENTS`\n* `GL_TEXTURE_DEPTH_EXT`\n* `GL_TEXTURE_FILTER4_SIZE_SGIS`\n* `GL_TEXTURE_GEQUAL_R_SGIX`\n* `GL_TEXTURE_GREEN_SIZE`\n* `GL_TEXTURE_HEIGHT`\n* `GL_TEXTURE_INTENSITY_SIZE`\n* `GL_TEXTURE_INTERNAL_FORMAT`\n* `GL_TEXTURE_LEQUAL_R_SGIX`\n* `GL_TEXTURE_LOD_BIAS_R_SGIX`\n* `GL_TEXTURE_LOD_BIAS_S_SGIX`\n* `GL_TEXTURE_LOD_BIAS_T_SGIX`\n* `GL_TEXTURE_LUMINANCE_SIZE`\n* `GL_TEXTURE_MAG_FILTER`\n* `GL_TEXTURE_MAX_CLAMP_R_SGIX`\n* `GL_TEXTURE_MAX_CLAMP_S_SGIX`\n* `GL_TEXTURE_MAX_CLAMP_T_SGIX`\n* `GL_TEXTURE_MAX_LEVEL_SGIS`\n* `GL_TEXTURE_MAX_LOD_SGIS`\n* `GL_TEXTURE_MIN_FILTER`\n* `GL_TEXTURE_MIN_LOD_SGIS`\n* `GL_TEXTURE_PRIORITY`\n* `GL_TEXTURE_RED_SIZE`\n* `GL_TEXTURE_RESIDENT`\n* `GL_TEXTURE_WIDTH`\n* `GL_TEXTURE_WRAP_Q_SGIS`\n* `GL_TEXTURE_WRAP_R_EXT`\n* `GL_TEXTURE_WRAP_S`\n* `GL_TEXTURE_WRAP_T`\n"]
  pub type GetTextureParameter = GLenum;
  #[doc = "GlslTypeToken\n* `GL_BOOL`\n* `GL_BOOL_VEC2`\n* `GL_BOOL_VEC3`\n* `GL_BOOL_VEC4`\n* `GL_DOUBLE`\n* `GL_DOUBLE_MAT2`\n* `GL_DOUBLE_MAT3`\n* `GL_DOUBLE_MAT4`\n* `GL_DOUBLE_VEC2`\n* `GL_DOUBLE_VEC3`\n* `GL_DOUBLE_VEC4`\n* `GL_FLOAT`\n* `GL_FLOAT_MAT2`\n* `GL_FLOAT_MAT2x3`\n* `GL_FLOAT_MAT2x4`\n* `GL_FLOAT_MAT3`\n* `GL_FLOAT_MAT3x2`\n* `GL_FLOAT_MAT3x4`\n* `GL_FLOAT_MAT4`\n* `GL_FLOAT_MAT4x2`\n* `GL_FLOAT_MAT4x3`\n* `GL_FLOAT_VEC2`\n* `GL_FLOAT_VEC3`\n* `GL_FLOAT_VEC4`\n* `GL_IMAGE_1D`\n* `GL_IMAGE_1D_ARRAY`\n* `GL_IMAGE_2D`\n* `GL_IMAGE_2D_ARRAY`\n* `GL_IMAGE_2D_MULTISAMPLE`\n* `GL_IMAGE_2D_MULTISAMPLE_ARRAY`\n* `GL_IMAGE_2D_RECT`\n* `GL_IMAGE_3D`\n* `GL_IMAGE_BUFFER`\n* `GL_IMAGE_CUBE`\n* `GL_IMAGE_CUBE_MAP_ARRAY`\n* `GL_INT`\n* `GL_INT_IMAGE_1D`\n* `GL_INT_IMAGE_1D_ARRAY`\n* `GL_INT_IMAGE_2D`\n* `GL_INT_IMAGE_2D_ARRAY`\n* `GL_INT_IMAGE_2D_MULTISAMPLE`\n* `GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY`\n* `GL_INT_IMAGE_2D_RECT`\n* `GL_INT_IMAGE_3D`\n* `GL_INT_IMAGE_BUFFER`\n* `GL_INT_IMAGE_CUBE`\n* `GL_INT_IMAGE_CUBE_MAP_ARRAY`\n* `GL_INT_SAMPLER_1D`\n* `GL_INT_SAMPLER_1D_ARRAY`\n* `GL_INT_SAMPLER_2D`\n* `GL_INT_SAMPLER_2D_ARRAY`\n* `GL_INT_SAMPLER_2D_MULTISAMPLE`\n* `GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY`\n* `GL_INT_SAMPLER_2D_RECT`\n* `GL_INT_SAMPLER_3D`\n* `GL_INT_SAMPLER_BUFFER`\n* `GL_INT_SAMPLER_CUBE`\n* `GL_INT_SAMPLER_CUBE_MAP_ARRAY`\n* `GL_INT_VEC2`\n* `GL_INT_VEC3`\n* `GL_INT_VEC4`\n* `GL_SAMPLER_1D`\n* `GL_SAMPLER_1D_ARRAY`\n* `GL_SAMPLER_1D_ARRAY_SHADOW`\n* `GL_SAMPLER_1D_SHADOW`\n* `GL_SAMPLER_2D`\n* `GL_SAMPLER_2D_ARRAY`\n* `GL_SAMPLER_2D_ARRAY_SHADOW`\n* `GL_SAMPLER_2D_MULTISAMPLE`\n* `GL_SAMPLER_2D_MULTISAMPLE_ARRAY`\n* `GL_SAMPLER_2D_RECT`\n* `GL_SAMPLER_2D_RECT_SHADOW`\n* `GL_SAMPLER_2D_SHADOW`\n* `GL_SAMPLER_3D`\n* `GL_SAMPLER_BUFFER`\n* `GL_SAMPLER_CUBE`\n* `GL_SAMPLER_CUBE_MAP_ARRAY`\n* `GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW`\n* `GL_SAMPLER_CUBE_SHADOW`\n* `GL_UNSIGNED_INT`\n* `GL_UNSIGNED_INT_ATOMIC_COUNTER`\n* `GL_UNSIGNED_INT_IMAGE_1D`\n* `GL_UNSIGNED_INT_IMAGE_1D_ARRAY`\n* `GL_UNSIGNED_INT_IMAGE_2D`\n* `GL_UNSIGNED_INT_IMAGE_2D_ARRAY`\n* `GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE`\n* `GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY`\n* `GL_UNSIGNED_INT_IMAGE_2D_RECT`\n* `GL_UNSIGNED_INT_IMAGE_3D`\n* `GL_UNSIGNED_INT_IMAGE_BUFFER`\n* `GL_UNSIGNED_INT_IMAGE_CUBE`\n* `GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY`\n* `GL_UNSIGNED_INT_SAMPLER_1D`\n* `GL_UNSIGNED_INT_SAMPLER_1D_ARRAY`\n* `GL_UNSIGNED_INT_SAMPLER_2D`\n* `GL_UNSIGNED_INT_SAMPLER_2D_ARRAY`\n* `GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE`\n* `GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY`\n* `GL_UNSIGNED_INT_SAMPLER_2D_RECT`\n* `GL_UNSIGNED_INT_SAMPLER_3D`\n* `GL_UNSIGNED_INT_SAMPLER_BUFFER`\n* `GL_UNSIGNED_INT_SAMPLER_CUBE`\n* `GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY`\n* `GL_UNSIGNED_INT_VEC2`\n* `GL_UNSIGNED_INT_VEC3`\n* `GL_UNSIGNED_INT_VEC4`\n"]
  pub type GlslTypeToken = GLenum;
  #[doc = "HintMode\n* `GL_DONT_CARE`\n* `GL_FASTEST`\n* `GL_NICEST`\n"]
  pub type HintMode = GLenum;
  #[doc = "HintTarget\n* `GL_ALLOW_DRAW_FRG_HINT_PGI`\n* `GL_ALLOW_DRAW_MEM_HINT_PGI`\n* `GL_ALLOW_DRAW_OBJ_HINT_PGI`\n* `GL_ALLOW_DRAW_WIN_HINT_PGI`\n* `GL_ALWAYS_FAST_HINT_PGI`\n* `GL_ALWAYS_SOFT_HINT_PGI`\n* `GL_BACK_NORMALS_HINT_PGI`\n* `GL_BINNING_CONTROL_HINT_QCOM`\n* `GL_CLIP_FAR_HINT_PGI`\n* `GL_CLIP_NEAR_HINT_PGI`\n* `GL_CLIP_VOLUME_CLIPPING_HINT_EXT`\n* `GL_CONSERVE_MEMORY_HINT_PGI`\n* `GL_CONVOLUTION_HINT_SGIX`\n* `GL_FOG_HINT`\n* `GL_FRAGMENT_SHADER_DERIVATIVE_HINT`\n* `GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB`\n* `GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES`\n* `GL_FULL_STIPPLE_HINT_PGI`\n* `GL_GENERATE_MIPMAP_HINT`\n* `GL_GENERATE_MIPMAP_HINT_SGIS`\n* `GL_LINE_QUALITY_HINT_SGIX`\n* `GL_LINE_SMOOTH_HINT`\n* `GL_MATERIAL_SIDE_HINT_PGI`\n* `GL_MAX_VERTEX_HINT_PGI`\n* `GL_MULTISAMPLE_FILTER_HINT_NV`\n* `GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI`\n* `GL_NATIVE_GRAPHICS_END_HINT_PGI`\n* `GL_PACK_CMYK_HINT_EXT`\n* `GL_PERSPECTIVE_CORRECTION_HINT`\n* `GL_PHONG_HINT_WIN`\n* `GL_POINT_SMOOTH_HINT`\n* `GL_POLYGON_SMOOTH_HINT`\n* `GL_PREFER_DOUBLEBUFFER_HINT_PGI`\n* `GL_PROGRAM_BINARY_RETRIEVABLE_HINT`\n* `GL_RECLAIM_MEMORY_HINT_PGI`\n* `GL_SCALEBIAS_HINT_SGIX`\n* `GL_STRICT_DEPTHFUNC_HINT_PGI`\n* `GL_STRICT_LIGHTING_HINT_PGI`\n* `GL_STRICT_SCISSOR_HINT_PGI`\n* `GL_TEXTURE_COMPRESSION_HINT`\n* `GL_TEXTURE_COMPRESSION_HINT_ARB`\n* `GL_TEXTURE_MULTI_BUFFER_HINT_SGIX`\n* `GL_TEXTURE_STORAGE_HINT_APPLE`\n* `GL_TRANSFORM_HINT_APPLE`\n* `GL_UNPACK_CMYK_HINT_EXT`\n* `GL_VERTEX_ARRAY_STORAGE_HINT_APPLE`\n* `GL_VERTEX_CONSISTENT_HINT_PGI`\n* `GL_VERTEX_DATA_HINT_PGI`\n* `GL_VERTEX_PRECLIP_HINT_SGIX`\n* `GL_VERTEX_PRECLIP_SGIX`\n* `GL_WIDE_LINE_HINT_PGI`\n"]
  pub type HintTarget = GLenum;
  #[doc = "InternalFormat\n* `GL_ALPHA12`\n* `GL_ALPHA16`\n* `GL_ALPHA4`\n* `GL_ALPHA8`\n* `GL_COMPRESSED_R11_EAC`\n* `GL_COMPRESSED_RED`\n* `GL_COMPRESSED_RED_RGTC1`\n* `GL_COMPRESSED_RED_RGTC1_EXT`\n* `GL_COMPRESSED_RG`\n* `GL_COMPRESSED_RG11_EAC`\n* `GL_COMPRESSED_RGB`\n* `GL_COMPRESSED_RGB8_ETC2`\n* `GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2`\n* `GL_COMPRESSED_RGBA`\n* `GL_COMPRESSED_RGBA8_ETC2_EAC`\n* `GL_COMPRESSED_RGBA_ASTC_10x10`\n* `GL_COMPRESSED_RGBA_ASTC_10x10_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_10x5`\n* `GL_COMPRESSED_RGBA_ASTC_10x5_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_10x6`\n* `GL_COMPRESSED_RGBA_ASTC_10x6_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_10x8`\n* `GL_COMPRESSED_RGBA_ASTC_10x8_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_12x10`\n* `GL_COMPRESSED_RGBA_ASTC_12x10_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_12x12`\n* `GL_COMPRESSED_RGBA_ASTC_12x12_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_3x3x3_OES`\n* `GL_COMPRESSED_RGBA_ASTC_4x3x3_OES`\n* `GL_COMPRESSED_RGBA_ASTC_4x4`\n* `GL_COMPRESSED_RGBA_ASTC_4x4_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_4x4x3_OES`\n* `GL_COMPRESSED_RGBA_ASTC_4x4x4_OES`\n* `GL_COMPRESSED_RGBA_ASTC_5x4`\n* `GL_COMPRESSED_RGBA_ASTC_5x4_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_5x4x4_OES`\n* `GL_COMPRESSED_RGBA_ASTC_5x5`\n* `GL_COMPRESSED_RGBA_ASTC_5x5_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_5x5x4_OES`\n* `GL_COMPRESSED_RGBA_ASTC_5x5x5_OES`\n* `GL_COMPRESSED_RGBA_ASTC_6x5`\n* `GL_COMPRESSED_RGBA_ASTC_6x5_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_6x5x5_OES`\n* `GL_COMPRESSED_RGBA_ASTC_6x6`\n* `GL_COMPRESSED_RGBA_ASTC_6x6_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_6x6x5_OES`\n* `GL_COMPRESSED_RGBA_ASTC_6x6x6_OES`\n* `GL_COMPRESSED_RGBA_ASTC_8x5`\n* `GL_COMPRESSED_RGBA_ASTC_8x5_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_8x6`\n* `GL_COMPRESSED_RGBA_ASTC_8x6_KHR`\n* `GL_COMPRESSED_RGBA_ASTC_8x8`\n* `GL_COMPRESSED_RGBA_ASTC_8x8_KHR`\n* `GL_COMPRESSED_RGBA_BPTC_UNORM`\n* `GL_COMPRESSED_RGBA_S3TC_DXT1_EXT`\n* `GL_COMPRESSED_RGBA_S3TC_DXT3_EXT`\n* `GL_COMPRESSED_RGBA_S3TC_DXT5_EXT`\n* `GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT`\n* `GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT`\n* `GL_COMPRESSED_RGB_S3TC_DXT1_EXT`\n* `GL_COMPRESSED_RG_RGTC2`\n* `GL_COMPRESSED_SIGNED_R11_EAC`\n* `GL_COMPRESSED_SIGNED_RED_RGTC1`\n* `GL_COMPRESSED_SIGNED_RED_RGTC1_EXT`\n* `GL_COMPRESSED_SIGNED_RG11_EAC`\n* `GL_COMPRESSED_SIGNED_RG_RGTC2`\n* `GL_COMPRESSED_SRGB`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR`\n* `GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC`\n* `GL_COMPRESSED_SRGB8_ETC2`\n* `GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2`\n* `GL_COMPRESSED_SRGB_ALPHA`\n* `GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM`\n* `GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT`\n* `GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT`\n* `GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT`\n* `GL_COMPRESSED_SRGB_S3TC_DXT1_EXT`\n* `GL_DEPTH24_STENCIL8`\n* `GL_DEPTH24_STENCIL8_EXT`\n* `GL_DEPTH24_STENCIL8_OES`\n* `GL_DEPTH32F_STENCIL8`\n* `GL_DEPTH32F_STENCIL8_NV`\n* `GL_DEPTH_COMPONENT`\n* `GL_DEPTH_COMPONENT16`\n* `GL_DEPTH_COMPONENT16_ARB`\n* `GL_DEPTH_COMPONENT16_OES`\n* `GL_DEPTH_COMPONENT16_SGIX`\n* `GL_DEPTH_COMPONENT24_ARB`\n* `GL_DEPTH_COMPONENT24_OES`\n* `GL_DEPTH_COMPONENT24_SGIX`\n* `GL_DEPTH_COMPONENT32F`\n* `GL_DEPTH_COMPONENT32F_NV`\n* `GL_DEPTH_COMPONENT32_ARB`\n* `GL_DEPTH_COMPONENT32_OES`\n* `GL_DEPTH_COMPONENT32_SGIX`\n* `GL_DEPTH_STENCIL`\n* `GL_DEPTH_STENCIL_EXT`\n* `GL_DEPTH_STENCIL_MESA`\n* `GL_DEPTH_STENCIL_NV`\n* `GL_DEPTH_STENCIL_OES`\n* `GL_DUAL_ALPHA12_SGIS`\n* `GL_DUAL_ALPHA16_SGIS`\n* `GL_DUAL_ALPHA4_SGIS`\n* `GL_DUAL_ALPHA8_SGIS`\n* `GL_DUAL_INTENSITY12_SGIS`\n* `GL_DUAL_INTENSITY16_SGIS`\n* `GL_DUAL_INTENSITY4_SGIS`\n* `GL_DUAL_INTENSITY8_SGIS`\n* `GL_DUAL_LUMINANCE12_SGIS`\n* `GL_DUAL_LUMINANCE16_SGIS`\n* `GL_DUAL_LUMINANCE4_SGIS`\n* `GL_DUAL_LUMINANCE8_SGIS`\n* `GL_DUAL_LUMINANCE_ALPHA4_SGIS`\n* `GL_DUAL_LUMINANCE_ALPHA8_SGIS`\n* `GL_INTENSITY`\n* `GL_INTENSITY12`\n* `GL_INTENSITY16`\n* `GL_INTENSITY4`\n* `GL_INTENSITY8`\n* `GL_LUMINANCE12`\n* `GL_LUMINANCE12_ALPHA12`\n* `GL_LUMINANCE12_ALPHA4`\n* `GL_LUMINANCE16`\n* `GL_LUMINANCE16_ALPHA16`\n* `GL_LUMINANCE4`\n* `GL_LUMINANCE4_ALPHA4`\n* `GL_LUMINANCE6_ALPHA2`\n* `GL_LUMINANCE8`\n* `GL_LUMINANCE8_ALPHA8`\n* `GL_QUAD_ALPHA4_SGIS`\n* `GL_QUAD_ALPHA8_SGIS`\n* `GL_QUAD_INTENSITY4_SGIS`\n* `GL_QUAD_INTENSITY8_SGIS`\n* `GL_QUAD_LUMINANCE4_SGIS`\n* `GL_QUAD_LUMINANCE8_SGIS`\n* `GL_R11F_G11F_B10F`\n* `GL_R11F_G11F_B10F_APPLE`\n* `GL_R11F_G11F_B10F_EXT`\n* `GL_R16`\n* `GL_R16F`\n* `GL_R16F_EXT`\n* `GL_R16I`\n* `GL_R16UI`\n* `GL_R16_EXT`\n* `GL_R16_SNORM`\n* `GL_R16_SNORM_EXT`\n* `GL_R32F`\n* `GL_R32F_EXT`\n* `GL_R32I`\n* `GL_R32UI`\n* `GL_R3_G3_B2`\n* `GL_R8`\n* `GL_R8I`\n* `GL_R8UI`\n* `GL_R8_EXT`\n* `GL_R8_SNORM`\n* `GL_RED`\n* `GL_RED_EXT`\n* `GL_RG`\n* `GL_RG16`\n* `GL_RG16F`\n* `GL_RG16F_EXT`\n* `GL_RG16I`\n* `GL_RG16UI`\n* `GL_RG16_EXT`\n* `GL_RG16_SNORM`\n* `GL_RG16_SNORM_EXT`\n* `GL_RG32F`\n* `GL_RG32F_EXT`\n* `GL_RG32I`\n* `GL_RG32UI`\n* `GL_RG8`\n* `GL_RG8I`\n* `GL_RG8UI`\n* `GL_RG8_EXT`\n* `GL_RG8_SNORM`\n* `GL_RGB`\n* `GL_RGB10`\n* `GL_RGB10_A2`\n* `GL_RGB10_A2UI`\n* `GL_RGB10_A2_EXT`\n* `GL_RGB10_EXT`\n* `GL_RGB12`\n* `GL_RGB12_EXT`\n* `GL_RGB16`\n* `GL_RGB16F`\n* `GL_RGB16F_ARB`\n* `GL_RGB16F_EXT`\n* `GL_RGB16I`\n* `GL_RGB16UI`\n* `GL_RGB16_EXT`\n* `GL_RGB16_SNORM`\n* `GL_RGB16_SNORM_EXT`\n* `GL_RGB2_EXT`\n* `GL_RGB32F`\n* `GL_RGB32I`\n* `GL_RGB32UI`\n* `GL_RGB4`\n* `GL_RGB4_EXT`\n* `GL_RGB5`\n* `GL_RGB5_A1`\n* `GL_RGB5_A1_EXT`\n* `GL_RGB5_A1_OES`\n* `GL_RGB5_EXT`\n* `GL_RGB8`\n* `GL_RGB8I`\n* `GL_RGB8UI`\n* `GL_RGB8_EXT`\n* `GL_RGB8_OES`\n* `GL_RGB8_SNORM`\n* `GL_RGB9_E5`\n* `GL_RGB9_E5_APPLE`\n* `GL_RGB9_E5_EXT`\n* `GL_RGBA`\n* `GL_RGBA12`\n* `GL_RGBA12_EXT`\n* `GL_RGBA16`\n* `GL_RGBA16F`\n* `GL_RGBA16F_ARB`\n* `GL_RGBA16F_EXT`\n* `GL_RGBA16I`\n* `GL_RGBA16UI`\n* `GL_RGBA16_EXT`\n* `GL_RGBA32F`\n* `GL_RGBA32F_ARB`\n* `GL_RGBA32F_EXT`\n* `GL_RGBA32I`\n* `GL_RGBA32UI`\n* `GL_RGBA4`\n* `GL_RGBA4_EXT`\n* `GL_RGBA4_OES`\n* `GL_RGBA8`\n* `GL_RGBA8I`\n* `GL_RGBA8UI`\n* `GL_RGBA8_EXT`\n* `GL_RGBA8_OES`\n* `GL_RGBA8_SNORM`\n* `GL_SRGB`\n* `GL_SRGB8`\n* `GL_SRGB8_ALPHA8`\n* `GL_SRGB8_ALPHA8_EXT`\n* `GL_SRGB8_EXT`\n* `GL_SRGB8_NV`\n* `GL_SRGB_ALPHA`\n* `GL_SRGB_ALPHA_EXT`\n* `GL_SRGB_EXT`\n* `GL_STENCIL_INDEX`\n* `GL_STENCIL_INDEX1`\n* `GL_STENCIL_INDEX16`\n* `GL_STENCIL_INDEX16_EXT`\n* `GL_STENCIL_INDEX1_EXT`\n* `GL_STENCIL_INDEX1_OES`\n* `GL_STENCIL_INDEX4`\n* `GL_STENCIL_INDEX4_EXT`\n* `GL_STENCIL_INDEX4_OES`\n* `GL_STENCIL_INDEX8`\n* `GL_STENCIL_INDEX8_EXT`\n* `GL_STENCIL_INDEX8_OES`\n* `GL_STENCIL_INDEX_OES`\n"]
  pub type InternalFormat = GLenum;
  #[doc = "LogicOp\n* `GL_AND`\n* `GL_AND_INVERTED`\n* `GL_AND_REVERSE`\n* `GL_CLEAR`\n* `GL_COPY`\n* `GL_COPY_INVERTED`\n* `GL_EQUIV`\n* `GL_INVERT`\n* `GL_NAND`\n* `GL_NOOP`\n* `GL_NOR`\n* `GL_OR`\n* `GL_OR_INVERTED`\n* `GL_OR_REVERSE`\n* `GL_SET`\n* `GL_XOR`\n"]
  pub type LogicOp = GLenum;
  #[doc = "MapBufferAccessMask\n* `GL_MAP_COHERENT_BIT`\n* `GL_MAP_COHERENT_BIT_EXT`\n* `GL_MAP_FLUSH_EXPLICIT_BIT`\n* `GL_MAP_FLUSH_EXPLICIT_BIT_EXT`\n* `GL_MAP_INVALIDATE_BUFFER_BIT`\n* `GL_MAP_INVALIDATE_BUFFER_BIT_EXT`\n* `GL_MAP_INVALIDATE_RANGE_BIT`\n* `GL_MAP_INVALIDATE_RANGE_BIT_EXT`\n* `GL_MAP_PERSISTENT_BIT`\n* `GL_MAP_PERSISTENT_BIT_EXT`\n* `GL_MAP_READ_BIT`\n* `GL_MAP_READ_BIT_EXT`\n* `GL_MAP_UNSYNCHRONIZED_BIT`\n* `GL_MAP_UNSYNCHRONIZED_BIT_EXT`\n* `GL_MAP_WRITE_BIT`\n* `GL_MAP_WRITE_BIT_EXT`\n"]
  pub type MapBufferAccessMask = GLenum;
  #[doc = "MaterialFace\n* `GL_BACK`\n* `GL_FRONT`\n* `GL_FRONT_AND_BACK`\n"]
  pub type MaterialFace = GLenum;
  #[doc = "PixelFormat\n* `GL_ABGR_EXT`\n* `GL_ALPHA`\n* `GL_BGR`\n* `GL_BGRA`\n* `GL_BGRA_INTEGER`\n* `GL_BGR_INTEGER`\n* `GL_BLUE`\n* `GL_BLUE_INTEGER`\n* `GL_CMYKA_EXT`\n* `GL_CMYK_EXT`\n* `GL_COLOR_INDEX`\n* `GL_DEPTH_COMPONENT`\n* `GL_DEPTH_STENCIL`\n* `GL_GREEN`\n* `GL_GREEN_INTEGER`\n* `GL_LUMINANCE`\n* `GL_LUMINANCE_ALPHA`\n* `GL_RED`\n* `GL_RED_EXT`\n* `GL_RED_INTEGER`\n* `GL_RG`\n* `GL_RGB`\n* `GL_RGBA`\n* `GL_RGBA_INTEGER`\n* `GL_RGB_INTEGER`\n* `GL_RG_INTEGER`\n* `GL_STENCIL_INDEX`\n* `GL_UNSIGNED_INT`\n* `GL_UNSIGNED_SHORT`\n* `GL_YCRCB_422_SGIX`\n* `GL_YCRCB_444_SGIX`\n"]
  pub type PixelFormat = GLenum;
  #[doc = "PixelStoreParameter\n* `GL_PACK_ALIGNMENT`\n* `GL_PACK_IMAGE_DEPTH_SGIS`\n* `GL_PACK_IMAGE_HEIGHT`\n* `GL_PACK_IMAGE_HEIGHT_EXT`\n* `GL_PACK_LSB_FIRST`\n* `GL_PACK_RESAMPLE_OML`\n* `GL_PACK_RESAMPLE_SGIX`\n* `GL_PACK_ROW_LENGTH`\n* `GL_PACK_SKIP_IMAGES`\n* `GL_PACK_SKIP_IMAGES_EXT`\n* `GL_PACK_SKIP_PIXELS`\n* `GL_PACK_SKIP_ROWS`\n* `GL_PACK_SKIP_VOLUMES_SGIS`\n* `GL_PACK_SUBSAMPLE_RATE_SGIX`\n* `GL_PACK_SWAP_BYTES`\n* `GL_PIXEL_TILE_CACHE_SIZE_SGIX`\n* `GL_PIXEL_TILE_GRID_DEPTH_SGIX`\n* `GL_PIXEL_TILE_GRID_HEIGHT_SGIX`\n* `GL_PIXEL_TILE_GRID_WIDTH_SGIX`\n* `GL_PIXEL_TILE_HEIGHT_SGIX`\n* `GL_PIXEL_TILE_WIDTH_SGIX`\n* `GL_UNPACK_ALIGNMENT`\n* `GL_UNPACK_IMAGE_DEPTH_SGIS`\n* `GL_UNPACK_IMAGE_HEIGHT`\n* `GL_UNPACK_IMAGE_HEIGHT_EXT`\n* `GL_UNPACK_LSB_FIRST`\n* `GL_UNPACK_RESAMPLE_OML`\n* `GL_UNPACK_RESAMPLE_SGIX`\n* `GL_UNPACK_ROW_LENGTH`\n* `GL_UNPACK_ROW_LENGTH_EXT`\n* `GL_UNPACK_SKIP_IMAGES`\n* `GL_UNPACK_SKIP_IMAGES_EXT`\n* `GL_UNPACK_SKIP_PIXELS`\n* `GL_UNPACK_SKIP_PIXELS_EXT`\n* `GL_UNPACK_SKIP_ROWS`\n* `GL_UNPACK_SKIP_ROWS_EXT`\n* `GL_UNPACK_SKIP_VOLUMES_SGIS`\n* `GL_UNPACK_SUBSAMPLE_RATE_SGIX`\n* `GL_UNPACK_SWAP_BYTES`\n"]
  pub type PixelStoreParameter = GLenum;
  #[doc = "PixelType\n* `GL_BITMAP`\n* `GL_BYTE`\n* `GL_FLOAT`\n* `GL_INT`\n* `GL_SHORT`\n* `GL_UNSIGNED_BYTE`\n* `GL_UNSIGNED_BYTE_3_3_2`\n* `GL_UNSIGNED_BYTE_3_3_2_EXT`\n* `GL_UNSIGNED_INT`\n* `GL_UNSIGNED_INT_10_10_10_2`\n* `GL_UNSIGNED_INT_10_10_10_2_EXT`\n* `GL_UNSIGNED_INT_8_8_8_8`\n* `GL_UNSIGNED_INT_8_8_8_8_EXT`\n* `GL_UNSIGNED_SHORT`\n* `GL_UNSIGNED_SHORT_4_4_4_4`\n* `GL_UNSIGNED_SHORT_4_4_4_4_EXT`\n* `GL_UNSIGNED_SHORT_5_5_5_1`\n* `GL_UNSIGNED_SHORT_5_5_5_1_EXT`\n"]
  pub type PixelType = GLenum;
  #[doc = "PointParameterNameARB\n* `GL_POINT_FADE_THRESHOLD_SIZE`\n* `GL_POINT_FADE_THRESHOLD_SIZE_EXT`\n* `GL_POINT_SIZE_MAX_EXT`\n* `GL_POINT_SIZE_MIN_EXT`\n"]
  pub type PointParameterNameARB = GLenum;
  #[doc = "PolygonMode\n* `GL_FILL`\n* `GL_LINE`\n* `GL_POINT`\n"]
  pub type PolygonMode = GLenum;
  #[doc = "PrimitiveType\n* `GL_LINES`\n* `GL_LINES_ADJACENCY`\n* `GL_LINES_ADJACENCY_ARB`\n* `GL_LINES_ADJACENCY_EXT`\n* `GL_LINE_LOOP`\n* `GL_LINE_STRIP`\n* `GL_LINE_STRIP_ADJACENCY`\n* `GL_LINE_STRIP_ADJACENCY_ARB`\n* `GL_LINE_STRIP_ADJACENCY_EXT`\n* `GL_PATCHES`\n* `GL_PATCHES_EXT`\n* `GL_POINTS`\n* `GL_POLYGON`\n* `GL_QUADS`\n* `GL_QUADS_EXT`\n* `GL_QUAD_STRIP`\n* `GL_TRIANGLES`\n* `GL_TRIANGLES_ADJACENCY`\n* `GL_TRIANGLES_ADJACENCY_ARB`\n* `GL_TRIANGLES_ADJACENCY_EXT`\n* `GL_TRIANGLE_FAN`\n* `GL_TRIANGLE_STRIP`\n* `GL_TRIANGLE_STRIP_ADJACENCY`\n* `GL_TRIANGLE_STRIP_ADJACENCY_ARB`\n* `GL_TRIANGLE_STRIP_ADJACENCY_EXT`\n"]
  pub type PrimitiveType = GLenum;
  #[doc = "ProgramPropertyARB\n* `GL_ACTIVE_ATOMIC_COUNTER_BUFFERS`\n* `GL_ACTIVE_ATTRIBUTES`\n* `GL_ACTIVE_ATTRIBUTE_MAX_LENGTH`\n* `GL_ACTIVE_UNIFORMS`\n* `GL_ACTIVE_UNIFORM_BLOCKS`\n* `GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH`\n* `GL_ACTIVE_UNIFORM_MAX_LENGTH`\n* `GL_ATTACHED_SHADERS`\n* `GL_COMPUTE_WORK_GROUP_SIZE`\n* `GL_DELETE_STATUS`\n* `GL_GEOMETRY_INPUT_TYPE`\n* `GL_GEOMETRY_OUTPUT_TYPE`\n* `GL_GEOMETRY_VERTICES_OUT`\n* `GL_INFO_LOG_LENGTH`\n* `GL_LINK_STATUS`\n* `GL_PROGRAM_BINARY_LENGTH`\n* `GL_TRANSFORM_FEEDBACK_BUFFER_MODE`\n* `GL_TRANSFORM_FEEDBACK_VARYINGS`\n* `GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH`\n* `GL_VALIDATE_STATUS`\n"]
  pub type ProgramPropertyARB = GLenum;
  #[doc = "QueryCounterTarget\n* `GL_TIMESTAMP`\n"]
  pub type QueryCounterTarget = GLenum;
  #[doc = "QueryObjectParameterName\n* `GL_QUERY_RESULT`\n* `GL_QUERY_RESULT_AVAILABLE`\n* `GL_QUERY_RESULT_NO_WAIT`\n* `GL_QUERY_TARGET`\n"]
  pub type QueryObjectParameterName = GLenum;
  #[doc = "QueryParameterName\n* `GL_CURRENT_QUERY`\n* `GL_QUERY_COUNTER_BITS`\n"]
  pub type QueryParameterName = GLenum;
  #[doc = "QueryTarget\n* `GL_ANY_SAMPLES_PASSED`\n* `GL_ANY_SAMPLES_PASSED_CONSERVATIVE`\n* `GL_PRIMITIVES_GENERATED`\n* `GL_PRIMITIVES_SUBMITTED`\n* `GL_SAMPLES_PASSED`\n* `GL_TIME_ELAPSED`\n* `GL_TRANSFORM_FEEDBACK_OVERFLOW`\n* `GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN`\n* `GL_VERTEX_SHADER_INVOCATIONS`\n* `GL_VERTICES_SUBMITTED`\n"]
  pub type QueryTarget = GLenum;
  #[doc = "ReadBufferMode\n* `GL_AUX0`\n* `GL_AUX1`\n* `GL_AUX2`\n* `GL_AUX3`\n* `GL_BACK`\n* `GL_BACK_LEFT`\n* `GL_BACK_RIGHT`\n* `GL_COLOR_ATTACHMENT0`\n* `GL_COLOR_ATTACHMENT1`\n* `GL_COLOR_ATTACHMENT10`\n* `GL_COLOR_ATTACHMENT11`\n* `GL_COLOR_ATTACHMENT12`\n* `GL_COLOR_ATTACHMENT13`\n* `GL_COLOR_ATTACHMENT14`\n* `GL_COLOR_ATTACHMENT15`\n* `GL_COLOR_ATTACHMENT2`\n* `GL_COLOR_ATTACHMENT3`\n* `GL_COLOR_ATTACHMENT4`\n* `GL_COLOR_ATTACHMENT5`\n* `GL_COLOR_ATTACHMENT6`\n* `GL_COLOR_ATTACHMENT7`\n* `GL_COLOR_ATTACHMENT8`\n* `GL_COLOR_ATTACHMENT9`\n* `GL_FRONT`\n* `GL_FRONT_LEFT`\n* `GL_FRONT_RIGHT`\n* `GL_LEFT`\n* `GL_NONE`\n* `GL_NONE_OES`\n* `GL_RIGHT`\n"]
  pub type ReadBufferMode = GLenum;
  #[doc = "RenderbufferParameterName\n* `GL_RENDERBUFFER_ALPHA_SIZE`\n* `GL_RENDERBUFFER_ALPHA_SIZE_EXT`\n* `GL_RENDERBUFFER_ALPHA_SIZE_OES`\n* `GL_RENDERBUFFER_BLUE_SIZE`\n* `GL_RENDERBUFFER_BLUE_SIZE_EXT`\n* `GL_RENDERBUFFER_BLUE_SIZE_OES`\n* `GL_RENDERBUFFER_COLOR_SAMPLES_NV`\n* `GL_RENDERBUFFER_COVERAGE_SAMPLES_NV`\n* `GL_RENDERBUFFER_DEPTH_SIZE`\n* `GL_RENDERBUFFER_DEPTH_SIZE_EXT`\n* `GL_RENDERBUFFER_DEPTH_SIZE_OES`\n* `GL_RENDERBUFFER_GREEN_SIZE`\n* `GL_RENDERBUFFER_GREEN_SIZE_EXT`\n* `GL_RENDERBUFFER_GREEN_SIZE_OES`\n* `GL_RENDERBUFFER_HEIGHT`\n* `GL_RENDERBUFFER_HEIGHT_EXT`\n* `GL_RENDERBUFFER_HEIGHT_OES`\n* `GL_RENDERBUFFER_INTERNAL_FORMAT`\n* `GL_RENDERBUFFER_INTERNAL_FORMAT_EXT`\n* `GL_RENDERBUFFER_INTERNAL_FORMAT_OES`\n* `GL_RENDERBUFFER_RED_SIZE`\n* `GL_RENDERBUFFER_RED_SIZE_EXT`\n* `GL_RENDERBUFFER_RED_SIZE_OES`\n* `GL_RENDERBUFFER_SAMPLES`\n* `GL_RENDERBUFFER_SAMPLES_ANGLE`\n* `GL_RENDERBUFFER_SAMPLES_APPLE`\n* `GL_RENDERBUFFER_SAMPLES_EXT`\n* `GL_RENDERBUFFER_SAMPLES_IMG`\n* `GL_RENDERBUFFER_SAMPLES_NV`\n* `GL_RENDERBUFFER_STENCIL_SIZE`\n* `GL_RENDERBUFFER_STENCIL_SIZE_EXT`\n* `GL_RENDERBUFFER_STENCIL_SIZE_OES`\n* `GL_RENDERBUFFER_STORAGE_SAMPLES_AMD`\n* `GL_RENDERBUFFER_WIDTH`\n* `GL_RENDERBUFFER_WIDTH_EXT`\n* `GL_RENDERBUFFER_WIDTH_OES`\n"]
  pub type RenderbufferParameterName = GLenum;
  #[doc = "RenderbufferTarget\n* `GL_RENDERBUFFER`\n* `GL_RENDERBUFFER_OES`\n"]
  pub type RenderbufferTarget = GLenum;
  #[doc = "SamplerParameterF\n* `GL_TEXTURE_BORDER_COLOR`\n* `GL_TEXTURE_MAX_ANISOTROPY`\n* `GL_TEXTURE_MAX_LOD`\n* `GL_TEXTURE_MIN_LOD`\n"]
  pub type SamplerParameterF = GLenum;
  #[doc = "SamplerParameterI\n* `GL_TEXTURE_COMPARE_FUNC`\n* `GL_TEXTURE_COMPARE_MODE`\n* `GL_TEXTURE_MAG_FILTER`\n* `GL_TEXTURE_MIN_FILTER`\n* `GL_TEXTURE_WRAP_R`\n* `GL_TEXTURE_WRAP_S`\n* `GL_TEXTURE_WRAP_T`\n"]
  pub type SamplerParameterI = GLenum;
  #[doc = "ShaderParameterName\n* `GL_COMPILE_STATUS`\n* `GL_DELETE_STATUS`\n* `GL_INFO_LOG_LENGTH`\n* `GL_SHADER_SOURCE_LENGTH`\n* `GL_SHADER_TYPE`\n"]
  pub type ShaderParameterName = GLenum;
  #[doc = "ShaderType\n* `GL_COMPUTE_SHADER`\n* `GL_FRAGMENT_SHADER`\n* `GL_FRAGMENT_SHADER_ARB`\n* `GL_GEOMETRY_SHADER`\n* `GL_TESS_CONTROL_SHADER`\n* `GL_TESS_EVALUATION_SHADER`\n* `GL_VERTEX_SHADER`\n* `GL_VERTEX_SHADER_ARB`\n"]
  pub type ShaderType = GLenum;
  #[doc = "StencilFaceDirection\n* `GL_BACK`\n* `GL_FRONT`\n* `GL_FRONT_AND_BACK`\n"]
  pub type StencilFaceDirection = GLenum;
  #[doc = "StencilFunction\n* `GL_ALWAYS`\n* `GL_EQUAL`\n* `GL_GEQUAL`\n* `GL_GREATER`\n* `GL_LEQUAL`\n* `GL_LESS`\n* `GL_NEVER`\n* `GL_NOTEQUAL`\n"]
  pub type StencilFunction = GLenum;
  #[doc = "StencilOp\n* `GL_DECR`\n* `GL_DECR_WRAP`\n* `GL_INCR`\n* `GL_INCR_WRAP`\n* `GL_INVERT`\n* `GL_KEEP`\n* `GL_REPLACE`\n* `GL_ZERO`\n"]
  pub type StencilOp = GLenum;
  #[doc = "StringName\n* `GL_EXTENSIONS`\n* `GL_RENDERER`\n* `GL_SHADING_LANGUAGE_VERSION`\n* `GL_VENDOR`\n* `GL_VERSION`\n"]
  pub type StringName = GLenum;
  #[doc = "SyncCondition\n* `GL_SYNC_GPU_COMMANDS_COMPLETE`\n"]
  pub type SyncCondition = GLenum;
  #[doc = "SyncObjectMask\n* `GL_SYNC_FLUSH_COMMANDS_BIT`\n* `GL_SYNC_FLUSH_COMMANDS_BIT_APPLE`\n"]
  pub type SyncObjectMask = GLenum;
  #[doc = "SyncParameterName\n* `GL_OBJECT_TYPE`\n* `GL_SYNC_CONDITION`\n* `GL_SYNC_FLAGS`\n* `GL_SYNC_STATUS`\n"]
  pub type SyncParameterName = GLenum;
  #[doc = "SyncStatus\n* `GL_ALREADY_SIGNALED`\n* `GL_CONDITION_SATISFIED`\n* `GL_TIMEOUT_EXPIRED`\n* `GL_WAIT_FAILED`\n"]
  pub type SyncStatus = GLenum;
  #[doc = "TextureParameterName\n* `GL_DEPTH_STENCIL_TEXTURE_MODE`\n* `GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS`\n* `GL_DETAIL_TEXTURE_LEVEL_SGIS`\n* `GL_DETAIL_TEXTURE_MODE_SGIS`\n* `GL_DUAL_TEXTURE_SELECT_SGIS`\n* `GL_GENERATE_MIPMAP`\n* `GL_GENERATE_MIPMAP_SGIS`\n* `GL_POST_TEXTURE_FILTER_BIAS_SGIX`\n* `GL_POST_TEXTURE_FILTER_SCALE_SGIX`\n* `GL_QUAD_TEXTURE_SELECT_SGIS`\n* `GL_SHADOW_AMBIENT_SGIX`\n* `GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS`\n* `GL_TEXTURE_4DSIZE_SGIS`\n* `GL_TEXTURE_ALPHA_SIZE`\n* `GL_TEXTURE_BASE_LEVEL`\n* `GL_TEXTURE_BASE_LEVEL_SGIS`\n* `GL_TEXTURE_BLUE_SIZE`\n* `GL_TEXTURE_BORDER`\n* `GL_TEXTURE_BORDER_COLOR`\n* `GL_TEXTURE_BORDER_COLOR_NV`\n* `GL_TEXTURE_CLIPMAP_CENTER_SGIX`\n* `GL_TEXTURE_CLIPMAP_DEPTH_SGIX`\n* `GL_TEXTURE_CLIPMAP_FRAME_SGIX`\n* `GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX`\n* `GL_TEXTURE_CLIPMAP_OFFSET_SGIX`\n* `GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX`\n* `GL_TEXTURE_COMPARE_FUNC`\n* `GL_TEXTURE_COMPARE_MODE`\n* `GL_TEXTURE_COMPARE_OPERATOR_SGIX`\n* `GL_TEXTURE_COMPARE_SGIX`\n* `GL_TEXTURE_COMPONENTS`\n* `GL_TEXTURE_DEPTH_EXT`\n* `GL_TEXTURE_FILTER4_SIZE_SGIS`\n* `GL_TEXTURE_GEQUAL_R_SGIX`\n* `GL_TEXTURE_GREEN_SIZE`\n* `GL_TEXTURE_HEIGHT`\n* `GL_TEXTURE_INTENSITY_SIZE`\n* `GL_TEXTURE_INTERNAL_FORMAT`\n* `GL_TEXTURE_LEQUAL_R_SGIX`\n* `GL_TEXTURE_LOD_BIAS`\n* `GL_TEXTURE_LOD_BIAS_R_SGIX`\n* `GL_TEXTURE_LOD_BIAS_S_SGIX`\n* `GL_TEXTURE_LOD_BIAS_T_SGIX`\n* `GL_TEXTURE_LUMINANCE_SIZE`\n* `GL_TEXTURE_MAG_FILTER`\n* `GL_TEXTURE_MAX_CLAMP_R_SGIX`\n* `GL_TEXTURE_MAX_CLAMP_S_SGIX`\n* `GL_TEXTURE_MAX_CLAMP_T_SGIX`\n* `GL_TEXTURE_MAX_LEVEL`\n* `GL_TEXTURE_MAX_LEVEL_SGIS`\n* `GL_TEXTURE_MAX_LOD`\n* `GL_TEXTURE_MAX_LOD_SGIS`\n* `GL_TEXTURE_MIN_FILTER`\n* `GL_TEXTURE_MIN_LOD`\n* `GL_TEXTURE_MIN_LOD_SGIS`\n* `GL_TEXTURE_PRIORITY`\n* `GL_TEXTURE_PRIORITY_EXT`\n* `GL_TEXTURE_RED_SIZE`\n* `GL_TEXTURE_RESIDENT`\n* `GL_TEXTURE_SWIZZLE_A`\n* `GL_TEXTURE_SWIZZLE_B`\n* `GL_TEXTURE_SWIZZLE_G`\n* `GL_TEXTURE_SWIZZLE_R`\n* `GL_TEXTURE_SWIZZLE_RGBA`\n* `GL_TEXTURE_TILING_EXT`\n* `GL_TEXTURE_WIDTH`\n* `GL_TEXTURE_WRAP_Q_SGIS`\n* `GL_TEXTURE_WRAP_R`\n* `GL_TEXTURE_WRAP_R_EXT`\n* `GL_TEXTURE_WRAP_R_OES`\n* `GL_TEXTURE_WRAP_S`\n* `GL_TEXTURE_WRAP_T`\n"]
  pub type TextureParameterName = GLenum;
  #[doc = "TextureTarget\n* `GL_DETAIL_TEXTURE_2D_SGIS`\n* `GL_PROXY_TEXTURE_1D`\n* `GL_PROXY_TEXTURE_1D_ARRAY`\n* `GL_PROXY_TEXTURE_1D_ARRAY_EXT`\n* `GL_PROXY_TEXTURE_1D_EXT`\n* `GL_PROXY_TEXTURE_2D`\n* `GL_PROXY_TEXTURE_2D_ARRAY`\n* `GL_PROXY_TEXTURE_2D_ARRAY_EXT`\n* `GL_PROXY_TEXTURE_2D_EXT`\n* `GL_PROXY_TEXTURE_2D_MULTISAMPLE`\n* `GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY`\n* `GL_PROXY_TEXTURE_3D`\n* `GL_PROXY_TEXTURE_3D_EXT`\n* `GL_PROXY_TEXTURE_4D_SGIS`\n* `GL_PROXY_TEXTURE_CUBE_MAP`\n* `GL_PROXY_TEXTURE_CUBE_MAP_ARB`\n* `GL_PROXY_TEXTURE_CUBE_MAP_ARRAY`\n* `GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB`\n* `GL_PROXY_TEXTURE_CUBE_MAP_EXT`\n* `GL_PROXY_TEXTURE_RECTANGLE`\n* `GL_PROXY_TEXTURE_RECTANGLE_ARB`\n* `GL_PROXY_TEXTURE_RECTANGLE_NV`\n* `GL_TEXTURE_1D`\n* `GL_TEXTURE_1D_ARRAY`\n* `GL_TEXTURE_2D`\n* `GL_TEXTURE_2D_ARRAY`\n* `GL_TEXTURE_2D_MULTISAMPLE`\n* `GL_TEXTURE_2D_MULTISAMPLE_ARRAY`\n* `GL_TEXTURE_3D`\n* `GL_TEXTURE_3D_EXT`\n* `GL_TEXTURE_3D_OES`\n* `GL_TEXTURE_4D_SGIS`\n* `GL_TEXTURE_CUBE_MAP`\n* `GL_TEXTURE_CUBE_MAP_ARRAY`\n* `GL_TEXTURE_CUBE_MAP_ARRAY_ARB`\n* `GL_TEXTURE_CUBE_MAP_ARRAY_EXT`\n* `GL_TEXTURE_CUBE_MAP_ARRAY_OES`\n* `GL_TEXTURE_CUBE_MAP_NEGATIVE_X`\n* `GL_TEXTURE_CUBE_MAP_NEGATIVE_Y`\n* `GL_TEXTURE_CUBE_MAP_NEGATIVE_Z`\n* `GL_TEXTURE_CUBE_MAP_POSITIVE_X`\n* `GL_TEXTURE_CUBE_MAP_POSITIVE_Y`\n* `GL_TEXTURE_CUBE_MAP_POSITIVE_Z`\n* `GL_TEXTURE_RECTANGLE`\n"]
  pub type TextureTarget = GLenum;
  #[doc = "TextureUnit\n* `GL_TEXTURE0`\n* `GL_TEXTURE1`\n* `GL_TEXTURE10`\n* `GL_TEXTURE11`\n* `GL_TEXTURE12`\n* `GL_TEXTURE13`\n* `GL_TEXTURE14`\n* `GL_TEXTURE15`\n* `GL_TEXTURE16`\n* `GL_TEXTURE17`\n* `GL_TEXTURE18`\n* `GL_TEXTURE19`\n* `GL_TEXTURE2`\n* `GL_TEXTURE20`\n* `GL_TEXTURE21`\n* `GL_TEXTURE22`\n* `GL_TEXTURE23`\n* `GL_TEXTURE24`\n* `GL_TEXTURE25`\n* `GL_TEXTURE26`\n* `GL_TEXTURE27`\n* `GL_TEXTURE28`\n* `GL_TEXTURE29`\n* `GL_TEXTURE3`\n* `GL_TEXTURE30`\n* `GL_TEXTURE31`\n* `GL_TEXTURE4`\n* `GL_TEXTURE5`\n* `GL_TEXTURE6`\n* `GL_TEXTURE7`\n* `GL_TEXTURE8`\n* `GL_TEXTURE9`\n"]
  pub type TextureUnit = GLenum;
  #[doc = "TransformFeedbackBufferMode\n* `GL_INTERLEAVED_ATTRIBS`\n* `GL_SEPARATE_ATTRIBS`\n"]
  pub type TransformFeedbackBufferMode = GLenum;
  #[doc = "UniformBlockPName\n* `GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS`\n* `GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES`\n* `GL_UNIFORM_BLOCK_BINDING`\n* `GL_UNIFORM_BLOCK_DATA_SIZE`\n* `GL_UNIFORM_BLOCK_NAME_LENGTH`\n* `GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER`\n* `GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER`\n* `GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER`\n* `GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER`\n* `GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER`\n* `GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER`\n"]
  pub type UniformBlockPName = GLenum;
  #[doc = "UniformPName\n* `GL_UNIFORM_ARRAY_STRIDE`\n* `GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX`\n* `GL_UNIFORM_BLOCK_INDEX`\n* `GL_UNIFORM_IS_ROW_MAJOR`\n* `GL_UNIFORM_MATRIX_STRIDE`\n* `GL_UNIFORM_NAME_LENGTH`\n* `GL_UNIFORM_OFFSET`\n* `GL_UNIFORM_SIZE`\n* `GL_UNIFORM_TYPE`\n"]
  pub type UniformPName = GLenum;
  #[doc = "UniformType\n* `GL_BOOL`\n* `GL_BOOL_VEC2`\n* `GL_BOOL_VEC3`\n* `GL_BOOL_VEC4`\n* `GL_DOUBLE`\n* `GL_DOUBLE_MAT2`\n* `GL_DOUBLE_MAT2x3`\n* `GL_DOUBLE_MAT2x4`\n* `GL_DOUBLE_MAT3`\n* `GL_DOUBLE_MAT3x2`\n* `GL_DOUBLE_MAT3x4`\n* `GL_DOUBLE_MAT4`\n* `GL_DOUBLE_MAT4x2`\n* `GL_DOUBLE_MAT4x3`\n* `GL_DOUBLE_VEC2`\n* `GL_DOUBLE_VEC3`\n* `GL_DOUBLE_VEC4`\n* `GL_FLOAT`\n* `GL_FLOAT_MAT2`\n* `GL_FLOAT_MAT2x3`\n* `GL_FLOAT_MAT2x4`\n* `GL_FLOAT_MAT3`\n* `GL_FLOAT_MAT3x2`\n* `GL_FLOAT_MAT3x4`\n* `GL_FLOAT_MAT4`\n* `GL_FLOAT_MAT4x2`\n* `GL_FLOAT_MAT4x3`\n* `GL_FLOAT_VEC2`\n* `GL_FLOAT_VEC3`\n* `GL_FLOAT_VEC4`\n* `GL_INT`\n* `GL_INT_SAMPLER_1D`\n* `GL_INT_SAMPLER_1D_ARRAY`\n* `GL_INT_SAMPLER_2D`\n* `GL_INT_SAMPLER_2D_ARRAY`\n* `GL_INT_SAMPLER_2D_MULTISAMPLE`\n* `GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY`\n* `GL_INT_SAMPLER_2D_RECT`\n* `GL_INT_SAMPLER_3D`\n* `GL_INT_SAMPLER_BUFFER`\n* `GL_INT_SAMPLER_CUBE`\n* `GL_INT_SAMPLER_CUBE_MAP_ARRAY`\n* `GL_INT_VEC2`\n* `GL_INT_VEC3`\n* `GL_INT_VEC4`\n* `GL_SAMPLER_1D`\n* `GL_SAMPLER_1D_ARRAY`\n* `GL_SAMPLER_1D_ARRAY_SHADOW`\n* `GL_SAMPLER_1D_SHADOW`\n* `GL_SAMPLER_2D`\n* `GL_SAMPLER_2D_ARRAY`\n* `GL_SAMPLER_2D_ARRAY_SHADOW`\n* `GL_SAMPLER_2D_MULTISAMPLE`\n* `GL_SAMPLER_2D_MULTISAMPLE_ARRAY`\n* `GL_SAMPLER_2D_RECT`\n* `GL_SAMPLER_2D_RECT_SHADOW`\n* `GL_SAMPLER_2D_SHADOW`\n* `GL_SAMPLER_3D`\n* `GL_SAMPLER_BUFFER`\n* `GL_SAMPLER_CUBE`\n* `GL_SAMPLER_CUBE_MAP_ARRAY`\n* `GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW`\n* `GL_SAMPLER_CUBE_SHADOW`\n* `GL_UNSIGNED_INT`\n* `GL_UNSIGNED_INT_SAMPLER_1D`\n* `GL_UNSIGNED_INT_SAMPLER_1D_ARRAY`\n* `GL_UNSIGNED_INT_SAMPLER_2D`\n* `GL_UNSIGNED_INT_SAMPLER_2D_ARRAY`\n* `GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE`\n* `GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY`\n* `GL_UNSIGNED_INT_SAMPLER_2D_RECT`\n* `GL_UNSIGNED_INT_SAMPLER_3D`\n* `GL_UNSIGNED_INT_SAMPLER_BUFFER`\n* `GL_UNSIGNED_INT_SAMPLER_CUBE`\n* `GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY`\n* `GL_UNSIGNED_INT_VEC2`\n* `GL_UNSIGNED_INT_VEC3`\n* `GL_UNSIGNED_INT_VEC4`\n"]
  pub type UniformType = GLenum;
  #[doc = "VertexAttribEnum\n* `GL_CURRENT_VERTEX_ATTRIB`\n* `GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING`\n* `GL_VERTEX_ATTRIB_ARRAY_DIVISOR`\n* `GL_VERTEX_ATTRIB_ARRAY_ENABLED`\n* `GL_VERTEX_ATTRIB_ARRAY_INTEGER`\n* `GL_VERTEX_ATTRIB_ARRAY_NORMALIZED`\n* `GL_VERTEX_ATTRIB_ARRAY_SIZE`\n* `GL_VERTEX_ATTRIB_ARRAY_STRIDE`\n* `GL_VERTEX_ATTRIB_ARRAY_TYPE`\n"]
  pub type VertexAttribEnum = GLenum;
  #[doc = "VertexAttribPointerPropertyARB\n* `GL_VERTEX_ATTRIB_ARRAY_POINTER`\n* `GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB`\n"]
  pub type VertexAttribPointerPropertyARB = GLenum;
  #[doc = "VertexAttribPointerType\n* `GL_BYTE`\n* `GL_DOUBLE`\n* `GL_FIXED`\n* `GL_FLOAT`\n* `GL_HALF_FLOAT`\n* `GL_INT`\n* `GL_INT_2_10_10_10_REV`\n* `GL_SHORT`\n* `GL_UNSIGNED_BYTE`\n* `GL_UNSIGNED_INT`\n* `GL_UNSIGNED_INT_10F_11F_11F_REV`\n* `GL_UNSIGNED_INT_2_10_10_10_REV`\n* `GL_UNSIGNED_SHORT`\n"]
  pub type VertexAttribPointerType = GLenum;
  #[doc = "VertexAttribPropertyARB\n* `GL_CURRENT_VERTEX_ATTRIB`\n* `GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING`\n* `GL_VERTEX_ATTRIB_ARRAY_DIVISOR`\n* `GL_VERTEX_ATTRIB_ARRAY_ENABLED`\n* `GL_VERTEX_ATTRIB_ARRAY_INTEGER`\n* `GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT`\n* `GL_VERTEX_ATTRIB_ARRAY_LONG`\n* `GL_VERTEX_ATTRIB_ARRAY_NORMALIZED`\n* `GL_VERTEX_ATTRIB_ARRAY_SIZE`\n* `GL_VERTEX_ATTRIB_ARRAY_STRIDE`\n* `GL_VERTEX_ATTRIB_ARRAY_TYPE`\n* `GL_VERTEX_ATTRIB_BINDING`\n* `GL_VERTEX_ATTRIB_RELATIVE_OFFSET`\n"]
  pub type VertexAttribPropertyARB = GLenum;
  #[doc = "VertexProvokingMode\n* `GL_FIRST_VERTEX_CONVENTION`\n* `GL_LAST_VERTEX_CONVENTION`\n"]
  pub type VertexProvokingMode = GLenum;
}

pub use enums::*;
pub mod enums {
  //! All the enumerated constants.
  use super::*;
  pub const GL_ACTIVE_ATTRIBUTES: GLenum = 0x8B89;
  pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: GLenum = 0x8B8A;
  pub const GL_ACTIVE_TEXTURE: GLenum = 0x84E0;
  pub const GL_ACTIVE_UNIFORMS: GLenum = 0x8B86;
  pub const GL_ACTIVE_UNIFORM_BLOCKS: GLenum = 0x8A36;
  pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: GLenum = 0x8A35;
  pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: GLenum = 0x8B87;
  pub const GL_ALIASED_LINE_WIDTH_RANGE: GLenum = 0x846E;
  pub const GL_ALPHA: GLenum = 0x1906;
  pub const GL_ALREADY_SIGNALED: GLenum = 0x911A;
  pub const GL_ALWAYS: GLenum = 0x207;
  pub const GL_AND: GLenum = 0x1501;
  pub const GL_AND_INVERTED: GLenum = 0x1504;
  pub const GL_AND_REVERSE: GLenum = 0x1502;
  pub const GL_ANY_SAMPLES_PASSED: GLenum = 0x8C2F;
  pub const GL_ARRAY_BUFFER: GLenum = 0x8892;
  pub const GL_ARRAY_BUFFER_BINDING: GLenum = 0x8894;
  pub const GL_ATTACHED_SHADERS: GLenum = 0x8B85;
  pub const GL_BACK: GLenum = 0x405;
  pub const GL_BACK_LEFT: GLenum = 0x402;
  pub const GL_BACK_RIGHT: GLenum = 0x403;
  pub const GL_BGR: GLenum = 0x80E0;
  pub const GL_BGRA: GLenum = 0x80E1;
  pub const GL_BGRA_INTEGER: GLenum = 0x8D9B;
  pub const GL_BGR_INTEGER: GLenum = 0x8D9A;
  pub const GL_BLEND: GLenum = 0xBE2;
  pub const GL_BLEND_COLOR: GLenum = 0x8005;
  pub const GL_BLEND_DST: GLenum = 0xBE0;
  pub const GL_BLEND_DST_ALPHA: GLenum = 0x80CA;
  pub const GL_BLEND_DST_RGB: GLenum = 0x80C8;
  pub const GL_BLEND_EQUATION: GLenum = 0x8009;
  pub const GL_BLEND_EQUATION_ALPHA: GLenum = 0x883D;
  pub const GL_BLEND_EQUATION_RGB: GLenum = 0x8009;
  pub const GL_BLEND_SRC: GLenum = 0xBE1;
  pub const GL_BLEND_SRC_ALPHA: GLenum = 0x80CB;
  pub const GL_BLEND_SRC_RGB: GLenum = 0x80C9;
  pub const GL_BLUE: GLenum = 0x1905;
  pub const GL_BLUE_INTEGER: GLenum = 0x8D96;
  pub const GL_BOOL: GLenum = 0x8B56;
  pub const GL_BOOL_VEC2: GLenum = 0x8B57;
  pub const GL_BOOL_VEC3: GLenum = 0x8B58;
  pub const GL_BOOL_VEC4: GLenum = 0x8B59;
  pub const GL_BUFFER_ACCESS: GLenum = 0x88BB;
  pub const GL_BUFFER_ACCESS_FLAGS: GLenum = 0x911F;
  pub const GL_BUFFER_MAPPED: GLenum = 0x88BC;
  pub const GL_BUFFER_MAP_LENGTH: GLenum = 0x9120;
  pub const GL_BUFFER_MAP_OFFSET: GLenum = 0x9121;
  pub const GL_BUFFER_MAP_POINTER: GLenum = 0x88BD;
  pub const GL_BUFFER_SIZE: GLenum = 0x8764;
  pub const GL_BUFFER_USAGE: GLenum = 0x8765;
  pub const GL_BYTE: GLenum = 0x1400;
  pub const GL_CCW: GLenum = 0x901;
  pub const GL_CLAMP_READ_COLOR: GLenum = 0x891C;
  pub const GL_CLAMP_TO_BORDER: GLenum = 0x812D;
  pub const GL_CLAMP_TO_EDGE: GLenum = 0x812F;
  pub const GL_CLEAR: GLenum = 0x1500;
  pub const GL_CLIP_DISTANCE0: GLenum = 0x3000;
  pub const GL_CLIP_DISTANCE1: GLenum = 0x3001;
  pub const GL_CLIP_DISTANCE2: GLenum = 0x3002;
  pub const GL_CLIP_DISTANCE3: GLenum = 0x3003;
  pub const GL_CLIP_DISTANCE4: GLenum = 0x3004;
  pub const GL_CLIP_DISTANCE5: GLenum = 0x3005;
  pub const GL_CLIP_DISTANCE6: GLenum = 0x3006;
  pub const GL_CLIP_DISTANCE7: GLenum = 0x3007;
  pub const GL_COLOR: GLenum = 0x1800;
  pub const GL_COLOR_ATTACHMENT0: GLenum = 0x8CE0;
  pub const GL_COLOR_ATTACHMENT10: GLenum = 0x8CEA;
  pub const GL_COLOR_ATTACHMENT11: GLenum = 0x8CEB;
  pub const GL_COLOR_ATTACHMENT12: GLenum = 0x8CEC;
  pub const GL_COLOR_ATTACHMENT13: GLenum = 0x8CED;
  pub const GL_COLOR_ATTACHMENT14: GLenum = 0x8CEE;
  pub const GL_COLOR_ATTACHMENT15: GLenum = 0x8CEF;
  pub const GL_COLOR_ATTACHMENT16: GLenum = 0x8CF0;
  pub const GL_COLOR_ATTACHMENT17: GLenum = 0x8CF1;
  pub const GL_COLOR_ATTACHMENT18: GLenum = 0x8CF2;
  pub const GL_COLOR_ATTACHMENT19: GLenum = 0x8CF3;
  pub const GL_COLOR_ATTACHMENT1: GLenum = 0x8CE1;
  pub const GL_COLOR_ATTACHMENT20: GLenum = 0x8CF4;
  pub const GL_COLOR_ATTACHMENT21: GLenum = 0x8CF5;
  pub const GL_COLOR_ATTACHMENT22: GLenum = 0x8CF6;
  pub const GL_COLOR_ATTACHMENT23: GLenum = 0x8CF7;
  pub const GL_COLOR_ATTACHMENT24: GLenum = 0x8CF8;
  pub const GL_COLOR_ATTACHMENT25: GLenum = 0x8CF9;
  pub const GL_COLOR_ATTACHMENT26: GLenum = 0x8CFA;
  pub const GL_COLOR_ATTACHMENT27: GLenum = 0x8CFB;
  pub const GL_COLOR_ATTACHMENT28: GLenum = 0x8CFC;
  pub const GL_COLOR_ATTACHMENT29: GLenum = 0x8CFD;
  pub const GL_COLOR_ATTACHMENT2: GLenum = 0x8CE2;
  pub const GL_COLOR_ATTACHMENT30: GLenum = 0x8CFE;
  pub const GL_COLOR_ATTACHMENT31: GLenum = 0x8CFF;
  pub const GL_COLOR_ATTACHMENT3: GLenum = 0x8CE3;
  pub const GL_COLOR_ATTACHMENT4: GLenum = 0x8CE4;
  pub const GL_COLOR_ATTACHMENT5: GLenum = 0x8CE5;
  pub const GL_COLOR_ATTACHMENT6: GLenum = 0x8CE6;
  pub const GL_COLOR_ATTACHMENT7: GLenum = 0x8CE7;
  pub const GL_COLOR_ATTACHMENT8: GLenum = 0x8CE8;
  pub const GL_COLOR_ATTACHMENT9: GLenum = 0x8CE9;
  pub const GL_COLOR_BUFFER_BIT: GLbitfield = 0x00004000;
  pub const GL_COLOR_CLEAR_VALUE: GLenum = 0xC22;
  pub const GL_COLOR_LOGIC_OP: GLenum = 0xBF2;
  pub const GL_COLOR_WRITEMASK: GLenum = 0xC23;
  pub const GL_COMPARE_REF_TO_TEXTURE: GLenum = 0x884E;
  pub const GL_COMPILE_STATUS: GLenum = 0x8B81;
  pub const GL_COMPRESSED_RED: GLenum = 0x8225;
  pub const GL_COMPRESSED_RED_RGTC1: GLenum = 0x8DBB;
  pub const GL_COMPRESSED_RG: GLenum = 0x8226;
  pub const GL_COMPRESSED_RGB: GLenum = 0x84ED;
  pub const GL_COMPRESSED_RGBA: GLenum = 0x84EE;
  pub const GL_COMPRESSED_RG_RGTC2: GLenum = 0x8DBD;
  pub const GL_COMPRESSED_SIGNED_RED_RGTC1: GLenum = 0x8DBC;
  pub const GL_COMPRESSED_SIGNED_RG_RGTC2: GLenum = 0x8DBE;
  pub const GL_COMPRESSED_SRGB: GLenum = 0x8C48;
  pub const GL_COMPRESSED_SRGB_ALPHA: GLenum = 0x8C49;
  pub const GL_COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A3;
  pub const GL_CONDITION_SATISFIED: GLenum = 0x911C;
  pub const GL_CONSTANT_ALPHA: GLenum = 0x8003;
  pub const GL_CONSTANT_COLOR: GLenum = 0x8001;
  pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: GLbitfield = 0x00000002;
  pub const GL_CONTEXT_CORE_PROFILE_BIT: GLbitfield = 0x00000001;
  pub const GL_CONTEXT_FLAGS: GLenum = 0x821E;
  pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: GLbitfield = 0x00000001;
  pub const GL_CONTEXT_PROFILE_MASK: GLenum = 0x9126;
  pub const GL_COPY: GLenum = 0x1503;
  pub const GL_COPY_INVERTED: GLenum = 0x150C;
  pub const GL_COPY_READ_BUFFER: GLenum = 0x8F36;
  pub const GL_COPY_WRITE_BUFFER: GLenum = 0x8F37;
  pub const GL_CULL_FACE: GLenum = 0xB44;
  pub const GL_CULL_FACE_MODE: GLenum = 0xB45;
  pub const GL_CURRENT_PROGRAM: GLenum = 0x8B8D;
  pub const GL_CURRENT_QUERY: GLenum = 0x8865;
  pub const GL_CURRENT_VERTEX_ATTRIB: GLenum = 0x8626;
  pub const GL_CW: GLenum = 0x900;
  pub const GL_DECR: GLenum = 0x1E03;
  pub const GL_DECR_WRAP: GLenum = 0x8508;
  pub const GL_DELETE_STATUS: GLenum = 0x8B80;
  pub const GL_DEPTH24_STENCIL8: GLenum = 0x88F0;
  pub const GL_DEPTH32F_STENCIL8: GLenum = 0x8CAD;
  pub const GL_DEPTH: GLenum = 0x1801;
  pub const GL_DEPTH_ATTACHMENT: GLenum = 0x8D00;
  pub const GL_DEPTH_BUFFER_BIT: GLbitfield = 0x00000100;
  pub const GL_DEPTH_CLAMP: GLenum = 0x864F;
  pub const GL_DEPTH_CLEAR_VALUE: GLenum = 0xB73;
  pub const GL_DEPTH_COMPONENT16: GLenum = 0x81A5;
  pub const GL_DEPTH_COMPONENT24: GLenum = 0x81A6;
  pub const GL_DEPTH_COMPONENT32: GLenum = 0x81A7;
  pub const GL_DEPTH_COMPONENT32F: GLenum = 0x8CAC;
  pub const GL_DEPTH_COMPONENT: GLenum = 0x1902;
  pub const GL_DEPTH_FUNC: GLenum = 0xB74;
  pub const GL_DEPTH_RANGE: GLenum = 0xB70;
  pub const GL_DEPTH_STENCIL: GLenum = 0x84F9;
  pub const GL_DEPTH_STENCIL_ATTACHMENT: GLenum = 0x821A;
  pub const GL_DEPTH_TEST: GLenum = 0xB71;
  pub const GL_DEPTH_WRITEMASK: GLenum = 0xB72;
  pub const GL_DITHER: GLenum = 0xBD0;
  pub const GL_DONT_CARE: GLenum = 0x1100;
  pub const GL_DOUBLE: GLenum = 0x140A;
  pub const GL_DOUBLEBUFFER: GLenum = 0xC32;
  pub const GL_DRAW_BUFFER0: GLenum = 0x8825;
  pub const GL_DRAW_BUFFER10: GLenum = 0x882F;
  pub const GL_DRAW_BUFFER11: GLenum = 0x8830;
  pub const GL_DRAW_BUFFER12: GLenum = 0x8831;
  pub const GL_DRAW_BUFFER13: GLenum = 0x8832;
  pub const GL_DRAW_BUFFER14: GLenum = 0x8833;
  pub const GL_DRAW_BUFFER15: GLenum = 0x8834;
  pub const GL_DRAW_BUFFER1: GLenum = 0x8826;
  pub const GL_DRAW_BUFFER2: GLenum = 0x8827;
  pub const GL_DRAW_BUFFER3: GLenum = 0x8828;
  pub const GL_DRAW_BUFFER4: GLenum = 0x8829;
  pub const GL_DRAW_BUFFER5: GLenum = 0x882A;
  pub const GL_DRAW_BUFFER6: GLenum = 0x882B;
  pub const GL_DRAW_BUFFER7: GLenum = 0x882C;
  pub const GL_DRAW_BUFFER8: GLenum = 0x882D;
  pub const GL_DRAW_BUFFER9: GLenum = 0x882E;
  pub const GL_DRAW_BUFFER: GLenum = 0xC01;
  pub const GL_DRAW_FRAMEBUFFER: GLenum = 0x8CA9;
  pub const GL_DRAW_FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
  pub const GL_DST_ALPHA: GLenum = 0x304;
  pub const GL_DST_COLOR: GLenum = 0x306;
  pub const GL_DYNAMIC_COPY: GLenum = 0x88EA;
  pub const GL_DYNAMIC_DRAW: GLenum = 0x88E8;
  pub const GL_DYNAMIC_READ: GLenum = 0x88E9;
  pub const GL_ELEMENT_ARRAY_BUFFER: GLenum = 0x8893;
  pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: GLenum = 0x8895;
  pub const GL_EQUAL: GLenum = 0x202;
  pub const GL_EQUIV: GLenum = 0x1509;
  pub const GL_EXTENSIONS: GLenum = 0x1F03;
  pub const GL_FALSE: GLenum = 0x0;
  pub const GL_FASTEST: GLenum = 0x1101;
  pub const GL_FILL: GLenum = 0x1B02;
  pub const GL_FIRST_VERTEX_CONVENTION: GLenum = 0x8E4D;
  pub const GL_FIXED_ONLY: GLenum = 0x891D;
  pub const GL_FLOAT: GLenum = 0x1406;
  pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum = 0x8DAD;
  pub const GL_FLOAT_MAT2: GLenum = 0x8B5A;
  pub const GL_FLOAT_MAT2x3: GLenum = 0x8B65;
  pub const GL_FLOAT_MAT2x4: GLenum = 0x8B66;
  pub const GL_FLOAT_MAT3: GLenum = 0x8B5B;
  pub const GL_FLOAT_MAT3x2: GLenum = 0x8B67;
  pub const GL_FLOAT_MAT3x4: GLenum = 0x8B68;
  pub const GL_FLOAT_MAT4: GLenum = 0x8B5C;
  pub const GL_FLOAT_MAT4x2: GLenum = 0x8B69;
  pub const GL_FLOAT_MAT4x3: GLenum = 0x8B6A;
  pub const GL_FLOAT_VEC2: GLenum = 0x8B50;
  pub const GL_FLOAT_VEC3: GLenum = 0x8B51;
  pub const GL_FLOAT_VEC4: GLenum = 0x8B52;
  pub const GL_FRAGMENT_SHADER: GLenum = 0x8B30;
  pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum = 0x8B8B;
  pub const GL_FRAMEBUFFER: GLenum = 0x8D40;
  pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum = 0x8215;
  pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum = 0x8214;
  pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum = 0x8210;
  pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum = 0x8211;
  pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum = 0x8216;
  pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum = 0x8213;
  pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED: GLenum = 0x8DA7;
  pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum = 0x8CD1;
  pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum = 0x8CD0;
  pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum = 0x8212;
  pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum = 0x8217;
  pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = 0x8CD3;
  pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum = 0x8CD4;
  pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum = 0x8CD2;
  pub const GL_FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
  pub const GL_FRAMEBUFFER_COMPLETE: GLenum = 0x8CD5;
  pub const GL_FRAMEBUFFER_DEFAULT: GLenum = 0x8218;
  pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum = 0x8CD6;
  pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: GLenum = 0x8CDB;
  pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: GLenum = 0x8DA8;
  pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = 0x8CD7;
  pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum = 0x8D56;
  pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: GLenum = 0x8CDC;
  pub const GL_FRAMEBUFFER_SRGB: GLenum = 0x8DB9;
  pub const GL_FRAMEBUFFER_UNDEFINED: GLenum = 0x8219;
  pub const GL_FRAMEBUFFER_UNSUPPORTED: GLenum = 0x8CDD;
  pub const GL_FRONT: GLenum = 0x404;
  pub const GL_FRONT_AND_BACK: GLenum = 0x408;
  pub const GL_FRONT_FACE: GLenum = 0xB46;
  pub const GL_FRONT_LEFT: GLenum = 0x400;
  pub const GL_FRONT_RIGHT: GLenum = 0x401;
  pub const GL_FUNC_ADD: GLenum = 0x8006;
  pub const GL_FUNC_REVERSE_SUBTRACT: GLenum = 0x800B;
  pub const GL_FUNC_SUBTRACT: GLenum = 0x800A;
  pub const GL_GEOMETRY_INPUT_TYPE: GLenum = 0x8917;
  pub const GL_GEOMETRY_OUTPUT_TYPE: GLenum = 0x8918;
  pub const GL_GEOMETRY_SHADER: GLenum = 0x8DD9;
  pub const GL_GEOMETRY_VERTICES_OUT: GLenum = 0x8916;
  pub const GL_GEQUAL: GLenum = 0x206;
  pub const GL_GREATER: GLenum = 0x204;
  pub const GL_GREEN: GLenum = 0x1904;
  pub const GL_GREEN_INTEGER: GLenum = 0x8D95;
  pub const GL_HALF_FLOAT: GLenum = 0x140B;
  pub const GL_INCR: GLenum = 0x1E02;
  pub const GL_INCR_WRAP: GLenum = 0x8507;
  pub const GL_INFO_LOG_LENGTH: GLenum = 0x8B84;
  pub const GL_INT: GLenum = 0x1404;
  pub const GL_INTERLEAVED_ATTRIBS: GLenum = 0x8C8C;
  pub const GL_INT_2_10_10_10_REV: GLenum = 0x8D9F;
  pub const GL_INT_SAMPLER_1D: GLenum = 0x8DC9;
  pub const GL_INT_SAMPLER_1D_ARRAY: GLenum = 0x8DCE;
  pub const GL_INT_SAMPLER_2D: GLenum = 0x8DCA;
  pub const GL_INT_SAMPLER_2D_ARRAY: GLenum = 0x8DCF;
  pub const GL_INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x9109;
  pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910C;
  pub const GL_INT_SAMPLER_2D_RECT: GLenum = 0x8DCD;
  pub const GL_INT_SAMPLER_3D: GLenum = 0x8DCB;
  pub const GL_INT_SAMPLER_BUFFER: GLenum = 0x8DD0;
  pub const GL_INT_SAMPLER_CUBE: GLenum = 0x8DCC;
  pub const GL_INT_VEC2: GLenum = 0x8B53;
  pub const GL_INT_VEC3: GLenum = 0x8B54;
  pub const GL_INT_VEC4: GLenum = 0x8B55;
  pub const GL_INVALID_ENUM: GLenum = 0x500;
  pub const GL_INVALID_FRAMEBUFFER_OPERATION: GLenum = 0x506;
  pub const GL_INVALID_INDEX: GLenum = 0xFFFFFFFF;
  pub const GL_INVALID_OPERATION: GLenum = 0x502;
  pub const GL_INVALID_VALUE: GLenum = 0x501;
  pub const GL_INVERT: GLenum = 0x150A;
  pub const GL_KEEP: GLenum = 0x1E00;
  pub const GL_LAST_VERTEX_CONVENTION: GLenum = 0x8E4E;
  pub const GL_LEFT: GLenum = 0x406;
  pub const GL_LEQUAL: GLenum = 0x203;
  pub const GL_LESS: GLenum = 0x201;
  pub const GL_LINE: GLenum = 0x1B01;
  pub const GL_LINEAR: GLenum = 0x2601;
  pub const GL_LINEAR_MIPMAP_LINEAR: GLenum = 0x2703;
  pub const GL_LINEAR_MIPMAP_NEAREST: GLenum = 0x2701;
  pub const GL_LINES: GLenum = 0x1;
  pub const GL_LINES_ADJACENCY: GLenum = 0xA;
  pub const GL_LINE_LOOP: GLenum = 0x2;
  pub const GL_LINE_SMOOTH: GLenum = 0xB20;
  pub const GL_LINE_SMOOTH_HINT: GLenum = 0xC52;
  pub const GL_LINE_STRIP: GLenum = 0x3;
  pub const GL_LINE_STRIP_ADJACENCY: GLenum = 0xB;
  pub const GL_LINE_WIDTH: GLenum = 0xB21;
  pub const GL_LINE_WIDTH_GRANULARITY: GLenum = 0xB23;
  pub const GL_LINE_WIDTH_RANGE: GLenum = 0xB22;
  pub const GL_LINK_STATUS: GLenum = 0x8B82;
  pub const GL_LOGIC_OP_MODE: GLenum = 0xBF0;
  pub const GL_LOWER_LEFT: GLenum = 0x8CA1;
  pub const GL_MAJOR_VERSION: GLenum = 0x821B;
  pub const GL_MAP_FLUSH_EXPLICIT_BIT: GLbitfield = 0x00000010;
  pub const GL_MAP_INVALIDATE_BUFFER_BIT: GLbitfield = 0x00000008;
  pub const GL_MAP_INVALIDATE_RANGE_BIT: GLbitfield = 0x00000004;
  pub const GL_MAP_READ_BIT: GLbitfield = 0x00000001;
  pub const GL_MAP_UNSYNCHRONIZED_BIT: GLbitfield = 0x00000020;
  pub const GL_MAP_WRITE_BIT: GLbitfield = 0x00000002;
  pub const GL_MAX: GLenum = 0x8008;
  pub const GL_MAX_3D_TEXTURE_SIZE: GLenum = 0x8073;
  pub const GL_MAX_ARRAY_TEXTURE_LAYERS: GLenum = 0x88FF;
  pub const GL_MAX_CLIP_DISTANCES: GLenum = 0xD32;
  pub const GL_MAX_COLOR_ATTACHMENTS: GLenum = 0x8CDF;
  pub const GL_MAX_COLOR_TEXTURE_SAMPLES: GLenum = 0x910E;
  pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8A33;
  pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: GLenum = 0x8A32;
  pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4D;
  pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: GLenum = 0x8A2E;
  pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8A31;
  pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: GLenum = 0x851C;
  pub const GL_MAX_DEPTH_TEXTURE_SAMPLES: GLenum = 0x910F;
  pub const GL_MAX_DRAW_BUFFERS: GLenum = 0x8824;
  pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: GLenum = 0x88FC;
  pub const GL_MAX_ELEMENTS_INDICES: GLenum = 0x80E9;
  pub const GL_MAX_ELEMENTS_VERTICES: GLenum = 0x80E8;
  pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: GLenum = 0x9125;
  pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum = 0x8A2D;
  pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8B49;
  pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS: GLenum = 0x9123;
  pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: GLenum = 0x9124;
  pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES: GLenum = 0x8DE0;
  pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: GLenum = 0x8C29;
  pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: GLenum = 0x8DE1;
  pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS: GLenum = 0x8A2C;
  pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: GLenum = 0x8DDF;
  pub const GL_MAX_INTEGER_SAMPLES: GLenum = 0x9110;
  pub const GL_MAX_PROGRAM_TEXEL_OFFSET: GLenum = 0x8905;
  pub const GL_MAX_RECTANGLE_TEXTURE_SIZE: GLenum = 0x84F8;
  pub const GL_MAX_RENDERBUFFER_SIZE: GLenum = 0x84E8;
  pub const GL_MAX_SAMPLES: GLenum = 0x8D57;
  pub const GL_MAX_SAMPLE_MASK_WORDS: GLenum = 0x8E59;
  pub const GL_MAX_SERVER_WAIT_TIMEOUT: GLenum = 0x9111;
  pub const GL_MAX_TEXTURE_BUFFER_SIZE: GLenum = 0x8C2B;
  pub const GL_MAX_TEXTURE_IMAGE_UNITS: GLenum = 0x8872;
  pub const GL_MAX_TEXTURE_LOD_BIAS: GLenum = 0x84FD;
  pub const GL_MAX_TEXTURE_SIZE: GLenum = 0xD33;
  pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum = 0x8C8A;
  pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum = 0x8C8B;
  pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum = 0x8C80;
  pub const GL_MAX_UNIFORM_BLOCK_SIZE: GLenum = 0x8A30;
  pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: GLenum = 0x8A2F;
  pub const GL_MAX_VARYING_COMPONENTS: GLenum = 0x8B4B;
  pub const GL_MAX_VARYING_FLOATS: GLenum = 0x8B4B;
  pub const GL_MAX_VERTEX_ATTRIBS: GLenum = 0x8869;
  pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: GLenum = 0x9122;
  pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4C;
  pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: GLenum = 0x8A2B;
  pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8B4A;
  pub const GL_MAX_VIEWPORT_DIMS: GLenum = 0xD3A;
  pub const GL_MIN: GLenum = 0x8007;
  pub const GL_MINOR_VERSION: GLenum = 0x821C;
  pub const GL_MIN_PROGRAM_TEXEL_OFFSET: GLenum = 0x8904;
  pub const GL_MIRRORED_REPEAT: GLenum = 0x8370;
  pub const GL_MULTISAMPLE: GLenum = 0x809D;
  pub const GL_NAND: GLenum = 0x150E;
  pub const GL_NEAREST: GLenum = 0x2600;
  pub const GL_NEAREST_MIPMAP_LINEAR: GLenum = 0x2702;
  pub const GL_NEAREST_MIPMAP_NEAREST: GLenum = 0x2700;
  pub const GL_NEVER: GLenum = 0x200;
  pub const GL_NICEST: GLenum = 0x1102;
  pub const GL_NONE: GLenum = 0x0;
  pub const GL_NOOP: GLenum = 0x1505;
  pub const GL_NOR: GLenum = 0x1508;
  pub const GL_NOTEQUAL: GLenum = 0x205;
  pub const GL_NO_ERROR: GLenum = 0x0;
  pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A2;
  pub const GL_NUM_EXTENSIONS: GLenum = 0x821D;
  pub const GL_OBJECT_TYPE: GLenum = 0x9112;
  pub const GL_ONE: GLenum = 0x1;
  pub const GL_ONE_MINUS_CONSTANT_ALPHA: GLenum = 0x8004;
  pub const GL_ONE_MINUS_CONSTANT_COLOR: GLenum = 0x8002;
  pub const GL_ONE_MINUS_DST_ALPHA: GLenum = 0x305;
  pub const GL_ONE_MINUS_DST_COLOR: GLenum = 0x307;
  pub const GL_ONE_MINUS_SRC1_ALPHA: GLenum = 0x88FB;
  pub const GL_ONE_MINUS_SRC1_COLOR: GLenum = 0x88FA;
  pub const GL_ONE_MINUS_SRC_ALPHA: GLenum = 0x303;
  pub const GL_ONE_MINUS_SRC_COLOR: GLenum = 0x301;
  pub const GL_OR: GLenum = 0x1507;
  pub const GL_OR_INVERTED: GLenum = 0x150D;
  pub const GL_OR_REVERSE: GLenum = 0x150B;
  pub const GL_OUT_OF_MEMORY: GLenum = 0x505;
  pub const GL_PACK_ALIGNMENT: GLenum = 0xD05;
  pub const GL_PACK_IMAGE_HEIGHT: GLenum = 0x806C;
  pub const GL_PACK_LSB_FIRST: GLenum = 0xD01;
  pub const GL_PACK_ROW_LENGTH: GLenum = 0xD02;
  pub const GL_PACK_SKIP_IMAGES: GLenum = 0x806B;
  pub const GL_PACK_SKIP_PIXELS: GLenum = 0xD04;
  pub const GL_PACK_SKIP_ROWS: GLenum = 0xD03;
  pub const GL_PACK_SWAP_BYTES: GLenum = 0xD00;
  pub const GL_PIXEL_PACK_BUFFER: GLenum = 0x88EB;
  pub const GL_PIXEL_PACK_BUFFER_BINDING: GLenum = 0x88ED;
  pub const GL_PIXEL_UNPACK_BUFFER: GLenum = 0x88EC;
  pub const GL_PIXEL_UNPACK_BUFFER_BINDING: GLenum = 0x88EF;
  pub const GL_POINT: GLenum = 0x1B00;
  pub const GL_POINTS: GLenum = 0x0;
  pub const GL_POINT_FADE_THRESHOLD_SIZE: GLenum = 0x8128;
  pub const GL_POINT_SIZE: GLenum = 0xB11;
  pub const GL_POINT_SIZE_GRANULARITY: GLenum = 0xB13;
  pub const GL_POINT_SIZE_RANGE: GLenum = 0xB12;
  pub const GL_POINT_SPRITE_COORD_ORIGIN: GLenum = 0x8CA0;
  pub const GL_POLYGON_MODE: GLenum = 0xB40;
  pub const GL_POLYGON_OFFSET_FACTOR: GLenum = 0x8038;
  pub const GL_POLYGON_OFFSET_FILL: GLenum = 0x8037;
  pub const GL_POLYGON_OFFSET_LINE: GLenum = 0x2A02;
  pub const GL_POLYGON_OFFSET_POINT: GLenum = 0x2A01;
  pub const GL_POLYGON_OFFSET_UNITS: GLenum = 0x2A00;
  pub const GL_POLYGON_SMOOTH: GLenum = 0xB41;
  pub const GL_POLYGON_SMOOTH_HINT: GLenum = 0xC53;
  pub const GL_PRIMITIVES_GENERATED: GLenum = 0x8C87;
  pub const GL_PRIMITIVE_RESTART: GLenum = 0x8F9D;
  pub const GL_PRIMITIVE_RESTART_INDEX: GLenum = 0x8F9E;
  pub const GL_PROGRAM_POINT_SIZE: GLenum = 0x8642;
  pub const GL_PROVOKING_VERTEX: GLenum = 0x8E4F;
  pub const GL_PROXY_TEXTURE_1D: GLenum = 0x8063;
  pub const GL_PROXY_TEXTURE_1D_ARRAY: GLenum = 0x8C19;
  pub const GL_PROXY_TEXTURE_2D: GLenum = 0x8064;
  pub const GL_PROXY_TEXTURE_2D_ARRAY: GLenum = 0x8C1B;
  pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE: GLenum = 0x9101;
  pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9103;
  pub const GL_PROXY_TEXTURE_3D: GLenum = 0x8070;
  pub const GL_PROXY_TEXTURE_CUBE_MAP: GLenum = 0x851B;
  pub const GL_PROXY_TEXTURE_RECTANGLE: GLenum = 0x84F7;
  pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: GLenum = 0x8E4C;
  pub const GL_QUERY_BY_REGION_NO_WAIT: GLenum = 0x8E16;
  pub const GL_QUERY_BY_REGION_WAIT: GLenum = 0x8E15;
  pub const GL_QUERY_COUNTER_BITS: GLenum = 0x8864;
  pub const GL_QUERY_NO_WAIT: GLenum = 0x8E14;
  pub const GL_QUERY_RESULT: GLenum = 0x8866;
  pub const GL_QUERY_RESULT_AVAILABLE: GLenum = 0x8867;
  pub const GL_QUERY_WAIT: GLenum = 0x8E13;
  pub const GL_R11F_G11F_B10F: GLenum = 0x8C3A;
  pub const GL_R16: GLenum = 0x822A;
  pub const GL_R16F: GLenum = 0x822D;
  pub const GL_R16I: GLenum = 0x8233;
  pub const GL_R16UI: GLenum = 0x8234;
  pub const GL_R16_SNORM: GLenum = 0x8F98;
  pub const GL_R32F: GLenum = 0x822E;
  pub const GL_R32I: GLenum = 0x8235;
  pub const GL_R32UI: GLenum = 0x8236;
  pub const GL_R3_G3_B2: GLenum = 0x2A10;
  pub const GL_R8: GLenum = 0x8229;
  pub const GL_R8I: GLenum = 0x8231;
  pub const GL_R8UI: GLenum = 0x8232;
  pub const GL_R8_SNORM: GLenum = 0x8F94;
  pub const GL_RASTERIZER_DISCARD: GLenum = 0x8C89;
  pub const GL_READ_BUFFER: GLenum = 0xC02;
  pub const GL_READ_FRAMEBUFFER: GLenum = 0x8CA8;
  pub const GL_READ_FRAMEBUFFER_BINDING: GLenum = 0x8CAA;
  pub const GL_READ_ONLY: GLenum = 0x88B8;
  pub const GL_READ_WRITE: GLenum = 0x88BA;
  pub const GL_RED: GLenum = 0x1903;
  pub const GL_RED_INTEGER: GLenum = 0x8D94;
  pub const GL_RENDERBUFFER: GLenum = 0x8D41;
  pub const GL_RENDERBUFFER_ALPHA_SIZE: GLenum = 0x8D53;
  pub const GL_RENDERBUFFER_BINDING: GLenum = 0x8CA7;
  pub const GL_RENDERBUFFER_BLUE_SIZE: GLenum = 0x8D52;
  pub const GL_RENDERBUFFER_DEPTH_SIZE: GLenum = 0x8D54;
  pub const GL_RENDERBUFFER_GREEN_SIZE: GLenum = 0x8D51;
  pub const GL_RENDERBUFFER_HEIGHT: GLenum = 0x8D43;
  pub const GL_RENDERBUFFER_INTERNAL_FORMAT: GLenum = 0x8D44;
  pub const GL_RENDERBUFFER_RED_SIZE: GLenum = 0x8D50;
  pub const GL_RENDERBUFFER_SAMPLES: GLenum = 0x8CAB;
  pub const GL_RENDERBUFFER_STENCIL_SIZE: GLenum = 0x8D55;
  pub const GL_RENDERBUFFER_WIDTH: GLenum = 0x8D42;
  pub const GL_RENDERER: GLenum = 0x1F01;
  pub const GL_REPEAT: GLenum = 0x2901;
  pub const GL_REPLACE: GLenum = 0x1E01;
  pub const GL_RG16: GLenum = 0x822C;
  pub const GL_RG16F: GLenum = 0x822F;
  pub const GL_RG16I: GLenum = 0x8239;
  pub const GL_RG16UI: GLenum = 0x823A;
  pub const GL_RG16_SNORM: GLenum = 0x8F99;
  pub const GL_RG32F: GLenum = 0x8230;
  pub const GL_RG32I: GLenum = 0x823B;
  pub const GL_RG32UI: GLenum = 0x823C;
  pub const GL_RG8: GLenum = 0x822B;
  pub const GL_RG8I: GLenum = 0x8237;
  pub const GL_RG8UI: GLenum = 0x8238;
  pub const GL_RG8_SNORM: GLenum = 0x8F95;
  pub const GL_RG: GLenum = 0x8227;
  pub const GL_RGB10: GLenum = 0x8052;
  pub const GL_RGB10_A2: GLenum = 0x8059;
  pub const GL_RGB10_A2UI: GLenum = 0x906F;
  pub const GL_RGB12: GLenum = 0x8053;
  pub const GL_RGB16: GLenum = 0x8054;
  pub const GL_RGB16F: GLenum = 0x881B;
  pub const GL_RGB16I: GLenum = 0x8D89;
  pub const GL_RGB16UI: GLenum = 0x8D77;
  pub const GL_RGB16_SNORM: GLenum = 0x8F9A;
  pub const GL_RGB32F: GLenum = 0x8815;
  pub const GL_RGB32I: GLenum = 0x8D83;
  pub const GL_RGB32UI: GLenum = 0x8D71;
  pub const GL_RGB4: GLenum = 0x804F;
  pub const GL_RGB5: GLenum = 0x8050;
  pub const GL_RGB5_A1: GLenum = 0x8057;
  pub const GL_RGB8: GLenum = 0x8051;
  pub const GL_RGB8I: GLenum = 0x8D8F;
  pub const GL_RGB8UI: GLenum = 0x8D7D;
  pub const GL_RGB8_SNORM: GLenum = 0x8F96;
  pub const GL_RGB9_E5: GLenum = 0x8C3D;
  pub const GL_RGB: GLenum = 0x1907;
  pub const GL_RGBA12: GLenum = 0x805A;
  pub const GL_RGBA16: GLenum = 0x805B;
  pub const GL_RGBA16F: GLenum = 0x881A;
  pub const GL_RGBA16I: GLenum = 0x8D88;
  pub const GL_RGBA16UI: GLenum = 0x8D76;
  pub const GL_RGBA16_SNORM: GLenum = 0x8F9B;
  pub const GL_RGBA2: GLenum = 0x8055;
  pub const GL_RGBA32F: GLenum = 0x8814;
  pub const GL_RGBA32I: GLenum = 0x8D82;
  pub const GL_RGBA32UI: GLenum = 0x8D70;
  pub const GL_RGBA4: GLenum = 0x8056;
  pub const GL_RGBA8: GLenum = 0x8058;
  pub const GL_RGBA8I: GLenum = 0x8D8E;
  pub const GL_RGBA8UI: GLenum = 0x8D7C;
  pub const GL_RGBA8_SNORM: GLenum = 0x8F97;
  pub const GL_RGBA: GLenum = 0x1908;
  pub const GL_RGBA_INTEGER: GLenum = 0x8D99;
  pub const GL_RGB_INTEGER: GLenum = 0x8D98;
  pub const GL_RG_INTEGER: GLenum = 0x8228;
  pub const GL_RIGHT: GLenum = 0x407;
  pub const GL_SAMPLER_1D: GLenum = 0x8B5D;
  pub const GL_SAMPLER_1D_ARRAY: GLenum = 0x8DC0;
  pub const GL_SAMPLER_1D_ARRAY_SHADOW: GLenum = 0x8DC3;
  pub const GL_SAMPLER_1D_SHADOW: GLenum = 0x8B61;
  pub const GL_SAMPLER_2D: GLenum = 0x8B5E;
  pub const GL_SAMPLER_2D_ARRAY: GLenum = 0x8DC1;
  pub const GL_SAMPLER_2D_ARRAY_SHADOW: GLenum = 0x8DC4;
  pub const GL_SAMPLER_2D_MULTISAMPLE: GLenum = 0x9108;
  pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910B;
  pub const GL_SAMPLER_2D_RECT: GLenum = 0x8B63;
  pub const GL_SAMPLER_2D_RECT_SHADOW: GLenum = 0x8B64;
  pub const GL_SAMPLER_2D_SHADOW: GLenum = 0x8B62;
  pub const GL_SAMPLER_3D: GLenum = 0x8B5F;
  pub const GL_SAMPLER_BINDING: GLenum = 0x8919;
  pub const GL_SAMPLER_BUFFER: GLenum = 0x8DC2;
  pub const GL_SAMPLER_CUBE: GLenum = 0x8B60;
  pub const GL_SAMPLER_CUBE_SHADOW: GLenum = 0x8DC5;
  pub const GL_SAMPLES: GLenum = 0x80A9;
  pub const GL_SAMPLES_PASSED: GLenum = 0x8914;
  pub const GL_SAMPLE_ALPHA_TO_COVERAGE: GLenum = 0x809E;
  pub const GL_SAMPLE_ALPHA_TO_ONE: GLenum = 0x809F;
  pub const GL_SAMPLE_BUFFERS: GLenum = 0x80A8;
  pub const GL_SAMPLE_COVERAGE: GLenum = 0x80A0;
  pub const GL_SAMPLE_COVERAGE_INVERT: GLenum = 0x80AB;
  pub const GL_SAMPLE_COVERAGE_VALUE: GLenum = 0x80AA;
  pub const GL_SAMPLE_MASK: GLenum = 0x8E51;
  pub const GL_SAMPLE_MASK_VALUE: GLenum = 0x8E52;
  pub const GL_SAMPLE_POSITION: GLenum = 0x8E50;
  pub const GL_SCISSOR_BOX: GLenum = 0xC10;
  pub const GL_SCISSOR_TEST: GLenum = 0xC11;
  pub const GL_SEPARATE_ATTRIBS: GLenum = 0x8C8D;
  pub const GL_SET: GLenum = 0x150F;
  pub const GL_SHADER_SOURCE_LENGTH: GLenum = 0x8B88;
  pub const GL_SHADER_TYPE: GLenum = 0x8B4F;
  pub const GL_SHADING_LANGUAGE_VERSION: GLenum = 0x8B8C;
  pub const GL_SHORT: GLenum = 0x1402;
  pub const GL_SIGNALED: GLenum = 0x9119;
  pub const GL_SIGNED_NORMALIZED: GLenum = 0x8F9C;
  pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY: GLenum = 0xB23;
  pub const GL_SMOOTH_LINE_WIDTH_RANGE: GLenum = 0xB22;
  pub const GL_SMOOTH_POINT_SIZE_GRANULARITY: GLenum = 0xB13;
  pub const GL_SMOOTH_POINT_SIZE_RANGE: GLenum = 0xB12;
  pub const GL_SRC1_ALPHA: GLenum = 0x8589;
  pub const GL_SRC1_COLOR: GLenum = 0x88F9;
  pub const GL_SRC_ALPHA: GLenum = 0x302;
  pub const GL_SRC_ALPHA_SATURATE: GLenum = 0x308;
  pub const GL_SRC_COLOR: GLenum = 0x300;
  pub const GL_SRGB8: GLenum = 0x8C41;
  pub const GL_SRGB8_ALPHA8: GLenum = 0x8C43;
  pub const GL_SRGB: GLenum = 0x8C40;
  pub const GL_SRGB_ALPHA: GLenum = 0x8C42;
  pub const GL_STATIC_COPY: GLenum = 0x88E6;
  pub const GL_STATIC_DRAW: GLenum = 0x88E4;
  pub const GL_STATIC_READ: GLenum = 0x88E5;
  pub const GL_STENCIL: GLenum = 0x1802;
  pub const GL_STENCIL_ATTACHMENT: GLenum = 0x8D20;
  pub const GL_STENCIL_BACK_FAIL: GLenum = 0x8801;
  pub const GL_STENCIL_BACK_FUNC: GLenum = 0x8800;
  pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: GLenum = 0x8802;
  pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: GLenum = 0x8803;
  pub const GL_STENCIL_BACK_REF: GLenum = 0x8CA3;
  pub const GL_STENCIL_BACK_VALUE_MASK: GLenum = 0x8CA4;
  pub const GL_STENCIL_BACK_WRITEMASK: GLenum = 0x8CA5;
  pub const GL_STENCIL_BUFFER_BIT: GLbitfield = 0x00000400;
  pub const GL_STENCIL_CLEAR_VALUE: GLenum = 0xB91;
  pub const GL_STENCIL_FAIL: GLenum = 0xB94;
  pub const GL_STENCIL_FUNC: GLenum = 0xB92;
  pub const GL_STENCIL_INDEX16: GLenum = 0x8D49;
  pub const GL_STENCIL_INDEX1: GLenum = 0x8D46;
  pub const GL_STENCIL_INDEX4: GLenum = 0x8D47;
  pub const GL_STENCIL_INDEX8: GLenum = 0x8D48;
  pub const GL_STENCIL_INDEX: GLenum = 0x1901;
  pub const GL_STENCIL_PASS_DEPTH_FAIL: GLenum = 0xB95;
  pub const GL_STENCIL_PASS_DEPTH_PASS: GLenum = 0xB96;
  pub const GL_STENCIL_REF: GLenum = 0xB97;
  pub const GL_STENCIL_TEST: GLenum = 0xB90;
  pub const GL_STENCIL_VALUE_MASK: GLenum = 0xB93;
  pub const GL_STENCIL_WRITEMASK: GLenum = 0xB98;
  pub const GL_STEREO: GLenum = 0xC33;
  pub const GL_STREAM_COPY: GLenum = 0x88E2;
  pub const GL_STREAM_DRAW: GLenum = 0x88E0;
  pub const GL_STREAM_READ: GLenum = 0x88E1;
  pub const GL_SUBPIXEL_BITS: GLenum = 0xD50;
  pub const GL_SYNC_CONDITION: GLenum = 0x9113;
  pub const GL_SYNC_FENCE: GLenum = 0x9116;
  pub const GL_SYNC_FLAGS: GLenum = 0x9115;
  pub const GL_SYNC_FLUSH_COMMANDS_BIT: GLbitfield = 0x00000001;
  pub const GL_SYNC_GPU_COMMANDS_COMPLETE: GLenum = 0x9117;
  pub const GL_SYNC_STATUS: GLenum = 0x9114;
  pub const GL_TEXTURE0: GLenum = 0x84C0;
  pub const GL_TEXTURE10: GLenum = 0x84CA;
  pub const GL_TEXTURE11: GLenum = 0x84CB;
  pub const GL_TEXTURE12: GLenum = 0x84CC;
  pub const GL_TEXTURE13: GLenum = 0x84CD;
  pub const GL_TEXTURE14: GLenum = 0x84CE;
  pub const GL_TEXTURE15: GLenum = 0x84CF;
  pub const GL_TEXTURE16: GLenum = 0x84D0;
  pub const GL_TEXTURE17: GLenum = 0x84D1;
  pub const GL_TEXTURE18: GLenum = 0x84D2;
  pub const GL_TEXTURE19: GLenum = 0x84D3;
  pub const GL_TEXTURE1: GLenum = 0x84C1;
  pub const GL_TEXTURE20: GLenum = 0x84D4;
  pub const GL_TEXTURE21: GLenum = 0x84D5;
  pub const GL_TEXTURE22: GLenum = 0x84D6;
  pub const GL_TEXTURE23: GLenum = 0x84D7;
  pub const GL_TEXTURE24: GLenum = 0x84D8;
  pub const GL_TEXTURE25: GLenum = 0x84D9;
  pub const GL_TEXTURE26: GLenum = 0x84DA;
  pub const GL_TEXTURE27: GLenum = 0x84DB;
  pub const GL_TEXTURE28: GLenum = 0x84DC;
  pub const GL_TEXTURE29: GLenum = 0x84DD;
  pub const GL_TEXTURE2: GLenum = 0x84C2;
  pub const GL_TEXTURE30: GLenum = 0x84DE;
  pub const GL_TEXTURE31: GLenum = 0x84DF;
  pub const GL_TEXTURE3: GLenum = 0x84C3;
  pub const GL_TEXTURE4: GLenum = 0x84C4;
  pub const GL_TEXTURE5: GLenum = 0x84C5;
  pub const GL_TEXTURE6: GLenum = 0x84C6;
  pub const GL_TEXTURE7: GLenum = 0x84C7;
  pub const GL_TEXTURE8: GLenum = 0x84C8;
  pub const GL_TEXTURE9: GLenum = 0x84C9;
  pub const GL_TEXTURE: GLenum = 0x1702;
  pub const GL_TEXTURE_1D: GLenum = 0xDE0;
  pub const GL_TEXTURE_1D_ARRAY: GLenum = 0x8C18;
  pub const GL_TEXTURE_2D: GLenum = 0xDE1;
  pub const GL_TEXTURE_2D_ARRAY: GLenum = 0x8C1A;
  pub const GL_TEXTURE_2D_MULTISAMPLE: GLenum = 0x9100;
  pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9102;
  pub const GL_TEXTURE_3D: GLenum = 0x806F;
  pub const GL_TEXTURE_ALPHA_SIZE: GLenum = 0x805F;
  pub const GL_TEXTURE_ALPHA_TYPE: GLenum = 0x8C13;
  pub const GL_TEXTURE_BASE_LEVEL: GLenum = 0x813C;
  pub const GL_TEXTURE_BINDING_1D: GLenum = 0x8068;
  pub const GL_TEXTURE_BINDING_1D_ARRAY: GLenum = 0x8C1C;
  pub const GL_TEXTURE_BINDING_2D: GLenum = 0x8069;
  pub const GL_TEXTURE_BINDING_2D_ARRAY: GLenum = 0x8C1D;
  pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE: GLenum = 0x9104;
  pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: GLenum = 0x9105;
  pub const GL_TEXTURE_BINDING_3D: GLenum = 0x806A;
  pub const GL_TEXTURE_BINDING_BUFFER: GLenum = 0x8C2C;
  pub const GL_TEXTURE_BINDING_CUBE_MAP: GLenum = 0x8514;
  pub const GL_TEXTURE_BINDING_RECTANGLE: GLenum = 0x84F6;
  pub const GL_TEXTURE_BLUE_SIZE: GLenum = 0x805E;
  pub const GL_TEXTURE_BLUE_TYPE: GLenum = 0x8C12;
  pub const GL_TEXTURE_BORDER_COLOR: GLenum = 0x1004;
  pub const GL_TEXTURE_BUFFER: GLenum = 0x8C2A;
  pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING: GLenum = 0x8C2D;
  pub const GL_TEXTURE_COMPARE_FUNC: GLenum = 0x884D;
  pub const GL_TEXTURE_COMPARE_MODE: GLenum = 0x884C;
  pub const GL_TEXTURE_COMPRESSED: GLenum = 0x86A1;
  pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE: GLenum = 0x86A0;
  pub const GL_TEXTURE_COMPRESSION_HINT: GLenum = 0x84EF;
  pub const GL_TEXTURE_CUBE_MAP: GLenum = 0x8513;
  pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum = 0x8516;
  pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum = 0x8518;
  pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum = 0x851A;
  pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: GLenum = 0x8515;
  pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum = 0x8517;
  pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum = 0x8519;
  pub const GL_TEXTURE_CUBE_MAP_SEAMLESS: GLenum = 0x884F;
  pub const GL_TEXTURE_DEPTH: GLenum = 0x8071;
  pub const GL_TEXTURE_DEPTH_SIZE: GLenum = 0x884A;
  pub const GL_TEXTURE_DEPTH_TYPE: GLenum = 0x8C16;
  pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9107;
  pub const GL_TEXTURE_GREEN_SIZE: GLenum = 0x805D;
  pub const GL_TEXTURE_GREEN_TYPE: GLenum = 0x8C11;
  pub const GL_TEXTURE_HEIGHT: GLenum = 0x1001;
  pub const GL_TEXTURE_INTERNAL_FORMAT: GLenum = 0x1003;
  pub const GL_TEXTURE_LOD_BIAS: GLenum = 0x8501;
  pub const GL_TEXTURE_MAG_FILTER: GLenum = 0x2800;
  pub const GL_TEXTURE_MAX_LEVEL: GLenum = 0x813D;
  pub const GL_TEXTURE_MAX_LOD: GLenum = 0x813B;
  pub const GL_TEXTURE_MIN_FILTER: GLenum = 0x2801;
  pub const GL_TEXTURE_MIN_LOD: GLenum = 0x813A;
  pub const GL_TEXTURE_RECTANGLE: GLenum = 0x84F5;
  pub const GL_TEXTURE_RED_SIZE: GLenum = 0x805C;
  pub const GL_TEXTURE_RED_TYPE: GLenum = 0x8C10;
  pub const GL_TEXTURE_SAMPLES: GLenum = 0x9106;
  pub const GL_TEXTURE_SHARED_SIZE: GLenum = 0x8C3F;
  pub const GL_TEXTURE_STENCIL_SIZE: GLenum = 0x88F1;
  pub const GL_TEXTURE_SWIZZLE_A: GLenum = 0x8E45;
  pub const GL_TEXTURE_SWIZZLE_B: GLenum = 0x8E44;
  pub const GL_TEXTURE_SWIZZLE_G: GLenum = 0x8E43;
  pub const GL_TEXTURE_SWIZZLE_R: GLenum = 0x8E42;
  pub const GL_TEXTURE_SWIZZLE_RGBA: GLenum = 0x8E46;
  pub const GL_TEXTURE_WIDTH: GLenum = 0x1000;
  pub const GL_TEXTURE_WRAP_R: GLenum = 0x8072;
  pub const GL_TEXTURE_WRAP_S: GLenum = 0x2802;
  pub const GL_TEXTURE_WRAP_T: GLenum = 0x2803;
  pub const GL_TIMEOUT_EXPIRED: GLenum = 0x911B;
  pub const GL_TIMEOUT_IGNORED: u64 = 0xFFFFFFFFFFFFFFFF;
  pub const GL_TIMESTAMP: GLenum = 0x8E28;
  pub const GL_TIME_ELAPSED: GLenum = 0x88BF;
  pub const GL_TRANSFORM_FEEDBACK_BUFFER: GLenum = 0x8C8E;
  pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum = 0x8C8F;
  pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum = 0x8C7F;
  pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum = 0x8C85;
  pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: GLenum = 0x8C84;
  pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum = 0x8C88;
  pub const GL_TRANSFORM_FEEDBACK_VARYINGS: GLenum = 0x8C83;
  pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: GLenum = 0x8C76;
  pub const GL_TRIANGLES: GLenum = 0x4;
  pub const GL_TRIANGLES_ADJACENCY: GLenum = 0xC;
  pub const GL_TRIANGLE_FAN: GLenum = 0x6;
  pub const GL_TRIANGLE_STRIP: GLenum = 0x5;
  pub const GL_TRIANGLE_STRIP_ADJACENCY: GLenum = 0xD;
  pub const GL_TRUE: GLenum = 0x1;
  pub const GL_UNIFORM_ARRAY_STRIDE: GLenum = 0x8A3C;
  pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum = 0x8A42;
  pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum = 0x8A43;
  pub const GL_UNIFORM_BLOCK_BINDING: GLenum = 0x8A3F;
  pub const GL_UNIFORM_BLOCK_DATA_SIZE: GLenum = 0x8A40;
  pub const GL_UNIFORM_BLOCK_INDEX: GLenum = 0x8A3A;
  pub const GL_UNIFORM_BLOCK_NAME_LENGTH: GLenum = 0x8A41;
  pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x8A46;
  pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x8A45;
  pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x8A44;
  pub const GL_UNIFORM_BUFFER: GLenum = 0x8A11;
  pub const GL_UNIFORM_BUFFER_BINDING: GLenum = 0x8A28;
  pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x8A34;
  pub const GL_UNIFORM_BUFFER_SIZE: GLenum = 0x8A2A;
  pub const GL_UNIFORM_BUFFER_START: GLenum = 0x8A29;
  pub const GL_UNIFORM_IS_ROW_MAJOR: GLenum = 0x8A3E;
  pub const GL_UNIFORM_MATRIX_STRIDE: GLenum = 0x8A3D;
  pub const GL_UNIFORM_NAME_LENGTH: GLenum = 0x8A39;
  pub const GL_UNIFORM_OFFSET: GLenum = 0x8A3B;
  pub const GL_UNIFORM_SIZE: GLenum = 0x8A38;
  pub const GL_UNIFORM_TYPE: GLenum = 0x8A37;
  pub const GL_UNPACK_ALIGNMENT: GLenum = 0xCF5;
  pub const GL_UNPACK_IMAGE_HEIGHT: GLenum = 0x806E;
  pub const GL_UNPACK_LSB_FIRST: GLenum = 0xCF1;
  pub const GL_UNPACK_ROW_LENGTH: GLenum = 0xCF2;
  pub const GL_UNPACK_SKIP_IMAGES: GLenum = 0x806D;
  pub const GL_UNPACK_SKIP_PIXELS: GLenum = 0xCF4;
  pub const GL_UNPACK_SKIP_ROWS: GLenum = 0xCF3;
  pub const GL_UNPACK_SWAP_BYTES: GLenum = 0xCF0;
  pub const GL_UNSIGNALED: GLenum = 0x9118;
  pub const GL_UNSIGNED_BYTE: GLenum = 0x1401;
  pub const GL_UNSIGNED_BYTE_2_3_3_REV: GLenum = 0x8362;
  pub const GL_UNSIGNED_BYTE_3_3_2: GLenum = 0x8032;
  pub const GL_UNSIGNED_INT: GLenum = 0x1405;
  pub const GL_UNSIGNED_INT_10F_11F_11F_REV: GLenum = 0x8C3B;
  pub const GL_UNSIGNED_INT_10_10_10_2: GLenum = 0x8036;
  pub const GL_UNSIGNED_INT_24_8: GLenum = 0x84FA;
  pub const GL_UNSIGNED_INT_2_10_10_10_REV: GLenum = 0x8368;
  pub const GL_UNSIGNED_INT_5_9_9_9_REV: GLenum = 0x8C3E;
  pub const GL_UNSIGNED_INT_8_8_8_8: GLenum = 0x8035;
  pub const GL_UNSIGNED_INT_8_8_8_8_REV: GLenum = 0x8367;
  pub const GL_UNSIGNED_INT_SAMPLER_1D: GLenum = 0x8DD1;
  pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: GLenum = 0x8DD6;
  pub const GL_UNSIGNED_INT_SAMPLER_2D: GLenum = 0x8DD2;
  pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum = 0x8DD7;
  pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x910A;
  pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910D;
  pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT: GLenum = 0x8DD5;
  pub const GL_UNSIGNED_INT_SAMPLER_3D: GLenum = 0x8DD3;
  pub const GL_UNSIGNED_INT_SAMPLER_BUFFER: GLenum = 0x8DD8;
  pub const GL_UNSIGNED_INT_SAMPLER_CUBE: GLenum = 0x8DD4;
  pub const GL_UNSIGNED_INT_VEC2: GLenum = 0x8DC6;
  pub const GL_UNSIGNED_INT_VEC3: GLenum = 0x8DC7;
  pub const GL_UNSIGNED_INT_VEC4: GLenum = 0x8DC8;
  pub const GL_UNSIGNED_NORMALIZED: GLenum = 0x8C17;
  pub const GL_UNSIGNED_SHORT: GLenum = 0x1403;
  pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: GLenum = 0x8366;
  pub const GL_UNSIGNED_SHORT_4_4_4_4: GLenum = 0x8033;
  pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: GLenum = 0x8365;
  pub const GL_UNSIGNED_SHORT_5_5_5_1: GLenum = 0x8034;
  pub const GL_UNSIGNED_SHORT_5_6_5: GLenum = 0x8363;
  pub const GL_UNSIGNED_SHORT_5_6_5_REV: GLenum = 0x8364;
  pub const GL_UPPER_LEFT: GLenum = 0x8CA2;
  pub const GL_VALIDATE_STATUS: GLenum = 0x8B83;
  pub const GL_VENDOR: GLenum = 0x1F00;
  pub const GL_VERSION: GLenum = 0x1F02;
  pub const GL_VERTEX_ARRAY_BINDING: GLenum = 0x85B5;
  pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = 0x889F;
  pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum = 0x88FE;
  pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: GLenum = 0x8622;
  pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: GLenum = 0x88FD;
  pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum = 0x886A;
  pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: GLenum = 0x8645;
  pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: GLenum = 0x8623;
  pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: GLenum = 0x8624;
  pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: GLenum = 0x8625;
  pub const GL_VERTEX_PROGRAM_POINT_SIZE: GLenum = 0x8642;
  pub const GL_VERTEX_SHADER: GLenum = 0x8B31;
  pub const GL_VIEWPORT: GLenum = 0xBA2;
  pub const GL_WAIT_FAILED: GLenum = 0x911D;
  pub const GL_WRITE_ONLY: GLenum = 0x88B9;
  pub const GL_XOR: GLenum = 0x1506;
  pub const GL_ZERO: GLenum = 0x0;
}

/// Function pointer sanity check.
///
/// * Null pointers (0) are bad.
/// * Sometimes windows will return non-null error values.
///   * Known non-null error values include 1, 2, 3, and -1.
#[cfg(any(feature = "global_loader", feature = "struct_loader"))]
fn fn_ptr_ok(p: *const c_void) -> bool {
  let p_u = p as usize;
  (p_u >= 8) && (p_u != usize::max_value())
}

#[cfg(any(feature = "global_loader", feature = "struct_loader"))]
use core::ptr::NonNull;
#[cfg(any(feature = "global_loader", feature = "struct_loader"))]
fn call_loader(
  loader: &mut dyn FnMut(*const c_char) -> *const c_void,
  name: &[u8],
) -> Option<NonNull<c_void>> {
  debug_assert!(*name.last().unwrap() == 0_u8);
  let p = loader(name.as_ptr() as *const c_char);
  if fn_ptr_ok(p) {
    NonNull::new(p as *mut c_void)
  } else {
    None
  }
}

#[cfg(feature = "global_loader")]
pub use global_loader::*;
#[cfg(feature = "global_loader")]
pub mod global_loader {
  use super::*;
  use core::{
    ptr::null_mut,
    sync::atomic::{AtomicPtr, Ordering},
  };

  type glGetUniformfv_t =
    unsafe extern "system" fn(GLuint, GLint, *mut GLfloat);
  static glGetUniformfv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetUniformfv_str: &str = "glGetUniformfv\0";
  #[doc(hidden)]
  pub fn load_glGetUniformfv() {
    unimplemented!()
  }
  pub fn glGetUniformfv() {
    unimplemented!()
  }

  type glUniform2uiv_t =
    unsafe extern "system" fn(GLint, GLsizei, *const GLuint);
  static glUniform2uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform2uiv_str: &str = "glUniform2uiv\0";
  #[doc(hidden)]
  pub fn load_glUniform2uiv() {
    unimplemented!()
  }
  pub fn glUniform2uiv() {
    unimplemented!()
  }

  type glBindBuffer_t = unsafe extern "system" fn(BufferTargetARB, GLuint);
  static glBindBuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindBuffer_str: &str = "glBindBuffer\0";
  #[doc(hidden)]
  pub fn load_glBindBuffer() {
    unimplemented!()
  }
  pub fn glBindBuffer() {
    unimplemented!()
  }

  type glBlendFunc_t =
    unsafe extern "system" fn(BlendingFactor, BlendingFactor);
  static glBlendFunc_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBlendFunc_str: &str = "glBlendFunc\0";
  #[doc(hidden)]
  pub fn load_glBlendFunc() {
    unimplemented!()
  }
  pub fn glBlendFunc() {
    unimplemented!()
  }

  type glUniform3uiv_t =
    unsafe extern "system" fn(GLint, GLsizei, *const GLuint);
  static glUniform3uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform3uiv_str: &str = "glUniform3uiv\0";
  #[doc(hidden)]
  pub fn load_glUniform3uiv() {
    unimplemented!()
  }
  pub fn glUniform3uiv() {
    unimplemented!()
  }

  type glGetVertexAttribfv_t =
    unsafe extern "system" fn(GLuint, VertexAttribPropertyARB, *mut GLfloat);
  static glGetVertexAttribfv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetVertexAttribfv_str: &str = "glGetVertexAttribfv\0";
  #[doc(hidden)]
  pub fn load_glGetVertexAttribfv() {
    unimplemented!()
  }
  pub fn glGetVertexAttribfv() {
    unimplemented!()
  }

  type glDrawElementsInstanced_t = unsafe extern "system" fn(
    PrimitiveType,
    GLsizei,
    DrawElementsType,
    *const c_void,
    GLsizei,
  );
  static glDrawElementsInstanced_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glDrawElementsInstanced_str: &str = "glDrawElementsInstanced\0";
  #[doc(hidden)]
  pub fn load_glDrawElementsInstanced() {
    unimplemented!()
  }
  pub fn glDrawElementsInstanced() {
    unimplemented!()
  }

  type glTexSubImage3D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
    GLsizei,
    PixelFormat,
    PixelType,
    *const c_void,
  );
  static glTexSubImage3D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexSubImage3D_str: &str = "glTexSubImage3D\0";
  #[doc(hidden)]
  pub fn load_glTexSubImage3D() {
    unimplemented!()
  }
  pub fn glTexSubImage3D() {
    unimplemented!()
  }

  type glGetIntegerv_t = unsafe extern "system" fn(GetPName, *mut GLint);
  static glGetIntegerv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetIntegerv_str: &str = "glGetIntegerv\0";
  #[doc(hidden)]
  pub fn load_glGetIntegerv() {
    unimplemented!()
  }
  pub fn glGetIntegerv() {
    unimplemented!()
  }

  type glMapBufferRange_t = unsafe extern "system" fn(
    BufferTargetARB,
    GLintptr,
    GLsizeiptr,
    MapBufferAccessMask,
  );
  static glMapBufferRange_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glMapBufferRange_str: &str = "glMapBufferRange\0";
  #[doc(hidden)]
  pub fn load_glMapBufferRange() {
    unimplemented!()
  }
  pub fn glMapBufferRange() {
    unimplemented!()
  }

  type glGetTexParameterIiv_t =
    unsafe extern "system" fn(TextureTarget, GetTextureParameter, *mut GLint);
  static glGetTexParameterIiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetTexParameterIiv_str: &str = "glGetTexParameterIiv\0";
  #[doc(hidden)]
  pub fn load_glGetTexParameterIiv() {
    unimplemented!()
  }
  pub fn glGetTexParameterIiv() {
    unimplemented!()
  }

  type glVertexAttrib2sv_t = unsafe extern "system" fn(GLuint, *const GLshort);
  static glVertexAttrib2sv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib2sv_str: &str = "glVertexAttrib2sv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib2sv() {
    unimplemented!()
  }
  pub fn glVertexAttrib2sv() {
    unimplemented!()
  }

  type glUniform1fv_t =
    unsafe extern "system" fn(GLint, GLsizei, *const GLfloat);
  static glUniform1fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform1fv_str: &str = "glUniform1fv\0";
  #[doc(hidden)]
  pub fn load_glUniform1fv() {
    unimplemented!()
  }
  pub fn glUniform1fv() {
    unimplemented!()
  }

  type glVertexAttrib2s_t = unsafe extern "system" fn(GLuint, GLshort, GLshort);
  static glVertexAttrib2s_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib2s_str: &str = "glVertexAttrib2s\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib2s() {
    unimplemented!()
  }
  pub fn glVertexAttrib2s() {
    unimplemented!()
  }

  type glUniform4i_t =
    unsafe extern "system" fn(GLint, GLint, GLint, GLint, GLint);
  static glUniform4i_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform4i_str: &str = "glUniform4i\0";
  #[doc(hidden)]
  pub fn load_glUniform4i() {
    unimplemented!()
  }
  pub fn glUniform4i() {
    unimplemented!()
  }

  type glVertexAttribI4bv_t = unsafe extern "system" fn(GLuint, *const GLbyte);
  static glVertexAttribI4bv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI4bv_str: &str = "glVertexAttribI4bv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI4bv() {
    unimplemented!()
  }
  pub fn glVertexAttribI4bv() {
    unimplemented!()
  }

  type glVertexAttrib4uiv_t = unsafe extern "system" fn(GLuint, *const GLuint);
  static glVertexAttrib4uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4uiv_str: &str = "glVertexAttrib4uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4uiv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4uiv() {
    unimplemented!()
  }

  type glBindFragDataLocationIndexed_t =
    unsafe extern "system" fn(GLuint, GLuint, GLuint, *const GLchar);
  static glBindFragDataLocationIndexed_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glBindFragDataLocationIndexed_str: &str =
    "glBindFragDataLocationIndexed\0";
  #[doc(hidden)]
  pub fn load_glBindFragDataLocationIndexed() {
    unimplemented!()
  }
  pub fn glBindFragDataLocationIndexed() {
    unimplemented!()
  }

  type glBindRenderbuffer_t =
    unsafe extern "system" fn(RenderbufferTarget, GLuint);
  static glBindRenderbuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindRenderbuffer_str: &str = "glBindRenderbuffer\0";
  #[doc(hidden)]
  pub fn load_glBindRenderbuffer() {
    unimplemented!()
  }
  pub fn glBindRenderbuffer() {
    unimplemented!()
  }

  type glIsFramebuffer_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsFramebuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsFramebuffer_str: &str = "glIsFramebuffer\0";
  #[doc(hidden)]
  pub fn load_glIsFramebuffer() {
    unimplemented!()
  }
  pub fn glIsFramebuffer() {
    unimplemented!()
  }

  type glGetShaderiv_t =
    unsafe extern "system" fn(GLuint, ShaderParameterName, *mut GLint);
  static glGetShaderiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetShaderiv_str: &str = "glGetShaderiv\0";
  #[doc(hidden)]
  pub fn load_glGetShaderiv() {
    unimplemented!()
  }
  pub fn glGetShaderiv() {
    unimplemented!()
  }

  type glFrontFace_t = unsafe extern "system" fn(FrontFaceDirection);
  static glFrontFace_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glFrontFace_str: &str = "glFrontFace\0";
  #[doc(hidden)]
  pub fn load_glFrontFace() {
    unimplemented!()
  }
  pub fn glFrontFace() {
    unimplemented!()
  }

  type glUniform3fv_t =
    unsafe extern "system" fn(GLint, GLsizei, *const GLfloat);
  static glUniform3fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform3fv_str: &str = "glUniform3fv\0";
  #[doc(hidden)]
  pub fn load_glUniform3fv() {
    unimplemented!()
  }
  pub fn glUniform3fv() {
    unimplemented!()
  }

  type glCheckFramebufferStatus_t =
    unsafe extern "system" fn(FramebufferTarget) -> GLenum;
  static glCheckFramebufferStatus_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glCheckFramebufferStatus_str: &str = "glCheckFramebufferStatus\0";
  #[doc(hidden)]
  pub fn load_glCheckFramebufferStatus() {
    unimplemented!()
  }
  pub fn glCheckFramebufferStatus() {
    unimplemented!()
  }

  type glGetTexImage_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    PixelFormat,
    PixelType,
    *mut c_void,
  );
  static glGetTexImage_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetTexImage_str: &str = "glGetTexImage\0";
  #[doc(hidden)]
  pub fn load_glGetTexImage() {
    unimplemented!()
  }
  pub fn glGetTexImage() {
    unimplemented!()
  }

  type glTexParameterfv_t = unsafe extern "system" fn(
    TextureTarget,
    TextureParameterName,
    *const GLfloat,
  );
  static glTexParameterfv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexParameterfv_str: &str = "glTexParameterfv\0";
  #[doc(hidden)]
  pub fn load_glTexParameterfv() {
    unimplemented!()
  }
  pub fn glTexParameterfv() {
    unimplemented!()
  }

  type glVertexAttribI4iv_t = unsafe extern "system" fn(GLuint, *const GLint);
  static glVertexAttribI4iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI4iv_str: &str = "glVertexAttribI4iv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI4iv() {
    unimplemented!()
  }
  pub fn glVertexAttribI4iv() {
    unimplemented!()
  }

  type glGenVertexArrays_t = unsafe extern "system" fn(GLsizei, *mut GLuint);
  static glGenVertexArrays_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGenVertexArrays_str: &str = "glGenVertexArrays\0";
  #[doc(hidden)]
  pub fn load_glGenVertexArrays() {
    unimplemented!()
  }
  pub fn glGenVertexArrays() {
    unimplemented!()
  }

  type glVertexAttrib3f_t =
    unsafe extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat);
  static glVertexAttrib3f_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib3f_str: &str = "glVertexAttrib3f\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib3f() {
    unimplemented!()
  }
  pub fn glVertexAttrib3f() {
    unimplemented!()
  }

  type glStencilOp_t =
    unsafe extern "system" fn(StencilOp, StencilOp, StencilOp);
  static glStencilOp_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glStencilOp_str: &str = "glStencilOp\0";
  #[doc(hidden)]
  pub fn load_glStencilOp() {
    unimplemented!()
  }
  pub fn glStencilOp() {
    unimplemented!()
  }

  type glBufferData_t = unsafe extern "system" fn(
    BufferTargetARB,
    GLsizeiptr,
    *const c_void,
    BufferUsageARB,
  );
  static glBufferData_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBufferData_str: &str = "glBufferData\0";
  #[doc(hidden)]
  pub fn load_glBufferData() {
    unimplemented!()
  }
  pub fn glBufferData() {
    unimplemented!()
  }

  type glDepthRange_t = unsafe extern "system" fn(GLdouble, GLdouble);
  static glDepthRange_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDepthRange_str: &str = "glDepthRange\0";
  #[doc(hidden)]
  pub fn load_glDepthRange() {
    unimplemented!()
  }
  pub fn glDepthRange() {
    unimplemented!()
  }

  type glVertexAttrib2d_t =
    unsafe extern "system" fn(GLuint, GLdouble, GLdouble);
  static glVertexAttrib2d_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib2d_str: &str = "glVertexAttrib2d\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib2d() {
    unimplemented!()
  }
  pub fn glVertexAttrib2d() {
    unimplemented!()
  }

  type glUniform2i_t = unsafe extern "system" fn(GLint, GLint, GLint);
  static glUniform2i_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform2i_str: &str = "glUniform2i\0";
  #[doc(hidden)]
  pub fn load_glUniform2i() {
    unimplemented!()
  }
  pub fn glUniform2i() {
    unimplemented!()
  }

  type glTexImage1D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLsizei,
    GLint,
    PixelFormat,
    PixelType,
    *const c_void,
  );
  static glTexImage1D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexImage1D_str: &str = "glTexImage1D\0";
  #[doc(hidden)]
  pub fn load_glTexImage1D() {
    unimplemented!()
  }
  pub fn glTexImage1D() {
    unimplemented!()
  }

  type glVertexAttribI2iv_t = unsafe extern "system" fn(GLuint, *const GLint);
  static glVertexAttribI2iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI2iv_str: &str = "glVertexAttribI2iv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI2iv() {
    unimplemented!()
  }
  pub fn glVertexAttribI2iv() {
    unimplemented!()
  }

  type glVertexAttribI3iv_t = unsafe extern "system" fn(GLuint, *const GLint);
  static glVertexAttribI3iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI3iv_str: &str = "glVertexAttribI3iv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI3iv() {
    unimplemented!()
  }
  pub fn glVertexAttribI3iv() {
    unimplemented!()
  }

  type glGetTexParameteriv_t =
    unsafe extern "system" fn(TextureTarget, GetTextureParameter, *mut GLint);
  static glGetTexParameteriv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetTexParameteriv_str: &str = "glGetTexParameteriv\0";
  #[doc(hidden)]
  pub fn load_glGetTexParameteriv() {
    unimplemented!()
  }
  pub fn glGetTexParameteriv() {
    unimplemented!()
  }

  type glUniform3f_t =
    unsafe extern "system" fn(GLint, GLfloat, GLfloat, GLfloat);
  static glUniform3f_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform3f_str: &str = "glUniform3f\0";
  #[doc(hidden)]
  pub fn load_glUniform3f() {
    unimplemented!()
  }
  pub fn glUniform3f() {
    unimplemented!()
  }

  type glStencilFuncSeparate_t = unsafe extern "system" fn(
    StencilFaceDirection,
    StencilFunction,
    GLint,
    GLuint,
  );
  static glStencilFuncSeparate_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glStencilFuncSeparate_str: &str = "glStencilFuncSeparate\0";
  #[doc(hidden)]
  pub fn load_glStencilFuncSeparate() {
    unimplemented!()
  }
  pub fn glStencilFuncSeparate() {
    unimplemented!()
  }

  type glVertexAttribI1uiv_t = unsafe extern "system" fn(GLuint, *const GLuint);
  static glVertexAttribI1uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI1uiv_str: &str = "glVertexAttribI1uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI1uiv() {
    unimplemented!()
  }
  pub fn glVertexAttribI1uiv() {
    unimplemented!()
  }

  type glGetShaderInfoLog_t =
    unsafe extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar);
  static glGetShaderInfoLog_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetShaderInfoLog_str: &str = "glGetShaderInfoLog\0";
  #[doc(hidden)]
  pub fn load_glGetShaderInfoLog() {
    unimplemented!()
  }
  pub fn glGetShaderInfoLog() {
    unimplemented!()
  }

  type glUniformMatrix2fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix2fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix2fv_str: &str = "glUniformMatrix2fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix2fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix2fv() {
    unimplemented!()
  }

  type glGenSamplers_t = unsafe extern "system" fn(GLsizei, *mut GLuint);
  static glGenSamplers_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGenSamplers_str: &str = "glGenSamplers\0";
  #[doc(hidden)]
  pub fn load_glGenSamplers() {
    unimplemented!()
  }
  pub fn glGenSamplers() {
    unimplemented!()
  }

  type glDisable_t = unsafe extern "system" fn(EnableCap);
  static glDisable_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDisable_str: &str = "glDisable\0";
  #[doc(hidden)]
  pub fn load_glDisable() {
    unimplemented!()
  }
  pub fn glDisable() {
    unimplemented!()
  }

  type glVertexAttrib1sv_t = unsafe extern "system" fn(GLuint, *const GLshort);
  static glVertexAttrib1sv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib1sv_str: &str = "glVertexAttrib1sv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib1sv() {
    unimplemented!()
  }
  pub fn glVertexAttrib1sv() {
    unimplemented!()
  }

  type glUniform3i_t = unsafe extern "system" fn(GLint, GLint, GLint, GLint);
  static glUniform3i_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform3i_str: &str = "glUniform3i\0";
  #[doc(hidden)]
  pub fn load_glUniform3i() {
    unimplemented!()
  }
  pub fn glUniform3i() {
    unimplemented!()
  }

  type glEnablei_t = unsafe extern "system" fn(EnableCap, GLuint);
  static glEnablei_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glEnablei_str: &str = "glEnablei\0";
  #[doc(hidden)]
  pub fn load_glEnablei() {
    unimplemented!()
  }
  pub fn glEnablei() {
    unimplemented!()
  }

  type glGetQueryiv_t =
    unsafe extern "system" fn(QueryTarget, QueryParameterName, *mut GLint);
  static glGetQueryiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetQueryiv_str: &str = "glGetQueryiv\0";
  #[doc(hidden)]
  pub fn load_glGetQueryiv() {
    unimplemented!()
  }
  pub fn glGetQueryiv() {
    unimplemented!()
  }

  type glClearBufferfv_t =
    unsafe extern "system" fn(Buffer, GLint, *const GLfloat);
  static glClearBufferfv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClearBufferfv_str: &str = "glClearBufferfv\0";
  #[doc(hidden)]
  pub fn load_glClearBufferfv() {
    unimplemented!()
  }
  pub fn glClearBufferfv() {
    unimplemented!()
  }

  type glBlendEquation_t = unsafe extern "system" fn(BlendEquationModeEXT);
  static glBlendEquation_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBlendEquation_str: &str = "glBlendEquation\0";
  #[doc(hidden)]
  pub fn load_glBlendEquation() {
    unimplemented!()
  }
  pub fn glBlendEquation() {
    unimplemented!()
  }

  type glUniform1ui_t = unsafe extern "system" fn(GLint, GLuint);
  static glUniform1ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform1ui_str: &str = "glUniform1ui\0";
  #[doc(hidden)]
  pub fn load_glUniform1ui() {
    unimplemented!()
  }
  pub fn glUniform1ui() {
    unimplemented!()
  }

  type glColorMask_t =
    unsafe extern "system" fn(GLboolean, GLboolean, GLboolean, GLboolean);
  static glColorMask_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glColorMask_str: &str = "glColorMask\0";
  #[doc(hidden)]
  pub fn load_glColorMask() {
    unimplemented!()
  }
  pub fn glColorMask() {
    unimplemented!()
  }

  type glUniformMatrix3x4fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix3x4fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix3x4fv_str: &str = "glUniformMatrix3x4fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix3x4fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix3x4fv() {
    unimplemented!()
  }

  type glIsRenderbuffer_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsRenderbuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsRenderbuffer_str: &str = "glIsRenderbuffer\0";
  #[doc(hidden)]
  pub fn load_glIsRenderbuffer() {
    unimplemented!()
  }
  pub fn glIsRenderbuffer() {
    unimplemented!()
  }

  type glGetSamplerParameterIuiv_t =
    unsafe extern "system" fn(GLuint, SamplerParameterI, *mut GLuint);
  static glGetSamplerParameterIuiv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetSamplerParameterIuiv_str: &str = "glGetSamplerParameterIuiv\0";
  #[doc(hidden)]
  pub fn load_glGetSamplerParameterIuiv() {
    unimplemented!()
  }
  pub fn glGetSamplerParameterIuiv() {
    unimplemented!()
  }

  type glFramebufferTexture2D_t = unsafe extern "system" fn(
    FramebufferTarget,
    FramebufferAttachment,
    TextureTarget,
    GLuint,
    GLint,
  );
  static glFramebufferTexture2D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glFramebufferTexture2D_str: &str = "glFramebufferTexture2D\0";
  #[doc(hidden)]
  pub fn load_glFramebufferTexture2D() {
    unimplemented!()
  }
  pub fn glFramebufferTexture2D() {
    unimplemented!()
  }

  type glDeleteQueries_t = unsafe extern "system" fn(GLsizei, *const GLuint);
  static glDeleteQueries_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteQueries_str: &str = "glDeleteQueries\0";
  #[doc(hidden)]
  pub fn load_glDeleteQueries() {
    unimplemented!()
  }
  pub fn glDeleteQueries() {
    unimplemented!()
  }

  type glVertexAttribI4uiv_t = unsafe extern "system" fn(GLuint, *const GLuint);
  static glVertexAttribI4uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI4uiv_str: &str = "glVertexAttribI4uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI4uiv() {
    unimplemented!()
  }
  pub fn glVertexAttribI4uiv() {
    unimplemented!()
  }

  type glGetRenderbufferParameteriv_t = unsafe extern "system" fn(
    RenderbufferTarget,
    RenderbufferParameterName,
    *mut GLint,
  );
  static glGetRenderbufferParameteriv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetRenderbufferParameteriv_str: &str =
    "glGetRenderbufferParameteriv\0";
  #[doc(hidden)]
  pub fn load_glGetRenderbufferParameteriv() {
    unimplemented!()
  }
  pub fn glGetRenderbufferParameteriv() {
    unimplemented!()
  }

  type glIsEnabled_t = unsafe extern "system" fn(EnableCap) -> GLboolean;
  static glIsEnabled_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsEnabled_str: &str = "glIsEnabled\0";
  #[doc(hidden)]
  pub fn load_glIsEnabled() {
    unimplemented!()
  }
  pub fn glIsEnabled() {
    unimplemented!()
  }

  type glGetTexLevelParameterfv_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GetTextureParameter,
    *mut GLfloat,
  );
  static glGetTexLevelParameterfv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetTexLevelParameterfv_str: &str = "glGetTexLevelParameterfv\0";
  #[doc(hidden)]
  pub fn load_glGetTexLevelParameterfv() {
    unimplemented!()
  }
  pub fn glGetTexLevelParameterfv() {
    unimplemented!()
  }

  type glUniformMatrix4fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix4fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix4fv_str: &str = "glUniformMatrix4fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix4fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix4fv() {
    unimplemented!()
  }

  type glCompileShader_t = unsafe extern "system" fn(GLuint);
  static glCompileShader_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCompileShader_str: &str = "glCompileShader\0";
  #[doc(hidden)]
  pub fn load_glCompileShader() {
    unimplemented!()
  }
  pub fn glCompileShader() {
    unimplemented!()
  }

  type glVertexAttribP3uiv_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerType,
    GLboolean,
    *const GLuint,
  );
  static glVertexAttribP3uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribP3uiv_str: &str = "glVertexAttribP3uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribP3uiv() {
    unimplemented!()
  }
  pub fn glVertexAttribP3uiv() {
    unimplemented!()
  }

  type glVertexAttribIPointer_t = unsafe extern "system" fn(
    GLuint,
    GLint,
    VertexAttribPointerType,
    GLsizei,
    *const c_void,
  );
  static glVertexAttribIPointer_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glVertexAttribIPointer_str: &str = "glVertexAttribIPointer\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribIPointer() {
    unimplemented!()
  }
  pub fn glVertexAttribIPointer() {
    unimplemented!()
  }

  type glBindSampler_t = unsafe extern "system" fn(GLuint, GLuint);
  static glBindSampler_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindSampler_str: &str = "glBindSampler\0";
  #[doc(hidden)]
  pub fn load_glBindSampler() {
    unimplemented!()
  }
  pub fn glBindSampler() {
    unimplemented!()
  }

  type glGenQueries_t = unsafe extern "system" fn(GLsizei, *mut GLuint);
  static glGenQueries_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGenQueries_str: &str = "glGenQueries\0";
  #[doc(hidden)]
  pub fn load_glGenQueries() {
    unimplemented!()
  }
  pub fn glGenQueries() {
    unimplemented!()
  }

  type glUniform4f_t =
    unsafe extern "system" fn(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
  static glUniform4f_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform4f_str: &str = "glUniform4f\0";
  #[doc(hidden)]
  pub fn load_glUniform4f() {
    unimplemented!()
  }
  pub fn glUniform4f() {
    unimplemented!()
  }

  type glGetActiveAttrib_t = unsafe extern "system" fn(
    GLuint,
    GLuint,
    GLsizei,
    *mut GLsizei,
    *mut GLint,
    *mut GLenum,
    *mut GLchar,
  );
  static glGetActiveAttrib_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetActiveAttrib_str: &str = "glGetActiveAttrib\0";
  #[doc(hidden)]
  pub fn load_glGetActiveAttrib() {
    unimplemented!()
  }
  pub fn glGetActiveAttrib() {
    unimplemented!()
  }

  type glClearColor_t =
    unsafe extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat);
  static glClearColor_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClearColor_str: &str = "glClearColor\0";
  #[doc(hidden)]
  pub fn load_glClearColor() {
    unimplemented!()
  }
  pub fn glClearColor() {
    unimplemented!()
  }

  type glVertexAttrib4Nusv_t =
    unsafe extern "system" fn(GLuint, *const GLushort);
  static glVertexAttrib4Nusv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4Nusv_str: &str = "glVertexAttrib4Nusv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4Nusv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4Nusv() {
    unimplemented!()
  }

  type glTexImage2D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
    GLint,
    PixelFormat,
    PixelType,
    *const c_void,
  );
  static glTexImage2D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexImage2D_str: &str = "glTexImage2D\0";
  #[doc(hidden)]
  pub fn load_glTexImage2D() {
    unimplemented!()
  }
  pub fn glTexImage2D() {
    unimplemented!()
  }

  type glBindAttribLocation_t =
    unsafe extern "system" fn(GLuint, GLuint, *const GLchar);
  static glBindAttribLocation_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindAttribLocation_str: &str = "glBindAttribLocation\0";
  #[doc(hidden)]
  pub fn load_glBindAttribLocation() {
    unimplemented!()
  }
  pub fn glBindAttribLocation() {
    unimplemented!()
  }

  type glGetVertexAttribIiv_t =
    unsafe extern "system" fn(GLuint, VertexAttribEnum, *mut GLint);
  static glGetVertexAttribIiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetVertexAttribIiv_str: &str = "glGetVertexAttribIiv\0";
  #[doc(hidden)]
  pub fn load_glGetVertexAttribIiv() {
    unimplemented!()
  }
  pub fn glGetVertexAttribIiv() {
    unimplemented!()
  }

  type glGenRenderbuffers_t = unsafe extern "system" fn(GLsizei, *mut GLuint);
  static glGenRenderbuffers_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGenRenderbuffers_str: &str = "glGenRenderbuffers\0";
  #[doc(hidden)]
  pub fn load_glGenRenderbuffers() {
    unimplemented!()
  }
  pub fn glGenRenderbuffers() {
    unimplemented!()
  }

  type glDrawRangeElements_t = unsafe extern "system" fn(
    PrimitiveType,
    GLuint,
    GLuint,
    GLsizei,
    DrawElementsType,
    *const c_void,
  );
  static glDrawRangeElements_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDrawRangeElements_str: &str = "glDrawRangeElements\0";
  #[doc(hidden)]
  pub fn load_glDrawRangeElements() {
    unimplemented!()
  }
  pub fn glDrawRangeElements() {
    unimplemented!()
  }

  type glGetBufferParameteriv_t =
    unsafe extern "system" fn(BufferTargetARB, BufferPNameARB, *mut GLint);
  static glGetBufferParameteriv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetBufferParameteriv_str: &str = "glGetBufferParameteriv\0";
  #[doc(hidden)]
  pub fn load_glGetBufferParameteriv() {
    unimplemented!()
  }
  pub fn glGetBufferParameteriv() {
    unimplemented!()
  }

  type glVertexAttribP2ui_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerType,
    GLboolean,
    GLuint,
  );
  static glVertexAttribP2ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribP2ui_str: &str = "glVertexAttribP2ui\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribP2ui() {
    unimplemented!()
  }
  pub fn glVertexAttribP2ui() {
    unimplemented!()
  }

  type glPixelStoref_t =
    unsafe extern "system" fn(PixelStoreParameter, GLfloat);
  static glPixelStoref_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPixelStoref_str: &str = "glPixelStoref\0";
  #[doc(hidden)]
  pub fn load_glPixelStoref() {
    unimplemented!()
  }
  pub fn glPixelStoref() {
    unimplemented!()
  }

  type glBindVertexArray_t = unsafe extern "system" fn(GLuint);
  static glBindVertexArray_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindVertexArray_str: &str = "glBindVertexArray\0";
  #[doc(hidden)]
  pub fn load_glBindVertexArray() {
    unimplemented!()
  }
  pub fn glBindVertexArray() {
    unimplemented!()
  }

  type glVertexAttrib4f_t =
    unsafe extern "system" fn(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
  static glVertexAttrib4f_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4f_str: &str = "glVertexAttrib4f\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4f() {
    unimplemented!()
  }
  pub fn glVertexAttrib4f() {
    unimplemented!()
  }

  type glGetQueryObjectui64v_t =
    unsafe extern "system" fn(GLuint, QueryObjectParameterName, *mut GLuint64);
  static glGetQueryObjectui64v_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetQueryObjectui64v_str: &str = "glGetQueryObjectui64v\0";
  #[doc(hidden)]
  pub fn load_glGetQueryObjectui64v() {
    unimplemented!()
  }
  pub fn glGetQueryObjectui64v() {
    unimplemented!()
  }

  type glGetFloatv_t = unsafe extern "system" fn(GetPName, *mut GLfloat);
  static glGetFloatv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetFloatv_str: &str = "glGetFloatv\0";
  #[doc(hidden)]
  pub fn load_glGetFloatv() {
    unimplemented!()
  }
  pub fn glGetFloatv() {
    unimplemented!()
  }

  type glFramebufferTexture_t = unsafe extern "system" fn(
    FramebufferTarget,
    FramebufferAttachment,
    GLuint,
    GLint,
  );
  static glFramebufferTexture_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glFramebufferTexture_str: &str = "glFramebufferTexture\0";
  #[doc(hidden)]
  pub fn load_glFramebufferTexture() {
    unimplemented!()
  }
  pub fn glFramebufferTexture() {
    unimplemented!()
  }

  type glLineWidth_t = unsafe extern "system" fn(GLfloat);
  static glLineWidth_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glLineWidth_str: &str = "glLineWidth\0";
  #[doc(hidden)]
  pub fn load_glLineWidth() {
    unimplemented!()
  }
  pub fn glLineWidth() {
    unimplemented!()
  }

  type glStencilFunc_t =
    unsafe extern "system" fn(StencilFunction, GLint, GLuint);
  static glStencilFunc_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glStencilFunc_str: &str = "glStencilFunc\0";
  #[doc(hidden)]
  pub fn load_glStencilFunc() {
    unimplemented!()
  }
  pub fn glStencilFunc() {
    unimplemented!()
  }

  type glBeginQuery_t = unsafe extern "system" fn(QueryTarget, GLuint);
  static glBeginQuery_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBeginQuery_str: &str = "glBeginQuery\0";
  #[doc(hidden)]
  pub fn load_glBeginQuery() {
    unimplemented!()
  }
  pub fn glBeginQuery() {
    unimplemented!()
  }

  type glVertexAttribP4uiv_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerType,
    GLboolean,
    *const GLuint,
  );
  static glVertexAttribP4uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribP4uiv_str: &str = "glVertexAttribP4uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribP4uiv() {
    unimplemented!()
  }
  pub fn glVertexAttribP4uiv() {
    unimplemented!()
  }

  type glVertexAttrib1d_t = unsafe extern "system" fn(GLuint, GLdouble);
  static glVertexAttrib1d_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib1d_str: &str = "glVertexAttrib1d\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib1d() {
    unimplemented!()
  }
  pub fn glVertexAttrib1d() {
    unimplemented!()
  }

  type glVertexAttribI3i_t =
    unsafe extern "system" fn(GLuint, GLint, GLint, GLint);
  static glVertexAttribI3i_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI3i_str: &str = "glVertexAttribI3i\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI3i() {
    unimplemented!()
  }
  pub fn glVertexAttribI3i() {
    unimplemented!()
  }

  type glUniform3iv_t = unsafe extern "system" fn(GLint, GLsizei, *const GLint);
  static glUniform3iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform3iv_str: &str = "glUniform3iv\0";
  #[doc(hidden)]
  pub fn load_glUniform3iv() {
    unimplemented!()
  }
  pub fn glUniform3iv() {
    unimplemented!()
  }

  type glEndQuery_t = unsafe extern "system" fn(QueryTarget);
  static glEndQuery_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glEndQuery_str: &str = "glEndQuery\0";
  #[doc(hidden)]
  pub fn load_glEndQuery() {
    unimplemented!()
  }
  pub fn glEndQuery() {
    unimplemented!()
  }

  type glMultiDrawArrays_t = unsafe extern "system" fn(
    PrimitiveType,
    *const GLint,
    *const GLsizei,
    GLsizei,
  );
  static glMultiDrawArrays_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glMultiDrawArrays_str: &str = "glMultiDrawArrays\0";
  #[doc(hidden)]
  pub fn load_glMultiDrawArrays() {
    unimplemented!()
  }
  pub fn glMultiDrawArrays() {
    unimplemented!()
  }

  type glBlendFuncSeparate_t = unsafe extern "system" fn(
    BlendingFactor,
    BlendingFactor,
    BlendingFactor,
    BlendingFactor,
  );
  static glBlendFuncSeparate_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBlendFuncSeparate_str: &str = "glBlendFuncSeparate\0";
  #[doc(hidden)]
  pub fn load_glBlendFuncSeparate() {
    unimplemented!()
  }
  pub fn glBlendFuncSeparate() {
    unimplemented!()
  }

  type glVertexAttrib4d_t =
    unsafe extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
  static glVertexAttrib4d_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4d_str: &str = "glVertexAttrib4d\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4d() {
    unimplemented!()
  }
  pub fn glVertexAttrib4d() {
    unimplemented!()
  }

  type glClearStencil_t = unsafe extern "system" fn(GLint);
  static glClearStencil_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClearStencil_str: &str = "glClearStencil\0";
  #[doc(hidden)]
  pub fn load_glClearStencil() {
    unimplemented!()
  }
  pub fn glClearStencil() {
    unimplemented!()
  }

  type glFramebufferTexture3D_t = unsafe extern "system" fn(
    FramebufferTarget,
    FramebufferAttachment,
    TextureTarget,
    GLuint,
    GLint,
    GLint,
  );
  static glFramebufferTexture3D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glFramebufferTexture3D_str: &str = "glFramebufferTexture3D\0";
  #[doc(hidden)]
  pub fn load_glFramebufferTexture3D() {
    unimplemented!()
  }
  pub fn glFramebufferTexture3D() {
    unimplemented!()
  }

  type glDepthFunc_t = unsafe extern "system" fn(DepthFunction);
  static glDepthFunc_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDepthFunc_str: &str = "glDepthFunc\0";
  #[doc(hidden)]
  pub fn load_glDepthFunc() {
    unimplemented!()
  }
  pub fn glDepthFunc() {
    unimplemented!()
  }

  type glGetShaderSource_t =
    unsafe extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar);
  static glGetShaderSource_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetShaderSource_str: &str = "glGetShaderSource\0";
  #[doc(hidden)]
  pub fn load_glGetShaderSource() {
    unimplemented!()
  }
  pub fn glGetShaderSource() {
    unimplemented!()
  }

  type glVertexAttribI4ui_t =
    unsafe extern "system" fn(GLuint, GLuint, GLuint, GLuint, GLuint);
  static glVertexAttribI4ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI4ui_str: &str = "glVertexAttribI4ui\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI4ui() {
    unimplemented!()
  }
  pub fn glVertexAttribI4ui() {
    unimplemented!()
  }

  type glGetUniformBlockIndex_t =
    unsafe extern "system" fn(GLuint, *const GLchar) -> GLuint;
  static glGetUniformBlockIndex_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetUniformBlockIndex_str: &str = "glGetUniformBlockIndex\0";
  #[doc(hidden)]
  pub fn load_glGetUniformBlockIndex() {
    unimplemented!()
  }
  pub fn glGetUniformBlockIndex() {
    unimplemented!()
  }

  type glGenTextures_t = unsafe extern "system" fn(GLsizei, *mut GLuint);
  static glGenTextures_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGenTextures_str: &str = "glGenTextures\0";
  #[doc(hidden)]
  pub fn load_glGenTextures() {
    unimplemented!()
  }
  pub fn glGenTextures() {
    unimplemented!()
  }

  type glGetUniformiv_t = unsafe extern "system" fn(GLuint, GLint, *mut GLint);
  static glGetUniformiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetUniformiv_str: &str = "glGetUniformiv\0";
  #[doc(hidden)]
  pub fn load_glGetUniformiv() {
    unimplemented!()
  }
  pub fn glGetUniformiv() {
    unimplemented!()
  }

  type glCreateShader_t = unsafe extern "system" fn(ShaderType) -> GLuint;
  static glCreateShader_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCreateShader_str: &str = "glCreateShader\0";
  #[doc(hidden)]
  pub fn load_glCreateShader() {
    unimplemented!()
  }
  pub fn glCreateShader() {
    unimplemented!()
  }

  type glUniform3ui_t =
    unsafe extern "system" fn(GLint, GLuint, GLuint, GLuint);
  static glUniform3ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform3ui_str: &str = "glUniform3ui\0";
  #[doc(hidden)]
  pub fn load_glUniform3ui() {
    unimplemented!()
  }
  pub fn glUniform3ui() {
    unimplemented!()
  }

  type glUniform1iv_t = unsafe extern "system" fn(GLint, GLsizei, *const GLint);
  static glUniform1iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform1iv_str: &str = "glUniform1iv\0";
  #[doc(hidden)]
  pub fn load_glUniform1iv() {
    unimplemented!()
  }
  pub fn glUniform1iv() {
    unimplemented!()
  }

  type glVertexAttrib4fv_t = unsafe extern "system" fn(GLuint, *const GLfloat);
  static glVertexAttrib4fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4fv_str: &str = "glVertexAttrib4fv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4fv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4fv() {
    unimplemented!()
  }

  type glIsBuffer_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsBuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsBuffer_str: &str = "glIsBuffer\0";
  #[doc(hidden)]
  pub fn load_glIsBuffer() {
    unimplemented!()
  }
  pub fn glIsBuffer() {
    unimplemented!()
  }

  type glGetQueryObjectiv_t =
    unsafe extern "system" fn(GLuint, QueryObjectParameterName, *mut GLint);
  static glGetQueryObjectiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetQueryObjectiv_str: &str = "glGetQueryObjectiv\0";
  #[doc(hidden)]
  pub fn load_glGetQueryObjectiv() {
    unimplemented!()
  }
  pub fn glGetQueryObjectiv() {
    unimplemented!()
  }

  type glDrawElements_t = unsafe extern "system" fn(
    PrimitiveType,
    GLsizei,
    DrawElementsType,
    *const c_void,
  );
  static glDrawElements_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDrawElements_str: &str = "glDrawElements\0";
  #[doc(hidden)]
  pub fn load_glDrawElements() {
    unimplemented!()
  }
  pub fn glDrawElements() {
    unimplemented!()
  }

  type glCompressedTexSubImage1D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLsizei,
    PixelFormat,
    GLsizei,
    *const c_void,
  );
  static glCompressedTexSubImage1D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glCompressedTexSubImage1D_str: &str = "glCompressedTexSubImage1D\0";
  #[doc(hidden)]
  pub fn load_glCompressedTexSubImage1D() {
    unimplemented!()
  }
  pub fn glCompressedTexSubImage1D() {
    unimplemented!()
  }

  type glGetMultisamplefv_t =
    unsafe extern "system" fn(GetMultisamplePNameNV, GLuint, *mut GLfloat);
  static glGetMultisamplefv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetMultisamplefv_str: &str = "glGetMultisamplefv\0";
  #[doc(hidden)]
  pub fn load_glGetMultisamplefv() {
    unimplemented!()
  }
  pub fn glGetMultisamplefv() {
    unimplemented!()
  }

  type glUniform1f_t = unsafe extern "system" fn(GLint, GLfloat);
  static glUniform1f_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform1f_str: &str = "glUniform1f\0";
  #[doc(hidden)]
  pub fn load_glUniform1f() {
    unimplemented!()
  }
  pub fn glUniform1f() {
    unimplemented!()
  }

  type glPolygonOffset_t = unsafe extern "system" fn(GLfloat, GLfloat);
  static glPolygonOffset_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPolygonOffset_str: &str = "glPolygonOffset\0";
  #[doc(hidden)]
  pub fn load_glPolygonOffset() {
    unimplemented!()
  }
  pub fn glPolygonOffset() {
    unimplemented!()
  }

  type glSamplerParameterIuiv_t =
    unsafe extern "system" fn(GLuint, SamplerParameterI, *const GLuint);
  static glSamplerParameterIuiv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glSamplerParameterIuiv_str: &str = "glSamplerParameterIuiv\0";
  #[doc(hidden)]
  pub fn load_glSamplerParameterIuiv() {
    unimplemented!()
  }
  pub fn glSamplerParameterIuiv() {
    unimplemented!()
  }

  type glBlendEquationSeparate_t =
    unsafe extern "system" fn(BlendEquationModeEXT, BlendEquationModeEXT);
  static glBlendEquationSeparate_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glBlendEquationSeparate_str: &str = "glBlendEquationSeparate\0";
  #[doc(hidden)]
  pub fn load_glBlendEquationSeparate() {
    unimplemented!()
  }
  pub fn glBlendEquationSeparate() {
    unimplemented!()
  }

  type glVertexAttribI1iv_t = unsafe extern "system" fn(GLuint, *const GLint);
  static glVertexAttribI1iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI1iv_str: &str = "glVertexAttribI1iv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI1iv() {
    unimplemented!()
  }
  pub fn glVertexAttribI1iv() {
    unimplemented!()
  }

  type glPointParameteri_t =
    unsafe extern "system" fn(PointParameterNameARB, GLint);
  static glPointParameteri_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPointParameteri_str: &str = "glPointParameteri\0";
  #[doc(hidden)]
  pub fn load_glPointParameteri() {
    unimplemented!()
  }
  pub fn glPointParameteri() {
    unimplemented!()
  }

  type glGetError_t = unsafe extern "system" fn() -> GLenum;
  static glGetError_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetError_str: &str = "glGetError\0";
  #[doc(hidden)]
  pub fn load_glGetError() {
    unimplemented!()
  }
  pub fn glGetError() {
    unimplemented!()
  }

  type glUniformMatrix2x4fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix2x4fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix2x4fv_str: &str = "glUniformMatrix2x4fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix2x4fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix2x4fv() {
    unimplemented!()
  }

  type glBeginConditionalRender_t =
    unsafe extern "system" fn(GLuint, ConditionalRenderMode);
  static glBeginConditionalRender_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glBeginConditionalRender_str: &str = "glBeginConditionalRender\0";
  #[doc(hidden)]
  pub fn load_glBeginConditionalRender() {
    unimplemented!()
  }
  pub fn glBeginConditionalRender() {
    unimplemented!()
  }

  type glDrawElementsInstancedBaseVertex_t = unsafe extern "system" fn(
    PrimitiveType,
    GLsizei,
    DrawElementsType,
    *const c_void,
    GLsizei,
    GLint,
  );
  static glDrawElementsInstancedBaseVertex_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glDrawElementsInstancedBaseVertex_str: &str =
    "glDrawElementsInstancedBaseVertex\0";
  #[doc(hidden)]
  pub fn load_glDrawElementsInstancedBaseVertex() {
    unimplemented!()
  }
  pub fn glDrawElementsInstancedBaseVertex() {
    unimplemented!()
  }

  type glGetFragDataLocation_t =
    unsafe extern "system" fn(GLuint, *const GLchar) -> GLint;
  static glGetFragDataLocation_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetFragDataLocation_str: &str = "glGetFragDataLocation\0";
  #[doc(hidden)]
  pub fn load_glGetFragDataLocation() {
    unimplemented!()
  }
  pub fn glGetFragDataLocation() {
    unimplemented!()
  }

  type glUniform1uiv_t =
    unsafe extern "system" fn(GLint, GLsizei, *const GLuint);
  static glUniform1uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform1uiv_str: &str = "glUniform1uiv\0";
  #[doc(hidden)]
  pub fn load_glUniform1uiv() {
    unimplemented!()
  }
  pub fn glUniform1uiv() {
    unimplemented!()
  }

  type glVertexAttrib4bv_t = unsafe extern "system" fn(GLuint, *const GLbyte);
  static glVertexAttrib4bv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4bv_str: &str = "glVertexAttrib4bv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4bv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4bv() {
    unimplemented!()
  }

  type glVertexAttrib4Nub_t =
    unsafe extern "system" fn(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
  static glVertexAttrib4Nub_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4Nub_str: &str = "glVertexAttrib4Nub\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4Nub() {
    unimplemented!()
  }
  pub fn glVertexAttrib4Nub() {
    unimplemented!()
  }

  type glUniform2ui_t = unsafe extern "system" fn(GLint, GLuint, GLuint);
  static glUniform2ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform2ui_str: &str = "glUniform2ui\0";
  #[doc(hidden)]
  pub fn load_glUniform2ui() {
    unimplemented!()
  }
  pub fn glUniform2ui() {
    unimplemented!()
  }

  type glVertexAttribI4i_t =
    unsafe extern "system" fn(GLuint, GLint, GLint, GLint, GLint);
  static glVertexAttribI4i_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI4i_str: &str = "glVertexAttribI4i\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI4i() {
    unimplemented!()
  }
  pub fn glVertexAttribI4i() {
    unimplemented!()
  }

  type glVertexAttrib3s_t =
    unsafe extern "system" fn(GLuint, GLshort, GLshort, GLshort);
  static glVertexAttrib3s_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib3s_str: &str = "glVertexAttrib3s\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib3s() {
    unimplemented!()
  }
  pub fn glVertexAttrib3s() {
    unimplemented!()
  }

  type glGetTransformFeedbackVarying_t = unsafe extern "system" fn(
    GLuint,
    GLuint,
    GLsizei,
    *mut GLsizei,
    *mut GLsizei,
    *mut GLenum,
    *mut GLchar,
  );
  static glGetTransformFeedbackVarying_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetTransformFeedbackVarying_str: &str =
    "glGetTransformFeedbackVarying\0";
  #[doc(hidden)]
  pub fn load_glGetTransformFeedbackVarying() {
    unimplemented!()
  }
  pub fn glGetTransformFeedbackVarying() {
    unimplemented!()
  }

  type glGetVertexAttribIuiv_t =
    unsafe extern "system" fn(GLuint, VertexAttribEnum, *mut GLuint);
  static glGetVertexAttribIuiv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetVertexAttribIuiv_str: &str = "glGetVertexAttribIuiv\0";
  #[doc(hidden)]
  pub fn load_glGetVertexAttribIuiv() {
    unimplemented!()
  }
  pub fn glGetVertexAttribIuiv() {
    unimplemented!()
  }

  type glEnableVertexAttribArray_t = unsafe extern "system" fn(GLuint);
  static glEnableVertexAttribArray_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glEnableVertexAttribArray_str: &str = "glEnableVertexAttribArray\0";
  #[doc(hidden)]
  pub fn load_glEnableVertexAttribArray() {
    unimplemented!()
  }
  pub fn glEnableVertexAttribArray() {
    unimplemented!()
  }

  type glGetBufferParameteri64v_t =
    unsafe extern "system" fn(BufferTargetARB, BufferPNameARB, *mut GLint64);
  static glGetBufferParameteri64v_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetBufferParameteri64v_str: &str = "glGetBufferParameteri64v\0";
  #[doc(hidden)]
  pub fn load_glGetBufferParameteri64v() {
    unimplemented!()
  }
  pub fn glGetBufferParameteri64v() {
    unimplemented!()
  }

  type glCopyTexSubImage1D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLint,
    GLint,
    GLsizei,
  );
  static glCopyTexSubImage1D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCopyTexSubImage1D_str: &str = "glCopyTexSubImage1D\0";
  #[doc(hidden)]
  pub fn load_glCopyTexSubImage1D() {
    unimplemented!()
  }
  pub fn glCopyTexSubImage1D() {
    unimplemented!()
  }

  type glDeleteSamplers_t = unsafe extern "system" fn(GLsizei, *const GLuint);
  static glDeleteSamplers_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteSamplers_str: &str = "glDeleteSamplers\0";
  #[doc(hidden)]
  pub fn load_glDeleteSamplers() {
    unimplemented!()
  }
  pub fn glDeleteSamplers() {
    unimplemented!()
  }

  type glIsEnabledi_t =
    unsafe extern "system" fn(EnableCap, GLuint) -> GLboolean;
  static glIsEnabledi_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsEnabledi_str: &str = "glIsEnabledi\0";
  #[doc(hidden)]
  pub fn load_glIsEnabledi() {
    unimplemented!()
  }
  pub fn glIsEnabledi() {
    unimplemented!()
  }

  type glPixelStorei_t = unsafe extern "system" fn(PixelStoreParameter, GLint);
  static glPixelStorei_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPixelStorei_str: &str = "glPixelStorei\0";
  #[doc(hidden)]
  pub fn load_glPixelStorei() {
    unimplemented!()
  }
  pub fn glPixelStorei() {
    unimplemented!()
  }

  type glCompressedTexImage1D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    InternalFormat,
    GLsizei,
    GLint,
    GLsizei,
    *const c_void,
  );
  static glCompressedTexImage1D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glCompressedTexImage1D_str: &str = "glCompressedTexImage1D\0";
  #[doc(hidden)]
  pub fn load_glCompressedTexImage1D() {
    unimplemented!()
  }
  pub fn glCompressedTexImage1D() {
    unimplemented!()
  }

  type glVertexAttrib2f_t = unsafe extern "system" fn(GLuint, GLfloat, GLfloat);
  static glVertexAttrib2f_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib2f_str: &str = "glVertexAttrib2f\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib2f() {
    unimplemented!()
  }
  pub fn glVertexAttrib2f() {
    unimplemented!()
  }

  type glTexParameterIiv_t = unsafe extern "system" fn(
    TextureTarget,
    TextureParameterName,
    *const GLint,
  );
  static glTexParameterIiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexParameterIiv_str: &str = "glTexParameterIiv\0";
  #[doc(hidden)]
  pub fn load_glTexParameterIiv() {
    unimplemented!()
  }
  pub fn glTexParameterIiv() {
    unimplemented!()
  }

  type glFenceSync_t =
    unsafe extern "system" fn(SyncCondition, GLbitfield) -> GLsync;
  static glFenceSync_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glFenceSync_str: &str = "glFenceSync\0";
  #[doc(hidden)]
  pub fn load_glFenceSync() {
    unimplemented!()
  }
  pub fn glFenceSync() {
    unimplemented!()
  }

  type glGetAttachedShaders_t =
    unsafe extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLuint);
  static glGetAttachedShaders_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetAttachedShaders_str: &str = "glGetAttachedShaders\0";
  #[doc(hidden)]
  pub fn load_glGetAttachedShaders() {
    unimplemented!()
  }
  pub fn glGetAttachedShaders() {
    unimplemented!()
  }

  type glClampColor_t =
    unsafe extern "system" fn(ClampColorTargetARB, ClampColorModeARB);
  static glClampColor_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClampColor_str: &str = "glClampColor\0";
  #[doc(hidden)]
  pub fn load_glClampColor() {
    unimplemented!()
  }
  pub fn glClampColor() {
    unimplemented!()
  }

  type glHint_t = unsafe extern "system" fn(HintTarget, HintMode);
  static glHint_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glHint_str: &str = "glHint\0";
  #[doc(hidden)]
  pub fn load_glHint() {
    unimplemented!()
  }
  pub fn glHint() {
    unimplemented!()
  }

  type glVertexAttrib4Nubv_t =
    unsafe extern "system" fn(GLuint, *const GLubyte);
  static glVertexAttrib4Nubv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4Nubv_str: &str = "glVertexAttrib4Nubv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4Nubv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4Nubv() {
    unimplemented!()
  }

  type glGetTexParameterIuiv_t =
    unsafe extern "system" fn(TextureTarget, GetTextureParameter, *mut GLuint);
  static glGetTexParameterIuiv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetTexParameterIuiv_str: &str = "glGetTexParameterIuiv\0";
  #[doc(hidden)]
  pub fn load_glGetTexParameterIuiv() {
    unimplemented!()
  }
  pub fn glGetTexParameterIuiv() {
    unimplemented!()
  }

  type glVertexAttrib4sv_t = unsafe extern "system" fn(GLuint, *const GLshort);
  static glVertexAttrib4sv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4sv_str: &str = "glVertexAttrib4sv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4sv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4sv() {
    unimplemented!()
  }

  type glCompressedTexSubImage2D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
    PixelFormat,
    GLsizei,
    *const c_void,
  );
  static glCompressedTexSubImage2D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glCompressedTexSubImage2D_str: &str = "glCompressedTexSubImage2D\0";
  #[doc(hidden)]
  pub fn load_glCompressedTexSubImage2D() {
    unimplemented!()
  }
  pub fn glCompressedTexSubImage2D() {
    unimplemented!()
  }

  type glVertexAttrib4Niv_t = unsafe extern "system" fn(GLuint, *const GLint);
  static glVertexAttrib4Niv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4Niv_str: &str = "glVertexAttrib4Niv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4Niv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4Niv() {
    unimplemented!()
  }

  type glTexParameterf_t =
    unsafe extern "system" fn(TextureTarget, TextureParameterName, GLfloat);
  static glTexParameterf_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexParameterf_str: &str = "glTexParameterf\0";
  #[doc(hidden)]
  pub fn load_glTexParameterf() {
    unimplemented!()
  }
  pub fn glTexParameterf() {
    unimplemented!()
  }

  type glFramebufferTexture1D_t = unsafe extern "system" fn(
    FramebufferTarget,
    FramebufferAttachment,
    TextureTarget,
    GLuint,
    GLint,
  );
  static glFramebufferTexture1D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glFramebufferTexture1D_str: &str = "glFramebufferTexture1D\0";
  #[doc(hidden)]
  pub fn load_glFramebufferTexture1D() {
    unimplemented!()
  }
  pub fn glFramebufferTexture1D() {
    unimplemented!()
  }

  type glTexImage2DMultisample_t = unsafe extern "system" fn(
    TextureTarget,
    GLsizei,
    InternalFormat,
    GLsizei,
    GLsizei,
    GLboolean,
  );
  static glTexImage2DMultisample_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glTexImage2DMultisample_str: &str = "glTexImage2DMultisample\0";
  #[doc(hidden)]
  pub fn load_glTexImage2DMultisample() {
    unimplemented!()
  }
  pub fn glTexImage2DMultisample() {
    unimplemented!()
  }

  type glUniform2f_t = unsafe extern "system" fn(GLint, GLfloat, GLfloat);
  static glUniform2f_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform2f_str: &str = "glUniform2f\0";
  #[doc(hidden)]
  pub fn load_glUniform2f() {
    unimplemented!()
  }
  pub fn glUniform2f() {
    unimplemented!()
  }

  type glUniformMatrix4x2fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix4x2fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix4x2fv_str: &str = "glUniformMatrix4x2fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix4x2fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix4x2fv() {
    unimplemented!()
  }

  type glPointSize_t = unsafe extern "system" fn(GLfloat);
  static glPointSize_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPointSize_str: &str = "glPointSize\0";
  #[doc(hidden)]
  pub fn load_glPointSize() {
    unimplemented!()
  }
  pub fn glPointSize() {
    unimplemented!()
  }

  type glTexImage3D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
    GLsizei,
    GLint,
    PixelFormat,
    PixelType,
    *const c_void,
  );
  static glTexImage3D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexImage3D_str: &str = "glTexImage3D\0";
  #[doc(hidden)]
  pub fn load_glTexImage3D() {
    unimplemented!()
  }
  pub fn glTexImage3D() {
    unimplemented!()
  }

  type glFramebufferRenderbuffer_t = unsafe extern "system" fn(
    FramebufferTarget,
    FramebufferAttachment,
    RenderbufferTarget,
    GLuint,
  );
  static glFramebufferRenderbuffer_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glFramebufferRenderbuffer_str: &str = "glFramebufferRenderbuffer\0";
  #[doc(hidden)]
  pub fn load_glFramebufferRenderbuffer() {
    unimplemented!()
  }
  pub fn glFramebufferRenderbuffer() {
    unimplemented!()
  }

  type glReadPixels_t = unsafe extern "system" fn(
    GLint,
    GLint,
    GLsizei,
    GLsizei,
    PixelFormat,
    PixelType,
    *mut c_void,
  );
  static glReadPixels_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glReadPixels_str: &str = "glReadPixels\0";
  #[doc(hidden)]
  pub fn load_glReadPixels() {
    unimplemented!()
  }
  pub fn glReadPixels() {
    unimplemented!()
  }

  type glGetInteger64v_t = unsafe extern "system" fn(GetPName, *mut GLint64);
  static glGetInteger64v_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetInteger64v_str: &str = "glGetInteger64v\0";
  #[doc(hidden)]
  pub fn load_glGetInteger64v() {
    unimplemented!()
  }
  pub fn glGetInteger64v() {
    unimplemented!()
  }

  type glGetCompressedTexImage_t =
    unsafe extern "system" fn(TextureTarget, GLint, *mut c_void);
  static glGetCompressedTexImage_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetCompressedTexImage_str: &str = "glGetCompressedTexImage\0";
  #[doc(hidden)]
  pub fn load_glGetCompressedTexImage() {
    unimplemented!()
  }
  pub fn glGetCompressedTexImage() {
    unimplemented!()
  }

  type glGetActiveUniform_t = unsafe extern "system" fn(
    GLuint,
    GLuint,
    GLsizei,
    *mut GLsizei,
    *mut GLint,
    *mut GLenum,
    *mut GLchar,
  );
  static glGetActiveUniform_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetActiveUniform_str: &str = "glGetActiveUniform\0";
  #[doc(hidden)]
  pub fn load_glGetActiveUniform() {
    unimplemented!()
  }
  pub fn glGetActiveUniform() {
    unimplemented!()
  }

  type glDeleteVertexArrays_t =
    unsafe extern "system" fn(GLsizei, *const GLuint);
  static glDeleteVertexArrays_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteVertexArrays_str: &str = "glDeleteVertexArrays\0";
  #[doc(hidden)]
  pub fn load_glDeleteVertexArrays() {
    unimplemented!()
  }
  pub fn glDeleteVertexArrays() {
    unimplemented!()
  }

  type glVertexAttrib4dv_t = unsafe extern "system" fn(GLuint, *const GLdouble);
  static glVertexAttrib4dv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4dv_str: &str = "glVertexAttrib4dv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4dv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4dv() {
    unimplemented!()
  }

  type glVertexAttribI3ui_t =
    unsafe extern "system" fn(GLuint, GLuint, GLuint, GLuint);
  static glVertexAttribI3ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI3ui_str: &str = "glVertexAttribI3ui\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI3ui() {
    unimplemented!()
  }
  pub fn glVertexAttribI3ui() {
    unimplemented!()
  }

  type glIsQuery_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsQuery_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsQuery_str: &str = "glIsQuery\0";
  #[doc(hidden)]
  pub fn load_glIsQuery() {
    unimplemented!()
  }
  pub fn glIsQuery() {
    unimplemented!()
  }

  type glRenderbufferStorageMultisample_t = unsafe extern "system" fn(
    RenderbufferTarget,
    GLsizei,
    InternalFormat,
    GLsizei,
    GLsizei,
  );
  static glRenderbufferStorageMultisample_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glRenderbufferStorageMultisample_str: &str =
    "glRenderbufferStorageMultisample\0";
  #[doc(hidden)]
  pub fn load_glRenderbufferStorageMultisample() {
    unimplemented!()
  }
  pub fn glRenderbufferStorageMultisample() {
    unimplemented!()
  }

  type glDetachShader_t = unsafe extern "system" fn(GLuint, GLuint);
  static glDetachShader_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDetachShader_str: &str = "glDetachShader\0";
  #[doc(hidden)]
  pub fn load_glDetachShader() {
    unimplemented!()
  }
  pub fn glDetachShader() {
    unimplemented!()
  }

  type glTransformFeedbackVaryings_t = unsafe extern "system" fn(
    GLuint,
    GLsizei,
    *const *const GLchar,
    TransformFeedbackBufferMode,
  );
  static glTransformFeedbackVaryings_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glTransformFeedbackVaryings_str: &str = "glTransformFeedbackVaryings\0";
  #[doc(hidden)]
  pub fn load_glTransformFeedbackVaryings() {
    unimplemented!()
  }
  pub fn glTransformFeedbackVaryings() {
    unimplemented!()
  }

  type glGetUniformuiv_t =
    unsafe extern "system" fn(GLuint, GLint, *mut GLuint);
  static glGetUniformuiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetUniformuiv_str: &str = "glGetUniformuiv\0";
  #[doc(hidden)]
  pub fn load_glGetUniformuiv() {
    unimplemented!()
  }
  pub fn glGetUniformuiv() {
    unimplemented!()
  }

  type glTexBuffer_t =
    unsafe extern "system" fn(TextureTarget, InternalFormat, GLuint);
  static glTexBuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexBuffer_str: &str = "glTexBuffer\0";
  #[doc(hidden)]
  pub fn load_glTexBuffer() {
    unimplemented!()
  }
  pub fn glTexBuffer() {
    unimplemented!()
  }

  type glFlushMappedBufferRange_t =
    unsafe extern "system" fn(BufferTargetARB, GLintptr, GLsizeiptr);
  static glFlushMappedBufferRange_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glFlushMappedBufferRange_str: &str = "glFlushMappedBufferRange\0";
  #[doc(hidden)]
  pub fn load_glFlushMappedBufferRange() {
    unimplemented!()
  }
  pub fn glFlushMappedBufferRange() {
    unimplemented!()
  }

  type glGetString_t = unsafe extern "system" fn(StringName) -> GLubyte;
  static glGetString_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetString_str: &str = "glGetString\0";
  #[doc(hidden)]
  pub fn load_glGetString() {
    unimplemented!()
  }
  pub fn glGetString() {
    unimplemented!()
  }

  type glMultiDrawElements_t = unsafe extern "system" fn(
    PrimitiveType,
    *const GLsizei,
    DrawElementsType,
    *const *const c_void,
    GLsizei,
  );
  static glMultiDrawElements_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glMultiDrawElements_str: &str = "glMultiDrawElements\0";
  #[doc(hidden)]
  pub fn load_glMultiDrawElements() {
    unimplemented!()
  }
  pub fn glMultiDrawElements() {
    unimplemented!()
  }

  type glGetSamplerParameterfv_t =
    unsafe extern "system" fn(GLuint, SamplerParameterF, *mut GLfloat);
  static glGetSamplerParameterfv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetSamplerParameterfv_str: &str = "glGetSamplerParameterfv\0";
  #[doc(hidden)]
  pub fn load_glGetSamplerParameterfv() {
    unimplemented!()
  }
  pub fn glGetSamplerParameterfv() {
    unimplemented!()
  }

  type glUniformMatrix2x3fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix2x3fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix2x3fv_str: &str = "glUniformMatrix2x3fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix2x3fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix2x3fv() {
    unimplemented!()
  }

  type glRenderbufferStorage_t = unsafe extern "system" fn(
    RenderbufferTarget,
    InternalFormat,
    GLsizei,
    GLsizei,
  );
  static glRenderbufferStorage_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glRenderbufferStorage_str: &str = "glRenderbufferStorage\0";
  #[doc(hidden)]
  pub fn load_glRenderbufferStorage() {
    unimplemented!()
  }
  pub fn glRenderbufferStorage() {
    unimplemented!()
  }

  type glGetInteger64i_v_t =
    unsafe extern "system" fn(GLenum, GLuint, *mut GLint64);
  static glGetInteger64i_v_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetInteger64i_v_str: &str = "glGetInteger64i_v\0";
  #[doc(hidden)]
  pub fn load_glGetInteger64i_v() {
    unimplemented!()
  }
  pub fn glGetInteger64i_v() {
    unimplemented!()
  }

  type glPointParameterf_t =
    unsafe extern "system" fn(PointParameterNameARB, GLfloat);
  static glPointParameterf_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPointParameterf_str: &str = "glPointParameterf\0";
  #[doc(hidden)]
  pub fn load_glPointParameterf() {
    unimplemented!()
  }
  pub fn glPointParameterf() {
    unimplemented!()
  }

  type glCopyTexImage2D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    InternalFormat,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
    GLint,
  );
  static glCopyTexImage2D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCopyTexImage2D_str: &str = "glCopyTexImage2D\0";
  #[doc(hidden)]
  pub fn load_glCopyTexImage2D() {
    unimplemented!()
  }
  pub fn glCopyTexImage2D() {
    unimplemented!()
  }

  type glGetUniformIndices_t = unsafe extern "system" fn(
    GLuint,
    GLsizei,
    *const *const GLchar,
    *mut GLuint,
  );
  static glGetUniformIndices_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetUniformIndices_str: &str = "glGetUniformIndices\0";
  #[doc(hidden)]
  pub fn load_glGetUniformIndices() {
    unimplemented!()
  }
  pub fn glGetUniformIndices() {
    unimplemented!()
  }

  type glUniform2iv_t = unsafe extern "system" fn(GLint, GLsizei, *const GLint);
  static glUniform2iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform2iv_str: &str = "glUniform2iv\0";
  #[doc(hidden)]
  pub fn load_glUniform2iv() {
    unimplemented!()
  }
  pub fn glUniform2iv() {
    unimplemented!()
  }

  type glVertexAttrib3fv_t = unsafe extern "system" fn(GLuint, *const GLfloat);
  static glVertexAttrib3fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib3fv_str: &str = "glVertexAttrib3fv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib3fv() {
    unimplemented!()
  }
  pub fn glVertexAttrib3fv() {
    unimplemented!()
  }

  type glGetActiveUniformBlockiv_t =
    unsafe extern "system" fn(GLuint, GLuint, UniformBlockPName, *mut GLint);
  static glGetActiveUniformBlockiv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetActiveUniformBlockiv_str: &str = "glGetActiveUniformBlockiv\0";
  #[doc(hidden)]
  pub fn load_glGetActiveUniformBlockiv() {
    unimplemented!()
  }
  pub fn glGetActiveUniformBlockiv() {
    unimplemented!()
  }

  type glTexParameteriv_t = unsafe extern "system" fn(
    TextureTarget,
    TextureParameterName,
    *const GLint,
  );
  static glTexParameteriv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexParameteriv_str: &str = "glTexParameteriv\0";
  #[doc(hidden)]
  pub fn load_glTexParameteriv() {
    unimplemented!()
  }
  pub fn glTexParameteriv() {
    unimplemented!()
  }

  type glTexParameteri_t =
    unsafe extern "system" fn(TextureTarget, TextureParameterName, GLint);
  static glTexParameteri_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexParameteri_str: &str = "glTexParameteri\0";
  #[doc(hidden)]
  pub fn load_glTexParameteri() {
    unimplemented!()
  }
  pub fn glTexParameteri() {
    unimplemented!()
  }

  type glUniformMatrix3x2fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix3x2fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix3x2fv_str: &str = "glUniformMatrix3x2fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix3x2fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix3x2fv() {
    unimplemented!()
  }

  type glFinish_t = unsafe extern "system" fn();
  static glFinish_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glFinish_str: &str = "glFinish\0";
  #[doc(hidden)]
  pub fn load_glFinish() {
    unimplemented!()
  }
  pub fn glFinish() {
    unimplemented!()
  }

  type glVertexAttrib2fv_t = unsafe extern "system" fn(GLuint, *const GLfloat);
  static glVertexAttrib2fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib2fv_str: &str = "glVertexAttrib2fv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib2fv() {
    unimplemented!()
  }
  pub fn glVertexAttrib2fv() {
    unimplemented!()
  }

  type glBindFragDataLocation_t =
    unsafe extern "system" fn(GLuint, GLuint, *const GLchar);
  static glBindFragDataLocation_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glBindFragDataLocation_str: &str = "glBindFragDataLocation\0";
  #[doc(hidden)]
  pub fn load_glBindFragDataLocation() {
    unimplemented!()
  }
  pub fn glBindFragDataLocation() {
    unimplemented!()
  }

  type glVertexAttribP1uiv_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerType,
    GLboolean,
    *const GLuint,
  );
  static glVertexAttribP1uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribP1uiv_str: &str = "glVertexAttribP1uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribP1uiv() {
    unimplemented!()
  }
  pub fn glVertexAttribP1uiv() {
    unimplemented!()
  }

  type glDisableVertexAttribArray_t = unsafe extern "system" fn(GLuint);
  static glDisableVertexAttribArray_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glDisableVertexAttribArray_str: &str = "glDisableVertexAttribArray\0";
  #[doc(hidden)]
  pub fn load_glDisableVertexAttribArray() {
    unimplemented!()
  }
  pub fn glDisableVertexAttribArray() {
    unimplemented!()
  }

  type glClear_t = unsafe extern "system" fn(ClearBufferMask);
  static glClear_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClear_str: &str = "glClear\0";
  #[doc(hidden)]
  pub fn load_glClear() {
    unimplemented!()
  }
  pub fn glClear() {
    unimplemented!()
  }

  type glDeleteTextures_t = unsafe extern "system" fn(GLsizei, *const GLuint);
  static glDeleteTextures_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteTextures_str: &str = "glDeleteTextures\0";
  #[doc(hidden)]
  pub fn load_glDeleteTextures() {
    unimplemented!()
  }
  pub fn glDeleteTextures() {
    unimplemented!()
  }

  type glCopyTexSubImage3D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLint,
    GLint,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
  );
  static glCopyTexSubImage3D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCopyTexSubImage3D_str: &str = "glCopyTexSubImage3D\0";
  #[doc(hidden)]
  pub fn load_glCopyTexSubImage3D() {
    unimplemented!()
  }
  pub fn glCopyTexSubImage3D() {
    unimplemented!()
  }

  type glBufferSubData_t = unsafe extern "system" fn(
    BufferTargetARB,
    GLintptr,
    GLsizeiptr,
    *const c_void,
  );
  static glBufferSubData_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBufferSubData_str: &str = "glBufferSubData\0";
  #[doc(hidden)]
  pub fn load_glBufferSubData() {
    unimplemented!()
  }
  pub fn glBufferSubData() {
    unimplemented!()
  }

  type glVertexAttrib4Nbv_t = unsafe extern "system" fn(GLuint, *const GLbyte);
  static glVertexAttrib4Nbv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4Nbv_str: &str = "glVertexAttrib4Nbv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4Nbv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4Nbv() {
    unimplemented!()
  }

  type glVertexAttribI4ubv_t =
    unsafe extern "system" fn(GLuint, *const GLubyte);
  static glVertexAttribI4ubv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI4ubv_str: &str = "glVertexAttribI4ubv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI4ubv() {
    unimplemented!()
  }
  pub fn glVertexAttribI4ubv() {
    unimplemented!()
  }

  type glVertexAttrib4usv_t =
    unsafe extern "system" fn(GLuint, *const GLushort);
  static glVertexAttrib4usv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4usv_str: &str = "glVertexAttrib4usv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4usv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4usv() {
    unimplemented!()
  }

  type glBindBufferRange_t = unsafe extern "system" fn(
    BufferTargetARB,
    GLuint,
    GLuint,
    GLintptr,
    GLsizeiptr,
  );
  static glBindBufferRange_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindBufferRange_str: &str = "glBindBufferRange\0";
  #[doc(hidden)]
  pub fn load_glBindBufferRange() {
    unimplemented!()
  }
  pub fn glBindBufferRange() {
    unimplemented!()
  }

  type glCopyTexSubImage2D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLint,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
  );
  static glCopyTexSubImage2D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCopyTexSubImage2D_str: &str = "glCopyTexSubImage2D\0";
  #[doc(hidden)]
  pub fn load_glCopyTexSubImage2D() {
    unimplemented!()
  }
  pub fn glCopyTexSubImage2D() {
    unimplemented!()
  }

  type glVertexAttribPointer_t = unsafe extern "system" fn(
    GLuint,
    GLint,
    VertexAttribPointerType,
    GLboolean,
    GLsizei,
    *const c_void,
  );
  static glVertexAttribPointer_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glVertexAttribPointer_str: &str = "glVertexAttribPointer\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribPointer() {
    unimplemented!()
  }
  pub fn glVertexAttribPointer() {
    unimplemented!()
  }

  type glSampleCoverage_t = unsafe extern "system" fn(GLfloat, GLboolean);
  static glSampleCoverage_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glSampleCoverage_str: &str = "glSampleCoverage\0";
  #[doc(hidden)]
  pub fn load_glSampleCoverage() {
    unimplemented!()
  }
  pub fn glSampleCoverage() {
    unimplemented!()
  }

  type glVertexAttrib1fv_t = unsafe extern "system" fn(GLuint, *const GLfloat);
  static glVertexAttrib1fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib1fv_str: &str = "glVertexAttrib1fv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib1fv() {
    unimplemented!()
  }
  pub fn glVertexAttrib1fv() {
    unimplemented!()
  }

  type glScissor_t = unsafe extern "system" fn(GLint, GLint, GLsizei, GLsizei);
  static glScissor_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glScissor_str: &str = "glScissor\0";
  #[doc(hidden)]
  pub fn load_glScissor() {
    unimplemented!()
  }
  pub fn glScissor() {
    unimplemented!()
  }

  type glUniformMatrix4x3fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix4x3fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix4x3fv_str: &str = "glUniformMatrix4x3fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix4x3fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix4x3fv() {
    unimplemented!()
  }

  type glLinkProgram_t = unsafe extern "system" fn(GLuint);
  static glLinkProgram_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glLinkProgram_str: &str = "glLinkProgram\0";
  #[doc(hidden)]
  pub fn load_glLinkProgram() {
    unimplemented!()
  }
  pub fn glLinkProgram() {
    unimplemented!()
  }

  type glFramebufferTextureLayer_t = unsafe extern "system" fn(
    FramebufferTarget,
    FramebufferAttachment,
    GLuint,
    GLint,
    GLint,
  );
  static glFramebufferTextureLayer_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glFramebufferTextureLayer_str: &str = "glFramebufferTextureLayer\0";
  #[doc(hidden)]
  pub fn load_glFramebufferTextureLayer() {
    unimplemented!()
  }
  pub fn glFramebufferTextureLayer() {
    unimplemented!()
  }

  type glUniform4ui_t =
    unsafe extern "system" fn(GLint, GLuint, GLuint, GLuint, GLuint);
  static glUniform4ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform4ui_str: &str = "glUniform4ui\0";
  #[doc(hidden)]
  pub fn load_glUniform4ui() {
    unimplemented!()
  }
  pub fn glUniform4ui() {
    unimplemented!()
  }

  type glGetBufferSubData_t = unsafe extern "system" fn(
    BufferTargetARB,
    GLintptr,
    GLsizeiptr,
    *mut c_void,
  );
  static glGetBufferSubData_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetBufferSubData_str: &str = "glGetBufferSubData\0";
  #[doc(hidden)]
  pub fn load_glGetBufferSubData() {
    unimplemented!()
  }
  pub fn glGetBufferSubData() {
    unimplemented!()
  }

  type glTexImage3DMultisample_t = unsafe extern "system" fn(
    TextureTarget,
    GLsizei,
    InternalFormat,
    GLsizei,
    GLsizei,
    GLsizei,
    GLboolean,
  );
  static glTexImage3DMultisample_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glTexImage3DMultisample_str: &str = "glTexImage3DMultisample\0";
  #[doc(hidden)]
  pub fn load_glTexImage3DMultisample() {
    unimplemented!()
  }
  pub fn glTexImage3DMultisample() {
    unimplemented!()
  }

  type glVertexAttribI2ui_t = unsafe extern "system" fn(GLuint, GLuint, GLuint);
  static glVertexAttribI2ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI2ui_str: &str = "glVertexAttribI2ui\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI2ui() {
    unimplemented!()
  }
  pub fn glVertexAttribI2ui() {
    unimplemented!()
  }

  type glDrawRangeElementsBaseVertex_t = unsafe extern "system" fn(
    PrimitiveType,
    GLuint,
    GLuint,
    GLsizei,
    DrawElementsType,
    *const c_void,
    GLint,
  );
  static glDrawRangeElementsBaseVertex_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glDrawRangeElementsBaseVertex_str: &str =
    "glDrawRangeElementsBaseVertex\0";
  #[doc(hidden)]
  pub fn load_glDrawRangeElementsBaseVertex() {
    unimplemented!()
  }
  pub fn glDrawRangeElementsBaseVertex() {
    unimplemented!()
  }

  type glActiveTexture_t = unsafe extern "system" fn(TextureUnit);
  static glActiveTexture_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glActiveTexture_str: &str = "glActiveTexture\0";
  #[doc(hidden)]
  pub fn load_glActiveTexture() {
    unimplemented!()
  }
  pub fn glActiveTexture() {
    unimplemented!()
  }

  type glGetSamplerParameterIiv_t =
    unsafe extern "system" fn(GLuint, SamplerParameterI, *mut GLint);
  static glGetSamplerParameterIiv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetSamplerParameterIiv_str: &str = "glGetSamplerParameterIiv\0";
  #[doc(hidden)]
  pub fn load_glGetSamplerParameterIiv() {
    unimplemented!()
  }
  pub fn glGetSamplerParameterIiv() {
    unimplemented!()
  }

  type glVertexAttribI4usv_t =
    unsafe extern "system" fn(GLuint, *const GLushort);
  static glVertexAttribI4usv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI4usv_str: &str = "glVertexAttribI4usv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI4usv() {
    unimplemented!()
  }
  pub fn glVertexAttribI4usv() {
    unimplemented!()
  }

  type glSampleMaski_t = unsafe extern "system" fn(GLuint, GLbitfield);
  static glSampleMaski_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glSampleMaski_str: &str = "glSampleMaski\0";
  #[doc(hidden)]
  pub fn load_glSampleMaski() {
    unimplemented!()
  }
  pub fn glSampleMaski() {
    unimplemented!()
  }

  type glColorMaski_t = unsafe extern "system" fn(
    GLuint,
    GLboolean,
    GLboolean,
    GLboolean,
    GLboolean,
  );
  static glColorMaski_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glColorMaski_str: &str = "glColorMaski\0";
  #[doc(hidden)]
  pub fn load_glColorMaski() {
    unimplemented!()
  }
  pub fn glColorMaski() {
    unimplemented!()
  }

  type glTexParameterIuiv_t = unsafe extern "system" fn(
    TextureTarget,
    TextureParameterName,
    *const GLuint,
  );
  static glTexParameterIuiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexParameterIuiv_str: &str = "glTexParameterIuiv\0";
  #[doc(hidden)]
  pub fn load_glTexParameterIuiv() {
    unimplemented!()
  }
  pub fn glTexParameterIuiv() {
    unimplemented!()
  }

  type glGetSynciv_t = unsafe extern "system" fn(
    GLsync,
    SyncParameterName,
    GLsizei,
    *mut GLsizei,
    *mut GLint,
  );
  static glGetSynciv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetSynciv_str: &str = "glGetSynciv\0";
  #[doc(hidden)]
  pub fn load_glGetSynciv() {
    unimplemented!()
  }
  pub fn glGetSynciv() {
    unimplemented!()
  }

  type glDrawBuffer_t = unsafe extern "system" fn(DrawBufferMode);
  static glDrawBuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDrawBuffer_str: &str = "glDrawBuffer\0";
  #[doc(hidden)]
  pub fn load_glDrawBuffer() {
    unimplemented!()
  }
  pub fn glDrawBuffer() {
    unimplemented!()
  }

  type glViewport_t = unsafe extern "system" fn(GLint, GLint, GLsizei, GLsizei);
  static glViewport_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glViewport_str: &str = "glViewport\0";
  #[doc(hidden)]
  pub fn load_glViewport() {
    unimplemented!()
  }
  pub fn glViewport() {
    unimplemented!()
  }

  type glGetVertexAttribiv_t =
    unsafe extern "system" fn(GLuint, VertexAttribPropertyARB, *mut GLint);
  static glGetVertexAttribiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetVertexAttribiv_str: &str = "glGetVertexAttribiv\0";
  #[doc(hidden)]
  pub fn load_glGetVertexAttribiv() {
    unimplemented!()
  }
  pub fn glGetVertexAttribiv() {
    unimplemented!()
  }

  type glDrawBuffers_t = unsafe extern "system" fn(GLsizei, *const GLenum);
  static glDrawBuffers_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDrawBuffers_str: &str = "glDrawBuffers\0";
  #[doc(hidden)]
  pub fn load_glDrawBuffers() {
    unimplemented!()
  }
  pub fn glDrawBuffers() {
    unimplemented!()
  }

  type glGetTexParameterfv_t =
    unsafe extern "system" fn(TextureTarget, GetTextureParameter, *mut GLfloat);
  static glGetTexParameterfv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetTexParameterfv_str: &str = "glGetTexParameterfv\0";
  #[doc(hidden)]
  pub fn load_glGetTexParameterfv() {
    unimplemented!()
  }
  pub fn glGetTexParameterfv() {
    unimplemented!()
  }

  type glIsSampler_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsSampler_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsSampler_str: &str = "glIsSampler\0";
  #[doc(hidden)]
  pub fn load_glIsSampler() {
    unimplemented!()
  }
  pub fn glIsSampler() {
    unimplemented!()
  }

  type glVertexAttribP2uiv_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerType,
    GLboolean,
    *const GLuint,
  );
  static glVertexAttribP2uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribP2uiv_str: &str = "glVertexAttribP2uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribP2uiv() {
    unimplemented!()
  }
  pub fn glVertexAttribP2uiv() {
    unimplemented!()
  }

  type glDrawArraysInstanced_t =
    unsafe extern "system" fn(PrimitiveType, GLint, GLsizei, GLsizei);
  static glDrawArraysInstanced_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glDrawArraysInstanced_str: &str = "glDrawArraysInstanced\0";
  #[doc(hidden)]
  pub fn load_glDrawArraysInstanced() {
    unimplemented!()
  }
  pub fn glDrawArraysInstanced() {
    unimplemented!()
  }

  type glGetAttribLocation_t =
    unsafe extern "system" fn(GLuint, *const GLchar) -> GLint;
  static glGetAttribLocation_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetAttribLocation_str: &str = "glGetAttribLocation\0";
  #[doc(hidden)]
  pub fn load_glGetAttribLocation() {
    unimplemented!()
  }
  pub fn glGetAttribLocation() {
    unimplemented!()
  }

  type glGetTexLevelParameteriv_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GetTextureParameter,
    *mut GLint,
  );
  static glGetTexLevelParameteriv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetTexLevelParameteriv_str: &str = "glGetTexLevelParameteriv\0";
  #[doc(hidden)]
  pub fn load_glGetTexLevelParameteriv() {
    unimplemented!()
  }
  pub fn glGetTexLevelParameteriv() {
    unimplemented!()
  }

  type glDepthMask_t = unsafe extern "system" fn(GLboolean);
  static glDepthMask_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDepthMask_str: &str = "glDepthMask\0";
  #[doc(hidden)]
  pub fn load_glDepthMask() {
    unimplemented!()
  }
  pub fn glDepthMask() {
    unimplemented!()
  }

  type glClearBufferuiv_t =
    unsafe extern "system" fn(Buffer, GLint, *const GLuint);
  static glClearBufferuiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClearBufferuiv_str: &str = "glClearBufferuiv\0";
  #[doc(hidden)]
  pub fn load_glClearBufferuiv() {
    unimplemented!()
  }
  pub fn glClearBufferuiv() {
    unimplemented!()
  }

  type glVertexAttribI2uiv_t = unsafe extern "system" fn(GLuint, *const GLuint);
  static glVertexAttribI2uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI2uiv_str: &str = "glVertexAttribI2uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI2uiv() {
    unimplemented!()
  }
  pub fn glVertexAttribI2uiv() {
    unimplemented!()
  }

  type glMultiDrawElementsBaseVertex_t = unsafe extern "system" fn(
    PrimitiveType,
    *const GLsizei,
    DrawElementsType,
    *const *const c_void,
    GLsizei,
    *const GLint,
  );
  static glMultiDrawElementsBaseVertex_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glMultiDrawElementsBaseVertex_str: &str =
    "glMultiDrawElementsBaseVertex\0";
  #[doc(hidden)]
  pub fn load_glMultiDrawElementsBaseVertex() {
    unimplemented!()
  }
  pub fn glMultiDrawElementsBaseVertex() {
    unimplemented!()
  }

  type glCreateProgram_t = unsafe extern "system" fn() -> GLuint;
  static glCreateProgram_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCreateProgram_str: &str = "glCreateProgram\0";
  #[doc(hidden)]
  pub fn load_glCreateProgram() {
    unimplemented!()
  }
  pub fn glCreateProgram() {
    unimplemented!()
  }

  type glDisablei_t = unsafe extern "system" fn(EnableCap, GLuint);
  static glDisablei_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDisablei_str: &str = "glDisablei\0";
  #[doc(hidden)]
  pub fn load_glDisablei() {
    unimplemented!()
  }
  pub fn glDisablei() {
    unimplemented!()
  }

  type glTexSubImage2D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
    PixelFormat,
    PixelType,
    *const c_void,
  );
  static glTexSubImage2D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexSubImage2D_str: &str = "glTexSubImage2D\0";
  #[doc(hidden)]
  pub fn load_glTexSubImage2D() {
    unimplemented!()
  }
  pub fn glTexSubImage2D() {
    unimplemented!()
  }

  type glGetIntegeri_v_t =
    unsafe extern "system" fn(GLenum, GLuint, *mut GLint);
  static glGetIntegeri_v_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetIntegeri_v_str: &str = "glGetIntegeri_v\0";
  #[doc(hidden)]
  pub fn load_glGetIntegeri_v() {
    unimplemented!()
  }
  pub fn glGetIntegeri_v() {
    unimplemented!()
  }

  type glIsVertexArray_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsVertexArray_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsVertexArray_str: &str = "glIsVertexArray\0";
  #[doc(hidden)]
  pub fn load_glIsVertexArray() {
    unimplemented!()
  }
  pub fn glIsVertexArray() {
    unimplemented!()
  }

  type glDeleteShader_t = unsafe extern "system" fn(GLuint);
  static glDeleteShader_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteShader_str: &str = "glDeleteShader\0";
  #[doc(hidden)]
  pub fn load_glDeleteShader() {
    unimplemented!()
  }
  pub fn glDeleteShader() {
    unimplemented!()
  }

  type glPolygonMode_t = unsafe extern "system" fn(MaterialFace, PolygonMode);
  static glPolygonMode_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPolygonMode_str: &str = "glPolygonMode\0";
  #[doc(hidden)]
  pub fn load_glPolygonMode() {
    unimplemented!()
  }
  pub fn glPolygonMode() {
    unimplemented!()
  }

  type glReadBuffer_t = unsafe extern "system" fn(ReadBufferMode);
  static glReadBuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glReadBuffer_str: &str = "glReadBuffer\0";
  #[doc(hidden)]
  pub fn load_glReadBuffer() {
    unimplemented!()
  }
  pub fn glReadBuffer() {
    unimplemented!()
  }

  type glDeleteFramebuffers_t =
    unsafe extern "system" fn(GLsizei, *const GLuint);
  static glDeleteFramebuffers_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteFramebuffers_str: &str = "glDeleteFramebuffers\0";
  #[doc(hidden)]
  pub fn load_glDeleteFramebuffers() {
    unimplemented!()
  }
  pub fn glDeleteFramebuffers() {
    unimplemented!()
  }

  type glWaitSync_t = unsafe extern "system" fn(GLsync, GLbitfield, GLuint64);
  static glWaitSync_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glWaitSync_str: &str = "glWaitSync\0";
  #[doc(hidden)]
  pub fn load_glWaitSync() {
    unimplemented!()
  }
  pub fn glWaitSync() {
    unimplemented!()
  }

  type glGetBufferPointerv_t = unsafe extern "system" fn(
    BufferTargetARB,
    BufferPointerNameARB,
    *mut *mut c_void,
  );
  static glGetBufferPointerv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetBufferPointerv_str: &str = "glGetBufferPointerv\0";
  #[doc(hidden)]
  pub fn load_glGetBufferPointerv() {
    unimplemented!()
  }
  pub fn glGetBufferPointerv() {
    unimplemented!()
  }

  type glCompressedTexImage3D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    InternalFormat,
    GLsizei,
    GLsizei,
    GLsizei,
    GLint,
    GLsizei,
    *const c_void,
  );
  static glCompressedTexImage3D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glCompressedTexImage3D_str: &str = "glCompressedTexImage3D\0";
  #[doc(hidden)]
  pub fn load_glCompressedTexImage3D() {
    unimplemented!()
  }
  pub fn glCompressedTexImage3D() {
    unimplemented!()
  }

  type glCullFace_t = unsafe extern "system" fn(CullFaceMode);
  static glCullFace_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCullFace_str: &str = "glCullFace\0";
  #[doc(hidden)]
  pub fn load_glCullFace() {
    unimplemented!()
  }
  pub fn glCullFace() {
    unimplemented!()
  }

  type glVertexAttrib4ubv_t = unsafe extern "system" fn(GLuint, *const GLubyte);
  static glVertexAttrib4ubv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4ubv_str: &str = "glVertexAttrib4ubv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4ubv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4ubv() {
    unimplemented!()
  }

  type glStencilOpSeparate_t = unsafe extern "system" fn(
    StencilFaceDirection,
    StencilOp,
    StencilOp,
    StencilOp,
  );
  static glStencilOpSeparate_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glStencilOpSeparate_str: &str = "glStencilOpSeparate\0";
  #[doc(hidden)]
  pub fn load_glStencilOpSeparate() {
    unimplemented!()
  }
  pub fn glStencilOpSeparate() {
    unimplemented!()
  }

  type glCopyBufferSubData_t = unsafe extern "system" fn(
    CopyBufferSubDataTarget,
    CopyBufferSubDataTarget,
    GLintptr,
    GLintptr,
    GLsizeiptr,
  );
  static glCopyBufferSubData_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCopyBufferSubData_str: &str = "glCopyBufferSubData\0";
  #[doc(hidden)]
  pub fn load_glCopyBufferSubData() {
    unimplemented!()
  }
  pub fn glCopyBufferSubData() {
    unimplemented!()
  }

  type glVertexAttribP3ui_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerType,
    GLboolean,
    GLuint,
  );
  static glVertexAttribP3ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribP3ui_str: &str = "glVertexAttribP3ui\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribP3ui() {
    unimplemented!()
  }
  pub fn glVertexAttribP3ui() {
    unimplemented!()
  }

  type glUniform4iv_t = unsafe extern "system" fn(GLint, GLsizei, *const GLint);
  static glUniform4iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform4iv_str: &str = "glUniform4iv\0";
  #[doc(hidden)]
  pub fn load_glUniform4iv() {
    unimplemented!()
  }
  pub fn glUniform4iv() {
    unimplemented!()
  }

  type glVertexAttrib1dv_t = unsafe extern "system" fn(GLuint, *const GLdouble);
  static glVertexAttrib1dv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib1dv_str: &str = "glVertexAttrib1dv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib1dv() {
    unimplemented!()
  }
  pub fn glVertexAttrib1dv() {
    unimplemented!()
  }

  type glVertexAttrib4Nuiv_t = unsafe extern "system" fn(GLuint, *const GLuint);
  static glVertexAttrib4Nuiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4Nuiv_str: &str = "glVertexAttrib4Nuiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4Nuiv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4Nuiv() {
    unimplemented!()
  }

  type glGenBuffers_t = unsafe extern "system" fn(GLsizei, *mut GLuint);
  static glGenBuffers_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGenBuffers_str: &str = "glGenBuffers\0";
  #[doc(hidden)]
  pub fn load_glGenBuffers() {
    unimplemented!()
  }
  pub fn glGenBuffers() {
    unimplemented!()
  }

  type glBindTexture_t = unsafe extern "system" fn(TextureTarget, GLuint);
  static glBindTexture_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindTexture_str: &str = "glBindTexture\0";
  #[doc(hidden)]
  pub fn load_glBindTexture() {
    unimplemented!()
  }
  pub fn glBindTexture() {
    unimplemented!()
  }

  type glAttachShader_t = unsafe extern "system" fn(GLuint, GLuint);
  static glAttachShader_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glAttachShader_str: &str = "glAttachShader\0";
  #[doc(hidden)]
  pub fn load_glAttachShader() {
    unimplemented!()
  }
  pub fn glAttachShader() {
    unimplemented!()
  }

  type glCompressedTexSubImage3D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLint,
    GLint,
    GLsizei,
    GLsizei,
    GLsizei,
    PixelFormat,
    GLsizei,
    *const c_void,
  );
  static glCompressedTexSubImage3D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glCompressedTexSubImage3D_str: &str = "glCompressedTexSubImage3D\0";
  #[doc(hidden)]
  pub fn load_glCompressedTexSubImage3D() {
    unimplemented!()
  }
  pub fn glCompressedTexSubImage3D() {
    unimplemented!()
  }

  type glEndConditionalRender_t = unsafe extern "system" fn();
  static glEndConditionalRender_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glEndConditionalRender_str: &str = "glEndConditionalRender\0";
  #[doc(hidden)]
  pub fn load_glEndConditionalRender() {
    unimplemented!()
  }
  pub fn glEndConditionalRender() {
    unimplemented!()
  }

  type glIsShader_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsShader_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsShader_str: &str = "glIsShader\0";
  #[doc(hidden)]
  pub fn load_glIsShader() {
    unimplemented!()
  }
  pub fn glIsShader() {
    unimplemented!()
  }

  type glClientWaitSync_t =
    unsafe extern "system" fn(GLsync, SyncObjectMask, GLuint64) -> GLenum;
  static glClientWaitSync_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClientWaitSync_str: &str = "glClientWaitSync\0";
  #[doc(hidden)]
  pub fn load_glClientWaitSync() {
    unimplemented!()
  }
  pub fn glClientWaitSync() {
    unimplemented!()
  }

  type glPointParameteriv_t =
    unsafe extern "system" fn(PointParameterNameARB, *const GLint);
  static glPointParameteriv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPointParameteriv_str: &str = "glPointParameteriv\0";
  #[doc(hidden)]
  pub fn load_glPointParameteriv() {
    unimplemented!()
  }
  pub fn glPointParameteriv() {
    unimplemented!()
  }

  type glVertexAttrib1f_t = unsafe extern "system" fn(GLuint, GLfloat);
  static glVertexAttrib1f_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib1f_str: &str = "glVertexAttrib1f\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib1f() {
    unimplemented!()
  }
  pub fn glVertexAttrib1f() {
    unimplemented!()
  }

  type glVertexAttrib3sv_t = unsafe extern "system" fn(GLuint, *const GLshort);
  static glVertexAttrib3sv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib3sv_str: &str = "glVertexAttrib3sv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib3sv() {
    unimplemented!()
  }
  pub fn glVertexAttrib3sv() {
    unimplemented!()
  }

  type glSamplerParameterf_t =
    unsafe extern "system" fn(GLuint, SamplerParameterF, GLfloat);
  static glSamplerParameterf_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glSamplerParameterf_str: &str = "glSamplerParameterf\0";
  #[doc(hidden)]
  pub fn load_glSamplerParameterf() {
    unimplemented!()
  }
  pub fn glSamplerParameterf() {
    unimplemented!()
  }

  type glIsTexture_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsTexture_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsTexture_str: &str = "glIsTexture\0";
  #[doc(hidden)]
  pub fn load_glIsTexture() {
    unimplemented!()
  }
  pub fn glIsTexture() {
    unimplemented!()
  }

  type glTexSubImage1D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    GLint,
    GLsizei,
    PixelFormat,
    PixelType,
    *const c_void,
  );
  static glTexSubImage1D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glTexSubImage1D_str: &str = "glTexSubImage1D\0";
  #[doc(hidden)]
  pub fn load_glTexSubImage1D() {
    unimplemented!()
  }
  pub fn glTexSubImage1D() {
    unimplemented!()
  }

  type glUniformMatrix3fv_t =
    unsafe extern "system" fn(GLint, GLsizei, GLboolean, *const GLfloat);
  static glUniformMatrix3fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniformMatrix3fv_str: &str = "glUniformMatrix3fv\0";
  #[doc(hidden)]
  pub fn load_glUniformMatrix3fv() {
    unimplemented!()
  }
  pub fn glUniformMatrix3fv() {
    unimplemented!()
  }

  type glUniform1i_t = unsafe extern "system" fn(GLint, GLint);
  static glUniform1i_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform1i_str: &str = "glUniform1i\0";
  #[doc(hidden)]
  pub fn load_glUniform1i() {
    unimplemented!()
  }
  pub fn glUniform1i() {
    unimplemented!()
  }

  type glBindBufferBase_t =
    unsafe extern "system" fn(BufferTargetARB, GLuint, GLuint);
  static glBindBufferBase_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindBufferBase_str: &str = "glBindBufferBase\0";
  #[doc(hidden)]
  pub fn load_glBindBufferBase() {
    unimplemented!()
  }
  pub fn glBindBufferBase() {
    unimplemented!()
  }

  type glBlendColor_t =
    unsafe extern "system" fn(GLfloat, GLfloat, GLfloat, GLfloat);
  static glBlendColor_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBlendColor_str: &str = "glBlendColor\0";
  #[doc(hidden)]
  pub fn load_glBlendColor() {
    unimplemented!()
  }
  pub fn glBlendColor() {
    unimplemented!()
  }

  type glVertexAttrib4s_t =
    unsafe extern "system" fn(GLuint, GLshort, GLshort, GLshort, GLshort);
  static glVertexAttrib4s_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4s_str: &str = "glVertexAttrib4s\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4s() {
    unimplemented!()
  }
  pub fn glVertexAttrib4s() {
    unimplemented!()
  }

  type glDrawElementsBaseVertex_t = unsafe extern "system" fn(
    PrimitiveType,
    GLsizei,
    DrawElementsType,
    *const c_void,
    GLint,
  );
  static glDrawElementsBaseVertex_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glDrawElementsBaseVertex_str: &str = "glDrawElementsBaseVertex\0";
  #[doc(hidden)]
  pub fn load_glDrawElementsBaseVertex() {
    unimplemented!()
  }
  pub fn glDrawElementsBaseVertex() {
    unimplemented!()
  }

  type glDeleteProgram_t = unsafe extern "system" fn(GLuint);
  static glDeleteProgram_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteProgram_str: &str = "glDeleteProgram\0";
  #[doc(hidden)]
  pub fn load_glDeleteProgram() {
    unimplemented!()
  }
  pub fn glDeleteProgram() {
    unimplemented!()
  }

  type glUniform4uiv_t =
    unsafe extern "system" fn(GLint, GLsizei, *const GLuint);
  static glUniform4uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform4uiv_str: &str = "glUniform4uiv\0";
  #[doc(hidden)]
  pub fn load_glUniform4uiv() {
    unimplemented!()
  }
  pub fn glUniform4uiv() {
    unimplemented!()
  }

  type glProvokingVertex_t = unsafe extern "system" fn(VertexProvokingMode);
  static glProvokingVertex_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glProvokingVertex_str: &str = "glProvokingVertex\0";
  #[doc(hidden)]
  pub fn load_glProvokingVertex() {
    unimplemented!()
  }
  pub fn glProvokingVertex() {
    unimplemented!()
  }

  type glGetActiveUniformName_t = unsafe extern "system" fn(
    GLuint,
    GLuint,
    GLsizei,
    *mut GLsizei,
    *mut GLchar,
  );
  static glGetActiveUniformName_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetActiveUniformName_str: &str = "glGetActiveUniformName\0";
  #[doc(hidden)]
  pub fn load_glGetActiveUniformName() {
    unimplemented!()
  }
  pub fn glGetActiveUniformName() {
    unimplemented!()
  }

  type glGetQueryObjecti64v_t =
    unsafe extern "system" fn(GLuint, QueryObjectParameterName, *mut GLint64);
  static glGetQueryObjecti64v_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetQueryObjecti64v_str: &str = "glGetQueryObjecti64v\0";
  #[doc(hidden)]
  pub fn load_glGetQueryObjecti64v() {
    unimplemented!()
  }
  pub fn glGetQueryObjecti64v() {
    unimplemented!()
  }

  type glQueryCounter_t = unsafe extern "system" fn(GLuint, QueryCounterTarget);
  static glQueryCounter_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glQueryCounter_str: &str = "glQueryCounter\0";
  #[doc(hidden)]
  pub fn load_glQueryCounter() {
    unimplemented!()
  }
  pub fn glQueryCounter() {
    unimplemented!()
  }

  type glGetFragDataIndex_t =
    unsafe extern "system" fn(GLuint, *const GLchar) -> GLint;
  static glGetFragDataIndex_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetFragDataIndex_str: &str = "glGetFragDataIndex\0";
  #[doc(hidden)]
  pub fn load_glGetFragDataIndex() {
    unimplemented!()
  }
  pub fn glGetFragDataIndex() {
    unimplemented!()
  }

  type glDeleteSync_t = unsafe extern "system" fn(GLsync);
  static glDeleteSync_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteSync_str: &str = "glDeleteSync\0";
  #[doc(hidden)]
  pub fn load_glDeleteSync() {
    unimplemented!()
  }
  pub fn glDeleteSync() {
    unimplemented!()
  }

  type glGetDoublev_t = unsafe extern "system" fn(GetPName, *mut GLdouble);
  static glGetDoublev_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetDoublev_str: &str = "glGetDoublev\0";
  #[doc(hidden)]
  pub fn load_glGetDoublev() {
    unimplemented!()
  }
  pub fn glGetDoublev() {
    unimplemented!()
  }

  type glVertexAttribI1i_t = unsafe extern "system" fn(GLuint, GLint);
  static glVertexAttribI1i_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI1i_str: &str = "glVertexAttribI1i\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI1i() {
    unimplemented!()
  }
  pub fn glVertexAttribI1i() {
    unimplemented!()
  }

  type glGenerateMipmap_t = unsafe extern "system" fn(TextureTarget);
  static glGenerateMipmap_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGenerateMipmap_str: &str = "glGenerateMipmap\0";
  #[doc(hidden)]
  pub fn load_glGenerateMipmap() {
    unimplemented!()
  }
  pub fn glGenerateMipmap() {
    unimplemented!()
  }

  type glGetActiveUniformsiv_t = unsafe extern "system" fn(
    GLuint,
    GLsizei,
    *const GLuint,
    UniformPName,
    *mut GLint,
  );
  static glGetActiveUniformsiv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetActiveUniformsiv_str: &str = "glGetActiveUniformsiv\0";
  #[doc(hidden)]
  pub fn load_glGetActiveUniformsiv() {
    unimplemented!()
  }
  pub fn glGetActiveUniformsiv() {
    unimplemented!()
  }

  type glUniform2fv_t =
    unsafe extern "system" fn(GLint, GLsizei, *const GLfloat);
  static glUniform2fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform2fv_str: &str = "glUniform2fv\0";
  #[doc(hidden)]
  pub fn load_glUniform2fv() {
    unimplemented!()
  }
  pub fn glUniform2fv() {
    unimplemented!()
  }

  type glGetStringi_t =
    unsafe extern "system" fn(StringName, GLuint) -> GLubyte;
  static glGetStringi_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetStringi_str: &str = "glGetStringi\0";
  #[doc(hidden)]
  pub fn load_glGetStringi() {
    unimplemented!()
  }
  pub fn glGetStringi() {
    unimplemented!()
  }

  type glVertexAttribI1ui_t = unsafe extern "system" fn(GLuint, GLuint);
  static glVertexAttribI1ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI1ui_str: &str = "glVertexAttribI1ui\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI1ui() {
    unimplemented!()
  }
  pub fn glVertexAttribI1ui() {
    unimplemented!()
  }

  type glPrimitiveRestartIndex_t = unsafe extern "system" fn(GLuint);
  static glPrimitiveRestartIndex_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glPrimitiveRestartIndex_str: &str = "glPrimitiveRestartIndex\0";
  #[doc(hidden)]
  pub fn load_glPrimitiveRestartIndex() {
    unimplemented!()
  }
  pub fn glPrimitiveRestartIndex() {
    unimplemented!()
  }

  type glCompressedTexImage2D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    InternalFormat,
    GLsizei,
    GLsizei,
    GLint,
    GLsizei,
    *const c_void,
  );
  static glCompressedTexImage2D_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glCompressedTexImage2D_str: &str = "glCompressedTexImage2D\0";
  #[doc(hidden)]
  pub fn load_glCompressedTexImage2D() {
    unimplemented!()
  }
  pub fn glCompressedTexImage2D() {
    unimplemented!()
  }

  type glVertexAttribP4ui_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerType,
    GLboolean,
    GLuint,
  );
  static glVertexAttribP4ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribP4ui_str: &str = "glVertexAttribP4ui\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribP4ui() {
    unimplemented!()
  }
  pub fn glVertexAttribP4ui() {
    unimplemented!()
  }

  type glVertexAttrib4iv_t = unsafe extern "system" fn(GLuint, *const GLint);
  static glVertexAttrib4iv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4iv_str: &str = "glVertexAttrib4iv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4iv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4iv() {
    unimplemented!()
  }

  type glUseProgram_t = unsafe extern "system" fn(GLuint);
  static glUseProgram_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUseProgram_str: &str = "glUseProgram\0";
  #[doc(hidden)]
  pub fn load_glUseProgram() {
    unimplemented!()
  }
  pub fn glUseProgram() {
    unimplemented!()
  }

  type glVertexAttrib3dv_t = unsafe extern "system" fn(GLuint, *const GLdouble);
  static glVertexAttrib3dv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib3dv_str: &str = "glVertexAttrib3dv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib3dv() {
    unimplemented!()
  }
  pub fn glVertexAttrib3dv() {
    unimplemented!()
  }

  type glVertexAttribI3uiv_t = unsafe extern "system" fn(GLuint, *const GLuint);
  static glVertexAttribI3uiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI3uiv_str: &str = "glVertexAttribI3uiv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI3uiv() {
    unimplemented!()
  }
  pub fn glVertexAttribI3uiv() {
    unimplemented!()
  }

  type glGetFramebufferAttachmentParameteriv_t = unsafe extern "system" fn(
    FramebufferTarget,
    FramebufferAttachment,
    FramebufferAttachmentParameterName,
    *mut GLint,
  );
  static glGetFramebufferAttachmentParameteriv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetFramebufferAttachmentParameteriv_str: &str =
    "glGetFramebufferAttachmentParameteriv\0";
  #[doc(hidden)]
  pub fn load_glGetFramebufferAttachmentParameteriv() {
    unimplemented!()
  }
  pub fn glGetFramebufferAttachmentParameteriv() {
    unimplemented!()
  }

  type glSamplerParameterfv_t =
    unsafe extern "system" fn(GLuint, SamplerParameterF, *const GLfloat);
  static glSamplerParameterfv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glSamplerParameterfv_str: &str = "glSamplerParameterfv\0";
  #[doc(hidden)]
  pub fn load_glSamplerParameterfv() {
    unimplemented!()
  }
  pub fn glSamplerParameterfv() {
    unimplemented!()
  }

  type glDeleteRenderbuffers_t =
    unsafe extern "system" fn(GLsizei, *const GLuint);
  static glDeleteRenderbuffers_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glDeleteRenderbuffers_str: &str = "glDeleteRenderbuffers\0";
  #[doc(hidden)]
  pub fn load_glDeleteRenderbuffers() {
    unimplemented!()
  }
  pub fn glDeleteRenderbuffers() {
    unimplemented!()
  }

  type glGetVertexAttribPointerv_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerPropertyARB,
    *mut *mut c_void,
  );
  static glGetVertexAttribPointerv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetVertexAttribPointerv_str: &str = "glGetVertexAttribPointerv\0";
  #[doc(hidden)]
  pub fn load_glGetVertexAttribPointerv() {
    unimplemented!()
  }
  pub fn glGetVertexAttribPointerv() {
    unimplemented!()
  }

  type glGetProgramInfoLog_t =
    unsafe extern "system" fn(GLuint, GLsizei, *mut GLsizei, *mut GLchar);
  static glGetProgramInfoLog_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetProgramInfoLog_str: &str = "glGetProgramInfoLog\0";
  #[doc(hidden)]
  pub fn load_glGetProgramInfoLog() {
    unimplemented!()
  }
  pub fn glGetProgramInfoLog() {
    unimplemented!()
  }

  type glVertexAttribI4sv_t = unsafe extern "system" fn(GLuint, *const GLshort);
  static glVertexAttribI4sv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI4sv_str: &str = "glVertexAttribI4sv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI4sv() {
    unimplemented!()
  }
  pub fn glVertexAttribI4sv() {
    unimplemented!()
  }

  type glIsSync_t = unsafe extern "system" fn(GLsync) -> GLboolean;
  static glIsSync_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsSync_str: &str = "glIsSync\0";
  #[doc(hidden)]
  pub fn load_glIsSync() {
    unimplemented!()
  }
  pub fn glIsSync() {
    unimplemented!()
  }

  type glFlush_t = unsafe extern "system" fn();
  static glFlush_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glFlush_str: &str = "glFlush\0";
  #[doc(hidden)]
  pub fn load_glFlush() {
    unimplemented!()
  }
  pub fn glFlush() {
    unimplemented!()
  }

  type glClearDepth_t = unsafe extern "system" fn(GLdouble);
  static glClearDepth_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClearDepth_str: &str = "glClearDepth\0";
  #[doc(hidden)]
  pub fn load_glClearDepth() {
    unimplemented!()
  }
  pub fn glClearDepth() {
    unimplemented!()
  }

  type glDeleteBuffers_t = unsafe extern "system" fn(GLsizei, *const GLuint);
  static glDeleteBuffers_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDeleteBuffers_str: &str = "glDeleteBuffers\0";
  #[doc(hidden)]
  pub fn load_glDeleteBuffers() {
    unimplemented!()
  }
  pub fn glDeleteBuffers() {
    unimplemented!()
  }

  type glSamplerParameterIiv_t =
    unsafe extern "system" fn(GLuint, SamplerParameterI, *const GLint);
  static glSamplerParameterIiv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glSamplerParameterIiv_str: &str = "glSamplerParameterIiv\0";
  #[doc(hidden)]
  pub fn load_glSamplerParameterIiv() {
    unimplemented!()
  }
  pub fn glSamplerParameterIiv() {
    unimplemented!()
  }

  type glUnmapBuffer_t =
    unsafe extern "system" fn(BufferTargetARB) -> GLboolean;
  static glUnmapBuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUnmapBuffer_str: &str = "glUnmapBuffer\0";
  #[doc(hidden)]
  pub fn load_glUnmapBuffer() {
    unimplemented!()
  }
  pub fn glUnmapBuffer() {
    unimplemented!()
  }

  type glUniform4fv_t =
    unsafe extern "system" fn(GLint, GLsizei, *const GLfloat);
  static glUniform4fv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glUniform4fv_str: &str = "glUniform4fv\0";
  #[doc(hidden)]
  pub fn load_glUniform4fv() {
    unimplemented!()
  }
  pub fn glUniform4fv() {
    unimplemented!()
  }

  type glShaderSource_t = unsafe extern "system" fn(
    GLuint,
    GLsizei,
    *const *const GLchar,
    *const GLint,
  );
  static glShaderSource_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glShaderSource_str: &str = "glShaderSource\0";
  #[doc(hidden)]
  pub fn load_glShaderSource() {
    unimplemented!()
  }
  pub fn glShaderSource() {
    unimplemented!()
  }

  type glGenFramebuffers_t = unsafe extern "system" fn(GLsizei, *mut GLuint);
  static glGenFramebuffers_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGenFramebuffers_str: &str = "glGenFramebuffers\0";
  #[doc(hidden)]
  pub fn load_glGenFramebuffers() {
    unimplemented!()
  }
  pub fn glGenFramebuffers() {
    unimplemented!()
  }

  type glCopyTexImage1D_t = unsafe extern "system" fn(
    TextureTarget,
    GLint,
    InternalFormat,
    GLint,
    GLint,
    GLsizei,
    GLint,
  );
  static glCopyTexImage1D_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glCopyTexImage1D_str: &str = "glCopyTexImage1D\0";
  #[doc(hidden)]
  pub fn load_glCopyTexImage1D() {
    unimplemented!()
  }
  pub fn glCopyTexImage1D() {
    unimplemented!()
  }

  type glValidateProgram_t = unsafe extern "system" fn(GLuint);
  static glValidateProgram_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glValidateProgram_str: &str = "glValidateProgram\0";
  #[doc(hidden)]
  pub fn load_glValidateProgram() {
    unimplemented!()
  }
  pub fn glValidateProgram() {
    unimplemented!()
  }

  type glVertexAttrib4Nsv_t = unsafe extern "system" fn(GLuint, *const GLshort);
  static glVertexAttrib4Nsv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib4Nsv_str: &str = "glVertexAttrib4Nsv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib4Nsv() {
    unimplemented!()
  }
  pub fn glVertexAttrib4Nsv() {
    unimplemented!()
  }

  type glGetSamplerParameteriv_t =
    unsafe extern "system" fn(GLuint, SamplerParameterI, *mut GLint);
  static glGetSamplerParameteriv_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetSamplerParameteriv_str: &str = "glGetSamplerParameteriv\0";
  #[doc(hidden)]
  pub fn load_glGetSamplerParameteriv() {
    unimplemented!()
  }
  pub fn glGetSamplerParameteriv() {
    unimplemented!()
  }

  type glVertexAttrib1s_t = unsafe extern "system" fn(GLuint, GLshort);
  static glVertexAttrib1s_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib1s_str: &str = "glVertexAttrib1s\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib1s() {
    unimplemented!()
  }
  pub fn glVertexAttrib1s() {
    unimplemented!()
  }

  type glVertexAttrib2dv_t = unsafe extern "system" fn(GLuint, *const GLdouble);
  static glVertexAttrib2dv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib2dv_str: &str = "glVertexAttrib2dv\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib2dv() {
    unimplemented!()
  }
  pub fn glVertexAttrib2dv() {
    unimplemented!()
  }

  type glGetUniformLocation_t =
    unsafe extern "system" fn(GLuint, *const GLchar) -> GLint;
  static glGetUniformLocation_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetUniformLocation_str: &str = "glGetUniformLocation\0";
  #[doc(hidden)]
  pub fn load_glGetUniformLocation() {
    unimplemented!()
  }
  pub fn glGetUniformLocation() {
    unimplemented!()
  }

  type glBlitFramebuffer_t = unsafe extern "system" fn(
    GLint,
    GLint,
    GLint,
    GLint,
    GLint,
    GLint,
    GLint,
    GLint,
    ClearBufferMask,
    BlitFramebufferFilter,
  );
  static glBlitFramebuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBlitFramebuffer_str: &str = "glBlitFramebuffer\0";
  #[doc(hidden)]
  pub fn load_glBlitFramebuffer() {
    unimplemented!()
  }
  pub fn glBlitFramebuffer() {
    unimplemented!()
  }

  type glVertexAttribI2i_t = unsafe extern "system" fn(GLuint, GLint, GLint);
  static glVertexAttribI2i_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribI2i_str: &str = "glVertexAttribI2i\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribI2i() {
    unimplemented!()
  }
  pub fn glVertexAttribI2i() {
    unimplemented!()
  }

  type glUniformBlockBinding_t =
    unsafe extern "system" fn(GLuint, GLuint, GLuint);
  static glUniformBlockBinding_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glUniformBlockBinding_str: &str = "glUniformBlockBinding\0";
  #[doc(hidden)]
  pub fn load_glUniformBlockBinding() {
    unimplemented!()
  }
  pub fn glUniformBlockBinding() {
    unimplemented!()
  }

  type glBindFramebuffer_t =
    unsafe extern "system" fn(FramebufferTarget, GLuint);
  static glBindFramebuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glBindFramebuffer_str: &str = "glBindFramebuffer\0";
  #[doc(hidden)]
  pub fn load_glBindFramebuffer() {
    unimplemented!()
  }
  pub fn glBindFramebuffer() {
    unimplemented!()
  }

  type glVertexAttribDivisor_t = unsafe extern "system" fn(GLuint, GLuint);
  static glVertexAttribDivisor_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glVertexAttribDivisor_str: &str = "glVertexAttribDivisor\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribDivisor() {
    unimplemented!()
  }
  pub fn glVertexAttribDivisor() {
    unimplemented!()
  }

  type glGetVertexAttribdv_t =
    unsafe extern "system" fn(GLuint, VertexAttribPropertyARB, *mut GLdouble);
  static glGetVertexAttribdv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetVertexAttribdv_str: &str = "glGetVertexAttribdv\0";
  #[doc(hidden)]
  pub fn load_glGetVertexAttribdv() {
    unimplemented!()
  }
  pub fn glGetVertexAttribdv() {
    unimplemented!()
  }

  type glIsProgram_t = unsafe extern "system" fn(GLuint) -> GLboolean;
  static glIsProgram_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glIsProgram_str: &str = "glIsProgram\0";
  #[doc(hidden)]
  pub fn load_glIsProgram() {
    unimplemented!()
  }
  pub fn glIsProgram() {
    unimplemented!()
  }

  type glGetQueryObjectuiv_t =
    unsafe extern "system" fn(GLuint, QueryObjectParameterName, *mut GLuint);
  static glGetQueryObjectuiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetQueryObjectuiv_str: &str = "glGetQueryObjectuiv\0";
  #[doc(hidden)]
  pub fn load_glGetQueryObjectuiv() {
    unimplemented!()
  }
  pub fn glGetQueryObjectuiv() {
    unimplemented!()
  }

  type glGetBooleanv_t = unsafe extern "system" fn(GetPName, *mut GLboolean);
  static glGetBooleanv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetBooleanv_str: &str = "glGetBooleanv\0";
  #[doc(hidden)]
  pub fn load_glGetBooleanv() {
    unimplemented!()
  }
  pub fn glGetBooleanv() {
    unimplemented!()
  }

  type glStencilMaskSeparate_t =
    unsafe extern "system" fn(StencilFaceDirection, GLuint);
  static glStencilMaskSeparate_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glStencilMaskSeparate_str: &str = "glStencilMaskSeparate\0";
  #[doc(hidden)]
  pub fn load_glStencilMaskSeparate() {
    unimplemented!()
  }
  pub fn glStencilMaskSeparate() {
    unimplemented!()
  }

  type glVertexAttribP1ui_t = unsafe extern "system" fn(
    GLuint,
    VertexAttribPointerType,
    GLboolean,
    GLuint,
  );
  static glVertexAttribP1ui_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttribP1ui_str: &str = "glVertexAttribP1ui\0";
  #[doc(hidden)]
  pub fn load_glVertexAttribP1ui() {
    unimplemented!()
  }
  pub fn glVertexAttribP1ui() {
    unimplemented!()
  }

  type glVertexAttrib3d_t =
    unsafe extern "system" fn(GLuint, GLdouble, GLdouble, GLdouble);
  static glVertexAttrib3d_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glVertexAttrib3d_str: &str = "glVertexAttrib3d\0";
  #[doc(hidden)]
  pub fn load_glVertexAttrib3d() {
    unimplemented!()
  }
  pub fn glVertexAttrib3d() {
    unimplemented!()
  }

  type glLogicOp_t = unsafe extern "system" fn(LogicOp);
  static glLogicOp_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glLogicOp_str: &str = "glLogicOp\0";
  #[doc(hidden)]
  pub fn load_glLogicOp() {
    unimplemented!()
  }
  pub fn glLogicOp() {
    unimplemented!()
  }

  type glMapBuffer_t =
    unsafe extern "system" fn(BufferTargetARB, BufferAccessARB);
  static glMapBuffer_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glMapBuffer_str: &str = "glMapBuffer\0";
  #[doc(hidden)]
  pub fn load_glMapBuffer() {
    unimplemented!()
  }
  pub fn glMapBuffer() {
    unimplemented!()
  }

  type glEndTransformFeedback_t = unsafe extern "system" fn();
  static glEndTransformFeedback_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glEndTransformFeedback_str: &str = "glEndTransformFeedback\0";
  #[doc(hidden)]
  pub fn load_glEndTransformFeedback() {
    unimplemented!()
  }
  pub fn glEndTransformFeedback() {
    unimplemented!()
  }

  type glGetProgramiv_t =
    unsafe extern "system" fn(GLuint, ProgramPropertyARB, *mut GLint);
  static glGetProgramiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetProgramiv_str: &str = "glGetProgramiv\0";
  #[doc(hidden)]
  pub fn load_glGetProgramiv() {
    unimplemented!()
  }
  pub fn glGetProgramiv() {
    unimplemented!()
  }

  type glDrawArrays_t =
    unsafe extern "system" fn(PrimitiveType, GLint, GLsizei);
  static glDrawArrays_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glDrawArrays_str: &str = "glDrawArrays\0";
  #[doc(hidden)]
  pub fn load_glDrawArrays() {
    unimplemented!()
  }
  pub fn glDrawArrays() {
    unimplemented!()
  }

  type glPointParameterfv_t =
    unsafe extern "system" fn(PointParameterNameARB, *const GLfloat);
  static glPointParameterfv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glPointParameterfv_str: &str = "glPointParameterfv\0";
  #[doc(hidden)]
  pub fn load_glPointParameterfv() {
    unimplemented!()
  }
  pub fn glPointParameterfv() {
    unimplemented!()
  }

  type glSamplerParameteri_t =
    unsafe extern "system" fn(GLuint, SamplerParameterI, GLint);
  static glSamplerParameteri_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glSamplerParameteri_str: &str = "glSamplerParameteri\0";
  #[doc(hidden)]
  pub fn load_glSamplerParameteri() {
    unimplemented!()
  }
  pub fn glSamplerParameteri() {
    unimplemented!()
  }

  type glSamplerParameteriv_t =
    unsafe extern "system" fn(GLuint, SamplerParameterI, *const GLint);
  static glSamplerParameteriv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glSamplerParameteriv_str: &str = "glSamplerParameteriv\0";
  #[doc(hidden)]
  pub fn load_glSamplerParameteriv() {
    unimplemented!()
  }
  pub fn glSamplerParameteriv() {
    unimplemented!()
  }

  type glGetBooleani_v_t =
    unsafe extern "system" fn(BufferTargetARB, GLuint, *mut GLboolean);
  static glGetBooleani_v_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glGetBooleani_v_str: &str = "glGetBooleani_v\0";
  #[doc(hidden)]
  pub fn load_glGetBooleani_v() {
    unimplemented!()
  }
  pub fn glGetBooleani_v() {
    unimplemented!()
  }

  type glStencilMask_t = unsafe extern "system" fn(GLuint);
  static glStencilMask_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glStencilMask_str: &str = "glStencilMask\0";
  #[doc(hidden)]
  pub fn load_glStencilMask() {
    unimplemented!()
  }
  pub fn glStencilMask() {
    unimplemented!()
  }

  type glClearBufferfi_t =
    unsafe extern "system" fn(Buffer, GLint, GLfloat, GLint);
  static glClearBufferfi_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClearBufferfi_str: &str = "glClearBufferfi\0";
  #[doc(hidden)]
  pub fn load_glClearBufferfi() {
    unimplemented!()
  }
  pub fn glClearBufferfi() {
    unimplemented!()
  }

  type glClearBufferiv_t =
    unsafe extern "system" fn(Buffer, GLint, *const GLint);
  static glClearBufferiv_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glClearBufferiv_str: &str = "glClearBufferiv\0";
  #[doc(hidden)]
  pub fn load_glClearBufferiv() {
    unimplemented!()
  }
  pub fn glClearBufferiv() {
    unimplemented!()
  }

  type glEnable_t = unsafe extern "system" fn(EnableCap);
  static glEnable_p: AtomicPtr<c_void> = AtomicPtr::new(null_mut());
  const glEnable_str: &str = "glEnable\0";
  #[doc(hidden)]
  pub fn load_glEnable() {
    unimplemented!()
  }
  pub fn glEnable() {
    unimplemented!()
  }

  type glBeginTransformFeedback_t = unsafe extern "system" fn(PrimitiveType);
  static glBeginTransformFeedback_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glBeginTransformFeedback_str: &str = "glBeginTransformFeedback\0";
  #[doc(hidden)]
  pub fn load_glBeginTransformFeedback() {
    unimplemented!()
  }
  pub fn glBeginTransformFeedback() {
    unimplemented!()
  }

  type glGetActiveUniformBlockName_t = unsafe extern "system" fn(
    GLuint,
    GLuint,
    GLsizei,
    *mut GLsizei,
    *mut GLchar,
  );
  static glGetActiveUniformBlockName_p: AtomicPtr<c_void> =
    AtomicPtr::new(null_mut());
  const glGetActiveUniformBlockName_str: &str = "glGetActiveUniformBlockName\0";
  #[doc(hidden)]
  pub fn load_glGetActiveUniformBlockName() {
    unimplemented!()
  }
  pub fn glGetActiveUniformBlockName() {
    unimplemented!()
  }
  // TODO!
}

#[cfg(feature = "struct_loader")]
pub use struct_loader::*;
#[cfg(feature = "struct_loader")]
pub mod struct_loader {
  use super::*;
  // TODO!
}
